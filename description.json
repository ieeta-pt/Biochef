{
  "tools": [
    {
      "name": "gto_fastq_to_fasta",
      "description": "Converts a FASTQ file format to a pseudo FASTA file. It does NOT align the sequence. It extracts the sequence and adds a pseudo header.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "FASTA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/FastqToFasta.c"
    },
    {
      "name": "gto_fastq_to_mfasta",
      "description": "Converts a FASTQ file format to a pseudo Multi-FASTA file. It does NOT align the sequence. It extracts the sequence and adds each header in a Multi-FASTA format.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "Multi-FASTA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/FastqToMFasta.c"
    },
    {
      "name": "gto_fastq_exclude_n",
      "description": "Discards the FASTQ reads with the minimum number of 'N' symbols. If present, it will erase the second header (after +).",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "FASTQ"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-m",
          "parameter": "max",
          "required": true
        }
      ],
      "parameters": [
        {
          "name": "max",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastqExcludeN.c"
    },
    {
      "name": "gto_fastq_extract_quality_scores",
      "description": "Extracts all the quality-scores from FASTQ reads.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "text"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/FastqExtractQS.c"
    },
    {
      "name": "gto_fastq_info",
      "description": "Analyses the basic information of FASTQ file format.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "text"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/FastqInfo.c"
    },
    {
      "name": "gto_fastq_maximum_read_size",
      "description": "Filters the FASTQ reads with the length higher than the value defined. If present, it will erase the second header (after +).",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "FASTQ"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-s",
          "parameter": "size",
          "required": true
        }
      ],
      "parameters": [
        {
          "name": "size",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastqMaximumReadSize.c"
    },
    {
      "name": "gto_fastq_minimum_quality_score",
      "description": "Discards reads with average quality-score below of the defined.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "FASTQ"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-m",
          "parameter": "min",
          "required": true
        }
      ],
      "parameters": [
        {
          "name": "min",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastqMinimumQualityScore.c"
    },
    {
      "name": "gto_fastq_minimum_read_size",
      "description": "Filters the FASTQ reads with the length smaller than the value defined. If present, it will erase the second header (after +).",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "FASTQ"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-s",
          "parameter": "size",
          "required": true
        }
      ],
      "parameters": [
        {
          "name": "size",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastqMinimumReadSize.c"
    },
    {
      "name": "gto_fastq_rand_extra_chars",
      "description": "Substitutes in the FASTQ files, the DNA sequence the outside ACGT chars by random ACGT symbols.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "FASTQ"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/FastqRandExtraChars.c"
    },
    {
      "name": "gto_fastq_from_seq",
      "description": "Converts a genomic sequence to pseudo FASTQ file format.",
      "input": {
        "type": "stdin",
        "format": "DNA, RNA, AminoAcids"
      },
      "output": {
        "type": "stdout",
        "format": "FASTQ"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-n",
          "parameter": "name",
          "required": false
        },
        {
          "flag": "-l",
          "parameter": "lineSize",
          "required": false
        }
      ],
      "parameters": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "lineSize",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastqFromSeq.c"
    },
    {
      "name": "gto_fastq_mutate",
      "description": "Creates a synthetic mutation of a FASTQ file given specific rates of mutations, deletions and additions.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "FASTQ"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-s",
          "parameter": "seed",
          "required": false
        },
        {
          "flag": "-m",
          "parameter": "mutation-rate",
          "required": false
        },
        {
          "flag": "-d",
          "parameter": "deletion-rate",
          "required": false
        },
        {
          "flag": "-i",
          "parameter": "insertion-rate",
          "required": false
        },
        {
          "flag": "-a",
          "parameter": "ACGTN-alphabet",
          "required": false
        }
      ],
      "parameters": [
        {
          "name": "seed",
          "type": "integer",
          "maxLength": 9
        },
        {
          "name": "mutation-rate",
          "type": "float",
          "min": 0,
          "max": 1
        },
        {
          "name": "deletion-rate",
          "type": "float",
          "min": 0,
          "max": 1
        },
        {
          "name": "insertion-rate",
          "type": "float",
          "min": 0,
          "max": 1
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastqMutate.c"
    },
    {
      "name": "gto_fastq_split",
      "description": "Splits Paired End files according to the direction of the strand ('/1' or '/2'). It writes by default singleton reads as forward stands.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "text"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-f",
          "parameter": "forward",
          "required": true
        },
        {
          "flag": "-r",
          "parameter": "reverse",
          "required": true
        }
      ],
      "parameters": [
        {
          "name": "forward",
          "type": "file"
        },
        {
          "name": "reverse",
          "type": "file"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastqSplit.c"
    },
    {
      "name": "gto_fastq_pack",
      "description": "Packages each FASTQ read in a single line. It can show the read score first or the dna sequence, depending on the execution mode.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "PackagedFASTQ"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-s",
          "parameter": "scores",
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/FastqPack.c"
    },
    {
      "name": "gto_fastq_unpack",
      "description": "Unpacks the FASTQ reads packaged using the gto_fastq_pack tool.",
      "input": {
        "type": "stdin",
        "format": "PackagedFASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "FASTQ"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-s",
          "parameter": "scores",
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/FastqUnpack.c"
    },
    {
      "name": "gto_fastq_quality_score_info",
      "description": "Analyses the quality-scores of a FASTQ file.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "text"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-m",
          "parameter": "max",
          "required": false
        }
      ],
      "parameters": [
        {
          "name": "max",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastqQualityScoreInfo.c"
    },
    {
      "name": "gto_fastq_quality_score_min",
      "description": "Analyses the minimal quality-scores of a FASTQ file.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "text"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-m",
          "parameter": "max",
          "required": false
        }
      ],
      "parameters": [
        {
          "name": "max",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastqQualityScoreMin.c"
    },
    {
      "name": "gto_fastq_quality_score_max",
      "description": "Analyses the maximal quality-scores of a FASTQ file.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "text"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-m",
          "parameter": "max",
          "required": false
        }
      ],
      "parameters": [
        {
          "name": "max",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastqQualityScoreMax.c"
    },
    {
      "name": "gto_fastq_cut",
      "description": "Cuts read sequences in a FASTQ file. It requires that the initial and end positions for the cut.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "FASTQ"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-i",
          "parameter": "initial",
          "required": true
        },
        {
          "flag": "-e",
          "parameter": "end",
          "required": true
        }
      ],
      "parameters": [
        {
          "name": "initial",
          "type": "integer"
        },
        {
          "name": "end",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastqCut.c"
    },
    {
      "name": "gto_fastq_minimum_local_quality_score_forward",
      "description": "Filters the reads considering the quality score average of a defined window size of bases.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "FASTQ"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-k",
          "parameter": "windowsize",
          "required": false
        },
        {
          "flag": "-w",
          "parameter": "minavg",
          "required": false
        },
        {
          "flag": "-m",
          "parameter": "minqs",
          "required": false
        }
      ],
      "parameters": [
        {
          "name": "windowsize",
          "type": "integer"
        },
        {
          "name": "minavg",
          "type": "integer"
        },
        {
          "name": "minqs",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastqMinimumQualityScoreForward.c"
    },
    {
      "name": "gto_fastq_minimum_local_quality_score_reverse",
      "description": "Filters the reverse reads, considering the quality score average of a defined window size of bases.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "FASTQ"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-k",
          "parameter": "windowsize",
          "required": false
        },
        {
          "flag": "-w",
          "parameter": "minavg",
          "required": false
        },
        {
          "flag": "-m",
          "parameter": "minqs",
          "required": false
        }
      ],
      "parameters": [
        {
          "name": "windowsize",
          "type": "integer"
        },
        {
          "name": "minavg",
          "type": "integer"
        },
        {
          "name": "minqs",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastqMinimumQualityScoreReverse.c"
    },
    {
      "name": "gto_fastq_xs",
      "description": "A skilled FASTQ read simulation tool, flexible, portable (does not need a reference sequence) and tunable in terms of sequence complexity. XS handles Ion Torrent, Roche-454, Illumina and ABI-SOLiD simulation sequencing types. It has several running modes, depending on the time and memory available, and is aimed at testing computing infrastructures, namely cloud computing of large-scale projects, and testing FASTQ compression algorithms. Moreover, XS offers the possibility of simulating the three main FASTQ components individually (headers, DNA sequences and quality-scores). Quality-scores can be simulated using uniform and Gaussian distributions.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "FASTQ"
      },
      "flags": [
        "-h",
        "-v",
        "-t",
        "-hf",
        "-i",
        "-o",
        "-ls",
        "-ld",
        "-n",
        "-f",
        "-rn",
        "-ri",
        "-ra",
        "-rm",
        "-rr",
        "-qt",
        "-qf",
        "-qc",
        "-eh",
        "-eo",
        "-ed",
        "-edb",
        "-es",
        "-s"
      ],
      "parameters": [
        {
          "name": "sequencingType",
          "type": "integer"
        },
        {
          "name": "headerFormat",
          "type": "integer"
        },
        {
          "name": "instrumentName",
          "type": "string"
        },
        {
          "name": "lineSize",
          "type": "integer"
        },
        {
          "name": "minSize",
          "type": "integer"
        },
        {
          "name": "maxSize",
          "type": "integer"
        },
        {
          "name": "numberOfReads",
          "type": "integer"
        },
        {
          "name": "A",
          "type": "float"
        },
        {
          "name": "C",
          "type": "float"
        },
        {
          "name": "G",
          "type": "float"
        },
        {
          "name": "T",
          "type": "float"
        },
        {
          "name": "N",
          "type": "float"
        },
        {
          "name": "numberOfRepeats",
          "type": "integer"
        },
        {
          "name": "repeatsMinSize",
          "type": "integer"
        },
        {
          "name": "repeatsMaxSize",
          "type": "integer"
        },
        {
          "name": "mutationRate",
          "type": "float"
        },
        {
          "name": "assignmentType",
          "type": "integer"
        },
        {
          "name": "statsFile",
          "type": "string"
        },
        {
          "name": "template",
          "type": "string"
        },
        {
          "name": "seed",
          "type": "integer"
        },
        {
          "name": "genFile",
          "type": "string"
        }
      ],
      "is_multi_output": false,
      "source": "external_tool"
    },
    {
      "name": "gto_fastq_clust_reads",
      "description": "Agroups reads and creates an index file. It cluster reads in therms of Seq k-mer Lexicographical order.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "FASTQ"
      },
      "flags": [
        "-h",
        "-c"
      ],
      "parameters": [
        {
          "name": "ctx",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "Not found in Makefile"
    },
    {
      "name": "gto_fastq_complement",
      "description": "Replaces the ACGT bases with their complements in a FASTQ file format.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "FASTQ"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/FastqComplement.c"
    },
    {
      "name": "gto_fastq_reverse",
      "description": "Reverses the ACGT bases order for each read in a FASTQ file format.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "FASTQ"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/FastqReverse.c"
    },
    {
      "name": "gto_fastq_variation_map",
      "description": "Identifies the variation that occurs in the sequences relative to the reads or a set of reads. The (probabilistic) Bloom filter is automatically set.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "text"
      },
      "flags": [
        "-h",
        "-v",
        "-a",
        "-s",
        "-i",
        "-p",
        "-k"
      ],
      "parameters": [
        {
          "name": "rFile1",
          "type": "string"
        },
        {
          "name": "rFile2",
          "type": "string"
        },
        {
          "name": "tFile1",
          "type": "string"
        },
        {
          "name": "tFile2",
          "type": "string"
        },
        {
          "name": "bloom size",
          "type": "integer"
        },
        {
          "name": "k-mer size",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "external_tool (CHESTER)"
    },
    {
      "name": "gto_fastq_variation_filter",
      "description": "Filters and segments the regions of singularity from the output of gto_fastq_variation_map.",
      "input": {
        "type": "stdin",
        "format": "text"
      },
      "output": {
        "type": "stdout",
        "format": "text"
      },
      "flags": [
        "-h",
        "-v",
        "-a",
        "-t",
        "-w",
        "-u"
      ],
      "parameters": [
        {
          "name": "tFile1",
          "type": "string"
        },
        {
          "name": "tFile2",
          "type": "string"
        },
        {
          "name": "threshold",
          "type": "float"
        },
        {
          "name": "window size",
          "type": "integer"
        },
        {
          "name": "sub-sampling",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "external_tool (CHESTER)"
    },
    {
      "name": "gto_fastq_variation_visual",
      "description": "Depicts the regions of singularity using the output from gto_fastq_variation_filter into an SVG image.",
      "input": {
        "type": "stdin",
        "format": "text"
      },
      "output": {
        "type": "stdout",
        "format": "SVG"
      },
      "flags": [
        "-h",
        "-v",
        "-a",
        "-e"
      ],
      "parameters": [
        {
          "name": "tFile1",
          "type": "string"
        },
        {
          "name": "tFile2",
          "type": "string"
        },
        {
          "name": "enlarge painted regions",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "external_tool (CHESTER)"
    },
    {
      "name": "gto_fastq_metagenomics",
      "description": "An ultra-fast method to infer metagenomic composition of sequenced reads relative to a database. gto_fastq_metagenomics measures similarity between any FASTQ file (or FASTA), independently from the size, against any multi-FASTA database, such as the entire set of complete genomes from the NCBI. gto_fastq_metagenomics supports single reads, paired-end reads, and compositions of both. It has been tested in many platforms, such as Illumina MySeq, HiSeq, Novaseq, IonTorrent. gto_fastq_metagenomics is efficient to detect the presence and authenticate a given species in the FASTQ reads. The core of the method is based on relative data compression. gto_fastq_metagenomics uses variable multi-threading, without multiplying the memory for each thread, being able to run efficiently in a common laptop.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "CSV"
      },
      "flags": [
        "-h",
        "-F",
        "-V",
        "-v",
        "-Z",
        "-s",
        "-l",
        "-p",
        "-t",
        "-n",
        "-x",
        "-y"
      ],
      "parameters": [
        {
          "name": "FILE1",
          "type": "string"
        },
        {
          "name": "FILE2",
          "type": "string"
        },
        {
          "name": "FILE",
          "type": "string"
        },
        {
          "name": "level",
          "type": "integer"
        },
        {
          "name": "sample",
          "type": "integer"
        },
        {
          "name": "top",
          "type": "integer"
        },
        {
          "name": "nThreads",
          "type": "integer"
        },
        {
          "name": "similarity top filename",
          "type": "string"
        },
        {
          "name": "profile filename",
          "type": "string"
        }
      ],
      "is_multi_output": false,
      "source": "external_tool"
    },
    {
      "name": "gto_fasta_to_seq",
      "description": "Converts a FASTA or Multi-FASTA file format to a seq.",
      "input": {
        "type": "stdin",
        "format": "FASTA, Multi-FASTA"
      },
      "output": {
        "type": "stdout",
        "format": "DNA, RNA, AminoAcids"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/FastaToSeq.c"
    },
    {
      "name": "gto_fasta_from_seq",
      "description": "Converts a genomic sequence to pseudo FASTA file format.",
      "input": {
        "type": "stdin",
        "format": "DNA, RNA, AminoAcids"
      },
      "output": {
        "type": "stdout",
        "format": "FASTA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-n",
          "parameter": "name",
          "required": false
        },
        {
          "flag": "-l",
          "parameter": "lineSize",
          "required": false
        }
      ],
      "parameters": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "lineSize",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastaFromSeq.c"
    },
    {
      "name": "gto_fasta_extract",
      "description": "Extracts sequences from a FASTA file, which the range is defined by the user in the parameters.",
      "input": {
        "type": "stdin",
        "format": "FASTA"
      },
      "output": {
        "type": "stdout",
        "format": "DNA, RNA, AminoAcids"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-i",
          "parameter": "init",
          "required": false
        },
        {
          "flag": "-e",
          "parameter": "end",
          "required": false
        }
      ],
      "parameters": [
        {
          "name": "init",
          "type": "integer"
        },
        {
          "name": "end",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastaExtract.c"
    },
    {
      "name": "gto_fasta_extract_by_read",
      "description": "Extracts sequences from each read in a Multi-FASTA file (splited by \\n), which the range is defined by the user in the parameters.",
      "input": {
        "type": "stdin",
        "format": "FASTA, Multi-FASTA"
      },
      "output": {
        "type": "stdout",
        "format": "FASTA, Multi-FASTA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-i",
          "parameter": "init",
          "required": false
        },
        {
          "flag": "-e",
          "parameter": "end",
          "required": false
        }
      ],
      "parameters": [
        {
          "name": "init",
          "type": "integer"
        },
        {
          "name": "end",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastaExtractByRead.c"
    },
    {
      "name": "gto_fasta_info",
      "description": "Shows the readed information of a FASTA or Multi-FASTA file format.",
      "input": {
        "type": "stdin",
        "format": "FASTA"
      },
      "output": {
        "type": "stdout",
        "format": "text"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/FastaInfo.c"
    },
    {
      "name": "gto_fasta_mutate",
      "description": "Creates a synthetic mutation of a FASTA file given specific rates of editions, deletions and additions.",
      "input": {
        "type": "stdin",
        "format": "FASTA, Multi-FASTA"
      },
      "output": {
        "type": "stdout",
        "format": "FASTA, Multi-FASTA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-s",
          "parameter": "seed",
          "required": false
        },
        {
          "flag": "-e",
          "parameter": "edit-rate",
          "required": false
        },
        {
          "flag": "-d",
          "parameter": "deletion-rate",
          "required": false
        },
        {
          "flag": "-i",
          "parameter": "insertion-rate",
          "required": false
        },
        {
          "flag": "-a",
          "parameter": "ACGTN-alphabet",
          "required": false
        }
      ],
      "parameters": [
        {
          "name": "seed",
          "type": "integer",
          "maxLength": 9
        },
        {
          "name": "edit-rate",
          "type": "float",
          "min": 0,
          "max": 1
        },
        {
          "name": "deletion-rate",
          "type": "float",
          "min": 0,
          "max": 1
        },
        {
          "name": "insertion-rate",
          "type": "float",
          "min": 0,
          "max": 1
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastaMutate.c"
    },
    {
      "name": "gto_fasta_rand_extra_chars",
      "description": "Substitutes in the DNA sequence the outside ACGT chars by random ACGT symbols. It works both in FASTA and Multi-FASTA file formats.",
      "input": {
        "type": "stdin",
        "format": "FASTA, Multi-FASTA"
      },
      "output": {
        "type": "stdout",
        "format": "FASTA, Multi-FASTA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/FastaRandExtraChars.c"
    },
    {
      "name": "gto_fasta_extract_read_by_pattern",
      "description": "Extracts reads from a Multi-FASTA file format given a pattern in the header. Also, this pattern is case insensitive.",
      "input": {
        "type": "stdin",
        "format": "Multi-FASTA"
      },
      "output": {
        "type": "stdout",
        "format": "Multi-FASTA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-p",
          "parameter": "pattern",
          "required": true
        }
      ],
      "parameters": [
        {
          "name": "pattern",
          "type": "string"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastaExtractReadByIdPattern.c"
    },
    {
      "name": "gto_fasta_find_n_pos",
      "description": "Reports the 'N' regions in a sequence or FASTA (seq) file.",
      "input": {
        "type": "stdin",
        "format": "FASTA"
      },
      "output": {
        "type": "stdout",
        "format": "text"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/FastaFindNPos.c"
    },
    {
      "name": "gto_fasta_split_reads",
      "description": "Splits a Multi-FASTA file to multiple FASTA files.",
      "input": {
        "type": "stdin",
        "format": "Multi-FASTA"
      },
      "output": {
        "type": "file",
        "format": "FASTA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": true,
      "source": "gto/src/FastaSplitReads.c"
    },
    {
      "name": "gto_fasta_rename_human_headers",
      "description": "Changes the headers of FASTA or Multi-FASTA file to simple chrX by order, where X is the number.",
      "input": {
        "type": "stdin",
        "format": "FASTA"
      },
      "output": {
        "type": "stdout",
        "format": "FASTA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/FastaRenameHumanHeaders.c"
    },
    {
      "name": "gto_fasta_extract_pattern_coords",
      "description": "Extracts the header and coordinates from a Multi-FASTA file format given a pattern/motif in the sequence.",
      "input": {
        "type": "stdin",
        "format": "Multi-FASTA"
      },
      "output": {
        "type": "stdout",
        "format": "text"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-p",
          "parameter": "pattern",
          "required": true
        }
      ],
      "parameters": [
        {
          "name": "pattern",
          "type": "string"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastaExtractPatternCoords.c"
    },
    {
      "name": "gto_fasta_complement",
      "description": "Replaces the ACGT bases with their complements in FASTA or Multi-FASTA file format.",
      "input": {
        "type": "stdin",
        "format": "FASTA, Multi-FASTA"
      },
      "output": {
        "type": "stdout",
        "format": "FASTA, Multi-FASTA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/FastaComplement.c"
    },
    {
      "name": "gto_fasta_reverse",
      "description": "Reverses the order of a FASTA or Multi-FASTA file format.",
      "input": {
        "type": "stdin",
        "format": "FASTA, Multi-FASTA"
      },
      "output": {
        "type": "stdout",
        "format": "FASTA, Multi-FASTA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/FastaReverse.c"
    },
    {
      "name": "gto_fasta_variation_map",
      "description": "This tool is an alias to gto_fastq_variation_map tool. Please check the documentation of this tool in the in the section of FASTQ tools.",
      "input": {
        "type": "stdin",
        "format": "FASTA"
      },
      "output": {
        "type": "stdout",
        "format": "text"
      },
      "flags": [
        "-h",
        "-v",
        "-a",
        "-s",
        "-i",
        "-p",
        "-k"
      ],
      "parameters": [
        {
          "name": "rFile1",
          "type": "string"
        },
        {
          "name": "rFile2",
          "type": "string"
        },
        {
          "name": "tFile1",
          "type": "string"
        },
        {
          "name": "tFile2",
          "type": "string"
        },
        {
          "name": "bloom size",
          "type": "integer"
        },
        {
          "name": "k-mer size",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "external_tool (CHESTER)"
    },
    {
      "name": "gto_fasta_variation_filter",
      "description": "This tool is an alias to gto_fastq_variation_filter tool. Please check the documentation of this tool in the in the section of FASTQ tools.",
      "input": {
        "type": "stdin",
        "format": "text"
      },
      "output": {
        "type": "stdout",
        "format": "text"
      },
      "flags": [
        "-h",
        "-v",
        "-a",
        "-t",
        "-w",
        "-u"
      ],
      "parameters": [
        {
          "name": "tFile1",
          "type": "string"
        },
        {
          "name": "tFile2",
          "type": "string"
        },
        {
          "name": "threshold",
          "type": "float"
        },
        {
          "name": "window size",
          "type": "integer"
        },
        {
          "name": "sub-sampling",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "external_tool (CHESTER)"
    },
    {
      "name": "gto_fasta_variation_visual",
      "description": "This tool is an alias to gto_fastq_variation_visual tool. Please check the documentation of this tool in the in the section of FASTQ tools.",
      "input": {
        "type": "stdin",
        "format": "text"
      },
      "output": {
        "type": "stdout",
        "format": "SVG"
      },
      "flags": [
        "-h",
        "-v",
        "-a",
        "-e"
      ],
      "parameters": [
        {
          "name": "tFile1",
          "type": "string"
        },
        {
          "name": "tFile2",
          "type": "string"
        },
        {
          "name": "enlarge painted regions",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "external_tool (CHESTER)"
    },
    {
      "name": "gto_fasta_split_streams",
      "description": "Splits and writes a FASTA file into three channels of information: headers, extra and DNA.",
      "input": {
        "type": "stdin",
        "format": "FASTA, Multi-FASTA"
      },
      "output": {
        "type": "stdout",
        "format": "text"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-e",
          "parameter": "extra",
          "required": true
        },
        {
          "flag": "-d",
          "parameter": "dna",
          "required": true
        },
        {
          "flag": "-H",
          "parameter": "headers",
          "required": true
        }
      ],
      "parameters": [
        {
          "name": "extra",
          "type": "string"
        },
        {
          "name": "dna",
          "type": "string"
        },
        {
          "name": "headers",
          "type": "string"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastaSplitStreams.c"
    },
    {
      "name": "gto_fasta_merge_streams",
      "description": "It merges the three channels of information (headers, extra and DNA) and writes it into a FASTA file.",
      "input": {
        "type": "stdin",
        "format": "file"
      },
      "output": {
        "type": "stdout",
        "format": "FASTA, Multi-FASTA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-e",
          "parameter": "extra",
          "required": true
        },
        {
          "flag": "-d",
          "parameter": "dna",
          "required": true
        },
        {
          "flag": "-H",
          "parameter": "headers",
          "required": true
        }
      ],
      "parameters": [
        {
          "name": "extra",
          "type": "string"
        },
        {
          "name": "dna",
          "type": "string"
        },
        {
          "name": "headers",
          "type": "string"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/FastaMergeStreams.c"
    },
    {
      "name": "gto_amino_acid_to_group",
      "description": "Converts an amino acid sequence to a group sequence.",
      "input": {
        "type": "stdin",
        "format": "AminoAcids"
      },
      "output": {
        "type": "stdout",
        "format": "GROUP"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/AminoAcidToGroup.c"
    },
    {
      "name": "gto_amino_acid_to_pseudo_dna",
      "description": "Converts an amino acid (protein) sequence to a pseudo DNA sequence.",
      "input": {
        "type": "stdin",
        "format": "AminoAcids"
      },
      "output": {
        "type": "stdout",
        "format": "DNA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/AminoAcidToPseudoDNA.c"
    },
    {
      "name": "gto_amino_acid_compressor",
      "description": "A new lossless compressor to compress efficiently amino acid sequences (proteins). It uses a cooperation between multiple context and substitutional tolerant context models. The cooperation between models is balanced with weights that benefit the models with better performance according to a forgetting function specific for each model.",
      "input": {
        "type": "stdin",
        "format": "AminoAcids"
      },
      "output": {
        "type": "stdout",
        "format": "AminoAcids"
      },
      "flags": [
        "-h",
        "-s",
        "-v",
        "-V",
        "-f",
        "-l",
        "-t",
        "-e",
        "-rm",
        "-tm"
      ],
      "parameters": [
        {
          "name": "level",
          "type": "integer"
        },
        {
          "name": "threshold",
          "type": "float"
        },
        {
          "name": "c",
          "type": "integer"
        },
        {
          "name": "d",
          "type": "integer"
        },
        {
          "name": "g",
          "type": "float"
        },
        {
          "name": "m",
          "type": "integer"
        },
        {
          "name": "e",
          "type": "integer"
        },
        {
          "name": "a",
          "type": "float"
        },
        {
          "name": "FILE",
          "type": "string"
        }
      ],
      "is_multi_output": false,
      "source": "external_tool"
    },
    {
      "name": "gto_amino_acid_from_fasta",
      "description": "Converts DNA sequences in FASTA or Multi-FASTA file format to an amino acid sequence.",
      "input": {
        "type": "stdin",
        "format": "FASTA, Multi-FASTA"
      },
      "output": {
        "type": "stdout",
        "format": "AminoAcids"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-f",
          "parameter": "frame",
          "required": false
        }
      ],
      "parameters": [
        {
          "name": "frame",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/AminoAcidFromFasta.c"
    },
    {
      "name": "gto_amino_acid_from_fastq",
      "description": "Converts DNA sequences in the FASTQ file format to an amino acid sequence.",
      "input": {
        "type": "stdin",
        "format": "FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "AminoAcids"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-f",
          "parameter": "frame",
          "required": false
        }
      ],
      "parameters": [
        {
          "name": "frame",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/AminoAcidFromFastq.c"
    },
    {
      "name": "gto_amino_acid_from_seq",
      "description": "Converts DNA sequence to an amino acid sequence.",
      "input": {
        "type": "stdin",
        "format": "DNA"
      },
      "output": {
        "type": "stdout",
        "format": "AminoAcids"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-f",
          "parameter": "frame",
          "required": false
        }
      ],
      "parameters": [
        {
          "name": "frame",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/AminoAcidFromSeq.c"
    },
    {
      "name": "gto_genomic_gen_random_dna",
      "description": "Generates a synthetic DNA.",
      "input": {
        "type": "",
        "format": ""
      },
      "output": {
        "type": "stdout",
        "format": "DNA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-s",
          "parameter": "seed",
          "required": false
        },
        {
          "flag": "-n",
          "parameter": "nSymbols",
          "required": false
        },
        {
          "flag": "-f",
          "parameter": "frequency",
          "required": false
        }
      ],
      "parameters": [
        {
          "name": "seed",
          "type": "integer",
          "maxLength": 9
        },
        {
          "name": "nSymbols",
          "type": "integer",
          "min": 0,
          "max": 100000
        },
        {
          "name": "frequency",
          "type": "string"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/GenomicGenRandomDNA.c"
    },
    {
      "name": "gto_genomic_rand_seq_extra_chars",
      "description": "Substitutes in the DNA sequence the outside ACGT chars by random ACGT symbols. It works in sequence file formats.",
      "input": {
        "type": "stdin",
        "format": "DNA"
      },
      "output": {
        "type": "stdout",
        "format": "DNA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/GenomicRandSeqExtraChars.c"
    },
    {
      "name": "gto_genomic_dna_mutate",
      "description": "Creates a synthetic mutation of a sequence file given specific rates of mutations, deletions and additions.",
      "input": {
        "type": "stdin",
        "format": "DNA"
      },
      "output": {
        "type": "stdout",
        "format": "DNA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-s",
          "parameter": "seed",
          "required": false
        },
        {
          "flag": "-m",
          "parameter": "mutation-rate",
          "required": false
        },
        {
          "flag": "-d",
          "parameter": "deletion-rate",
          "required": false
        },
        {
          "flag": "-i",
          "parameter": "insertion-rate",
          "required": false
        },
        {
          "flag": "-a",
          "parameter": "ACGTN-alphabet",
          "required": false
        }
      ],
      "parameters": [
        {
          "name": "seed",
          "type": "integer",
          "maxLength": 9
        },
        {
          "name": "mutation-rate",
          "type": "float",
          "min": 0,
          "max": 1
        },
        {
          "name": "deletion-rate",
          "type": "float",
          "min": 0,
          "max": 1
        },
        {
          "name": "insertion-rate",
          "type": "float",
          "min": 0,
          "max": 1
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/GenomicDNAMutate.c"
    },
    {
      "name": "gto_genomic_extract",
      "description": "Extracts sequences from a sequence file, which the range is defined by the user in the parameters.",
      "input": {
        "type": "stdin",
        "format": "DNA"
      },
      "output": {
        "type": "stdout",
        "format": "DNA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-i",
          "parameter": "init",
          "required": false
        },
        {
          "flag": "-e",
          "parameter": "end",
          "required": false
        }
      ],
      "parameters": [
        {
          "name": "init",
          "type": "integer"
        },
        {
          "name": "end",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/GenomicExtract.c"
    },
    {
      "name": "gto_genomic_period",
      "description": "Calculates the best order depth of a sequence, using FCMs. It only works \"ACGT\", while the rest will be discarded.",
      "input": {
        "type": "stdin",
        "format": "DNA"
      },
      "output": {
        "type": "stdout",
        "format": "NUM"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/GenomicPeriod.c"
    },
    {
      "name": "gto_genomic_count_bases",
      "description": "Counts the number of bases in sequence, FASTA or FASTQ files.",
      "input": {
        "type": "stdin",
        "format": "DNA, FASTA, FASTQ"
      },
      "output": {
        "type": "stdout",
        "format": "text"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/GenomicCountBases.c"
    },
    {
      "name": "gto_genomic_compressor",
      "description": "Able to provide additional compression gains over several top specific tools, while as an analysis tool, it is able to determine absolute measures, namely for many distance computations, and local measures, such as the information content contained in each element, providing a way to quantify and locate specific genomic events.",
      "input": {
        "type": "stdin",
        "format": "SEQ"
      },
      "output": {
        "type": "stdout",
        "format": "SEQ"
      },
      "flags": [
        "-h",
        "-V",
        "-F",
        "-v",
        "-x",
        "-s",
        "-e",
        "-l",
        "-tm",
        "-rm",
        "-r"
      ],
      "parameters": [
        {
          "name": "level",
          "type": "integer"
        },
        {
          "name": "NB_C",
          "type": "integer"
        },
        {
          "name": "NB_D",
          "type": "integer"
        },
        {
          "name": "NB_I",
          "type": "integer"
        },
        {
          "name": "NB_H",
          "type": "integer"
        },
        {
          "name": "NB_G",
          "type": "float"
        },
        {
          "name": "NB_S",
          "type": "integer"
        },
        {
          "name": "NB_E",
          "type": "integer"
        },
        {
          "name": "NB_A",
          "type": "float"
        },
        {
          "name": "FILE",
          "type": "string"
        }
      ],
      "is_multi_output": false,
      "source": "external_tool"
    },
    {
      "name": "gto_genomic_complement",
      "description": "Replaces the ACGT bases with their complements in a DNA sequence. It works in sequence file formats.",
      "input": {
        "type": "stdin",
        "format": "DNA"
      },
      "output": {
        "type": "stdout",
        "format": "DNA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/GenomicComplement.c"
    },
    {
      "name": "gto_genomic_reverse",
      "description": "Reverses the ACGT bases order for each read in a sequence file.",
      "input": {
        "type": "stdin",
        "format": "DNA"
      },
      "output": {
        "type": "stdout",
        "format": "DNA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/Reverse.c"
    },
    {
      "name": "gto_char_to_line",
      "description": "Splits a sequence into lines, creating an output sequence which has a char for each line.",
      "input": {
        "type": "stdin",
        "format": "DNA, RNA, AminoAcids"
      },
      "output": {
        "type": "stdout",
        "format": "DNA, RNA, AminoAcids"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/CharToLine.c"
    },
    {
      "name": "gto_new_line_on_new_x",
      "description": "Splits different rows with a new empty row.",
      "input": {
        "type": "stdin",
        "format": "NUM"
      },
      "output": {
        "type": "stdout",
        "format": "NUM"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/NewLineForNewValue.c"
    },
    {
      "name": "gto_upper_bound",
      "description": "Sets an upper bound in a file with a value per line.",
      "input": {
        "type": "stdin",
        "format": "NUM"
      },
      "output": {
        "type": "stdout",
        "format": "NUM"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-u",
          "parameter": "upperbound",
          "required": true
        }
      ],
      "parameters": [
        {
          "name": "upperbound",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/UpperBound.c"
    },
    {
      "name": "gto_lower_bound",
      "description": "Sets an lower bound in a file with a value per line.",
      "input": {
        "type": "stdin",
        "format": "NUM"
      },
      "output": {
        "type": "stdout",
        "format": "NUM"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-l",
          "parameter": "lowerbound",
          "required": true
        }
      ],
      "parameters": [
        {
          "name": "lowerbound",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/LowerBound.c"
    },
    {
      "name": "gto_brute_force_string",
      "description": "Generates all combinations, line by line, for an inputted alphabet and specific size.",
      "input": {
        "type": "",
        "format": ""
      },
      "output": {
        "type": "stdout",
        "format": "text"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-a",
          "parameter": "alphabet",
          "required": true
        },
        {
          "flag": "-s",
          "parameter": "size",
          "required": true
        }
      ],
      "parameters": [
        {
          "name": "alphabet",
          "type": "string"
        },
        {
          "name": "size",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/BruteForceString.c"
    },
    {
      "name": "gto_real_to_binary_with_threshold",
      "description": "Converts a sequence of real numbers into a binary sequence, given a threshold. The numbers below to the threshold will be 0.",
      "input": {
        "type": "stdin",
        "format": "NUM"
      },
      "output": {
        "type": "stdout",
        "format": "BIN"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-t",
          "parameter": "threshold",
          "required": true
        }
      ],
      "parameters": [
        {
          "name": "threshold",
          "type": "float"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/RealToBinaryWithThreshold.c"
    },
    {
      "name": "gto_sum",
      "description": "Adds decimal values in file, line by line, splitted by spaces or tabs.",
      "input": {
        "type": "stdin",
        "format": "NUM"
      },
      "output": {
        "type": "stdout",
        "format": "NUM"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-r",
          "parameter": "sumrows",
          "required": false
        },
        {
          "flag": "-a",
          "parameter": "sumall",
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/Sum.c"
    },
    {
      "name": "gto_filter",
      "description": "Filters numerical sequences using a low-pass filter.",
      "input": {
        "type": "stdin",
        "format": "NUM"
      },
      "output": {
        "type": "stdout",
        "format": "NUM"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-w",
          "parameter": "windowsize",
          "required": false
        },
        {
          "flag": "-d",
          "parameter": "drop",
          "required": false
        },
        {
          "flag": "-t",
          "parameter": "windowtype",
          "required": false
        },
        {
          "flag": "-c",
          "parameter": "onecolumn",
          "required": false
        },
        {
          "flag": "-p",
          "parameter": "printone",
          "required": false
        },
        {
          "flag": "-r",
          "parameter": "reverse",
          "required": false
        }
      ],
      "parameters": [
        {
          "name": "windowsize",
          "type": "integer"
        },
        {
          "name": "drop",
          "type": "float"
        },
        {
          "name": "windowtype",
          "type": "integer"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/Filter.c"
    },
    {
      "name": "gto_word_search",
      "description": "Search for a word in a file. It is case sensitive.",
      "input": {
        "type": "stdin",
        "format": "text"
      },
      "output": {
        "type": "stdout",
        "format": "text"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-w",
          "parameter": "word",
          "required": true
        }
      ],
      "parameters": [
        {
          "name": "word",
          "type": "string"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/WordSearch.c"
    },
    {
      "name": "gto_permute_by_blocks",
      "description": "Permutates by block sequence, FASTA and Multi-FASTA files.",
      "input": {
        "type": "stdin",
        "format": "FASTA, Multi-FASTA"
      },
      "output": {
        "type": "stdout",
        "format": "FASTA, Multi-FASTA"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-b",
          "parameter": "numbases",
          "required": true
        },
        {
          "flag": "-s",
          "parameter": "seed",
          "required": true
        }
      ],
      "parameters": [
        {
          "name": "numbases",
          "type": "integer"
        },
        {
          "name": "seed",
          "type": "integer",
          "maxLength": 9
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/PermuteByBlocks.c"
    },
    {
      "name": "gto_info",
      "description": "Gives the basic properties of the file, namely size, cardinality, distribution percentage of the symbols, among others.",
      "input": {
        "type": "stdin",
        "format": "text, Multi-FASTA, FASTA, FASTQ, NUM, DNA, RNA, AminoAcids"
      },
      "output": {
        "type": "stdout",
        "format": "text"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-a",
          "parameter": "ascii",
          "required": false
        }
      ],
      "parameters": [],
      "is_multi_output": false,
      "source": "gto/src/Info.c"
    },
    {
      "name": "gto_segment",
      "description": "Segments a filtered sequence based on a threshold.",
      "input": {
        "type": "stdin",
        "format": "NUM"
      },
      "output": {
        "type": "stdout",
        "format": "text, NUM"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-t",
          "parameter": "threshold",
          "required": true
        }
      ],
      "parameters": [
        {
          "name": "threshold",
          "type": "float"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/Segment.c"
    },
    {
      "name": "gto_comparative_map",
      "description": "Creates a visualization for comparative maps.",
      "input": {
        "type": "stdin",
        "format": "POS"
      },
      "output": {
        "type": "stdout",
        "format": "SVG"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-V",
          "parameter": "versionNumber",
          "required": false
        },
        {
          "flag": "-v",
          "parameter": "verboseMode",
          "required": false
        },
        {
          "flag": "-l",
          "parameter": "link",
          "required": false
        },
        {
          "flag": "-w",
          "parameter": "width",
          "required": false
        },
        {
          "flag": "-s",
          "parameter": "space",
          "required": false
        },
        {
          "flag": "-m",
          "parameter": "mult",
          "required": false
        },
        {
          "flag": "-b",
          "parameter": "begin",
          "required": false
        },
        {
          "flag": "-c",
          "parameter": "minimum",
          "required": false
        },
        {
          "flag": "-i",
          "parameter": "notShowInversion",
          "required": false
        },
        {
          "flag": "-r",
          "parameter": "notShowRegular",
          "required": false
        },
        {
          "flag": "-o",
          "parameter": "FILE",
          "required": false
        }
      ],
      "parameters": [
        {
          "name": "link",
          "type": "integer"
        },
        {
          "name": "width",
          "type": "integer"
        },
        {
          "name": "space",
          "type": "integer"
        },
        {
          "name": "mult",
          "type": "integer"
        },
        {
          "name": "begin",
          "type": "integer"
        },
        {
          "name": "minimum",
          "type": "integer"
        },
        {
          "name": "FILE",
          "type": "string"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/ComparativeMap.c"
    },
    {
      "name": "gto_max",
      "description": "Computes the maximum value in each row between two files.",
      "input": {
        "type": "stdin",
        "format": "NUM"
      },
      "output": {
        "type": "stdout",
        "format": "NUM"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-f",
          "parameter": "first_file",
          "required": true
        },
        {
          "flag": "-s",
          "parameter": "second_file",
          "required": true
        }
      ],
      "parameters": [
        {
          "name": "first_file",
          "type": "string"
        },
        {
          "name": "second_file",
          "type": "string"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/Max.c"
    },
    {
      "name": "gto_min",
      "description": "Computes the minium value in each row between two files.",
      "input": {
        "type": "stdin",
        "format": "NUM"
      },
      "output": {
        "type": "stdout",
        "format": "NUM"
      },
      "flags": [
        {
          "flag": "-h",
          "parameter": null,
          "required": false
        },
        {
          "flag": "-f",
          "parameter": "first_file",
          "required": true
        },
        {
          "flag": "-s",
          "parameter": "second_file",
          "required": true
        }
      ],
      "parameters": [
        {
          "name": "first_file",
          "type": "string"
        },
        {
          "name": "second_file",
          "type": "string"
        }
      ],
      "is_multi_output": false,
      "source": "gto/src/Min.c"
    }
  ]
}