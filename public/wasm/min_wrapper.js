/**
 * Wrapper function for the min WASM module.
 * Automatically generated by generate_wrapper.py
 */

(function() {
  /**
   * Runs the Min tool.
   * Accepts file inputs for parameters.   * @param {Object.<string,{name:string,data:(string|Uint8Array)}> } files - Mapping of parameter names to file objects.   * @param {Array<string>} args - CLI arguments (include flags and filenames for file inputs).
   * @returns {Promise<Object>} An object containing stdout and stderr outputs.
   */
  async function runMin(files, args = []) {
    console.log("Starting runMin");
    console.log("Arguments:", args);

    try {
      // Buffers for capturing stdout and stderr
      let stdoutBuffer = '';
      let stderrBuffer = '';

      // Module instantiation options
      const options = {
        locateFile: (path) => path.endsWith('.wasm') ? `/wasm/${path}` : path,
        thisProgram: './min',
        noInitialRun: true,
        print: (text) => { stdoutBuffer += text + '\n'; },
        printErr: (text) => { stderrBuffer += text + '\n'; },
        stdin: null,  // Disable stdin for file-based tools
      };

      // Load the WASM module script
      await loadModuleScript('min');
      const moduleFactory = window['min'];
      if (typeof moduleFactory !== 'function') {
        throw new Error(`Module factory for min not available.`);
      }
      const module = await moduleFactory(options);

      // ------------------------------------------------------------------
      // Write inputs into the virtual filesystem
      // ------------------------------------------------------------------
      // Write each file parameter into MEMFS
      for (const [param, file] of Object.entries(files)) {
        // file.name is the filename, file.data is string or Uint8Array
        module.FS.writeFile(file.name, file.data);
      }
      // For file-based tools, just pass the args as is
      let fullArgs = args;


      console.log("Executing module.callMain with arguments:", fullArgs);
      module.callMain(fullArgs);

      // ------------------------------------------------------------------
      // Collect outputs
      // ------------------------------------------------------------------
      // Single-output: capture stdout
      const outData = stdoutBuffer.trim();
      return { stdout: outData, stderr: stderrBuffer.trim() };

    } catch (err) {
      console.error(`Error in runMin:`, err);
      throw err;
    }
  }

  /**
   * Dynamically loads the WASM module script if not already loaded.
   */
  function loadModuleScript(moduleName) {
    return new Promise((resolve, reject) => {
      if (window[moduleName]) return resolve();
      const script = document.createElement('script');
      script.src = `/wasm/${moduleName}.js`;
      script.onload = () => resolve();
      script.onerror = () => reject(new Error(`Failed to load ${moduleName}.js`));
      document.head.appendChild(script);
    });
  }

  // Expose globally
  window.run_min = runMin;
})();