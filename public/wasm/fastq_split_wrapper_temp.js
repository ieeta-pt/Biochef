/**
 * Wrapper function for the fastq_split WASM module.
 * Automatically generated by generate_wrapper.py
 */

(function() {
  /**
   * Runs the FastqSplit tool.
   * Uses a single stdin data string.   * @param {string} inputData - The input data.   * @param {Array<string>} args - CLI arguments (include flags and filenames for file inputs).
   * @returns {Promise<Object>} An object containing stdout and stderr outputs and output files.
   */
  async function runFastqSplit(inputData, args = []) {
    console.log("Starting runFastqSplit");
    console.log("Arguments:", args);

    try {
      // Buffers for capturing stdout and stderr
      let stdoutBuffer = '';
      let stderrBuffer = '';

      // Module instantiation options
      const options = {
        locateFile: (path) => {
          if (path.endsWith('.wasm')) {
            const basePath = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' 
              ? '/wasm/' 
              : '/gto-wasm-app/wasm/';
            return basePath + path;
          }
          return path;
        },
        thisProgram: './fastq_split',
        noInitialRun: true,
        print: (text) => { stdoutBuffer += text + '\n'; },
        printErr: (text) => { stderrBuffer += text + '\n'; },
      };

      // Load the WASM module script
      await loadModuleScript('fastq_split');
      const moduleFactory = window['fastq_split'];
      if (typeof moduleFactory !== 'function') {
        throw new Error(`Module factory for fastq_split not available.`);
      }
      const module = await moduleFactory(options);

      // ------------------------------------------------------------------
      // Write inputs into the virtual filesystem
      // ------------------------------------------------------------------
      // Normalize and write single stdin input
      inputData = inputData.replace(/\r\n/g, '\n');
      module.FS.writeFile('input.txt', inputData);
      let fullArgs = args.slice();
      
      // For multi-output tools, create a dedicated output directory
      try {
        module.FS.mkdir('/outputs');
      } catch (e) {
        console.log('Output directory already exists.');
      }

      

      // Special handling for fastq_split - add -f and -r flags with output filenames
      // Only add flags if -h is not present
      if (!fullArgs.includes('-h')) {
        fullArgs = ['-f', 'forward.fastq', '-r', 'reverse.fastq', ...fullArgs];
      }

      console.log("Executing module.callMain with arguments:", fullArgs);
      module.callMain(fullArgs);

      // ------------------------------------------------------------------
      // Collect outputs
      // ------------------------------------------------------------------
      // Multi-output: read all files from /outputs
      let outputFiles = {};
      try {
        // Special handling for fastq_split - read files directly from root directory
        if (module.FS.analyzePath('forward.fastq').exists) {
          const forwardData = module.FS.readFile('forward.fastq', { encoding: 'binary' });
          outputFiles['forward.fastq'] = new TextDecoder('utf-8', { fatal: false }).decode(forwardData);
          module.FS.unlink('forward.fastq');
        }
        if (module.FS.analyzePath('reverse.fastq').exists) {
          const reverseData = module.FS.readFile('reverse.fastq', { encoding: 'binary' });
          outputFiles['reverse.fastq'] = new TextDecoder('utf-8', { fatal: false }).decode(reverseData);
          module.FS.unlink('reverse.fastq');
        }
      } catch (e) {
        console.error('Error reading output files:', e);
      }
      return { stdout: stdoutBuffer.trim(), stderr: stderrBuffer.trim(), outputs: outputFiles };

    } catch (err) {
      console.error(`Error in runFastqSplit:`, err);
      throw err;
    }
  }

  /**
   * Dynamically loads the WASM module script if not already loaded.
   */
  function loadModuleScript(moduleName) {
    return new Promise((resolve, reject) => {
      if (window[moduleName]) return resolve();
      const script = document.createElement('script');
      const basePath = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' 
        ? '/wasm/' 
        : '/gto-wasm-app/wasm/';
      script.src = basePath + `${moduleName}.js`;
      script.onload = () => resolve();
      script.onerror = () => reject(new Error(`Failed to load ${moduleName}.js`));
      document.head.appendChild(script);
    });
  }

  // Expose globally
  window.run_fastq_split = runFastqSplit;
})();