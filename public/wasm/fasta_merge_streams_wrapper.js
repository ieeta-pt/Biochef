/**
 * Wrapper function for the fasta_merge_streams WASM module.
 * Automatically generated by generate_wrapper.py
 */

(function () {
  /**
   * Runs the FastaMergeStreams tool.
   * @param {string|Object} inputData - The input data string or an object containing the three streams.
   * @param {Array<string>} args - CLI arguments.
   * @returns {Promise<Object>} An object containing stdout and stderr outputs.
   */
  async function runFastaMergeStreams(inputData, args = []) {
    console.log("Starting runFastaMergeStreams");
    console.log("Arguments:", args);

    try {
      // Buffers for capturing stdout and stderr
      let stdoutBuffer = '';
      let stderrBuffer = '';

      // Module instantiation options
      const options = {
        locateFile: (path) => path.endsWith('.wasm') ? `/wasm/${path}` : path,
        thisProgram: './fasta_merge_streams',
        noInitialRun: true,
        print: (text) => { stdoutBuffer += text + '\n'; },
        printErr: (text) => { stderrBuffer += text + '\n'; },
      };

      // Load the WASM module script
      await loadModuleScript('fasta_merge_streams');
      const moduleFactory = window['fasta_merge_streams'];
      if (typeof moduleFactory !== 'function') {
        throw new Error(`Module factory for fasta_merge_streams not available.`);
      }
      const module = await moduleFactory(options);

      // Default filenames as defined in the C code
      const headerFile = 'HEADERS.JV2';
      const extraFile = 'EXTRA.JV2';
      const dnaFile = 'DNA.JV2';

      // Check if inputData is an object with the three streams
      if (typeof inputData === 'object' &&
        (inputData.headers !== undefined ||
          inputData.extra !== undefined ||
          inputData.dna !== undefined)) {

        console.log("Detected multi-stream input for fasta_merge_streams");

        // Write each stream to its file
        if (inputData.headers !== undefined) {
          module.FS.writeFile(headerFile, inputData.headers);
        } else {
          console.warn("Missing 'headers' stream");
          module.FS.writeFile(headerFile, '');
        }

        if (inputData.extra !== undefined) {
          module.FS.writeFile(extraFile, inputData.extra);
        } else {
          console.warn("Missing 'extra' stream");
          module.FS.writeFile(extraFile, '');
        }

        if (inputData.dna !== undefined) {
          module.FS.writeFile(dnaFile, inputData.dna);
        } else {
          console.warn("Missing 'dna' stream");
          module.FS.writeFile(dnaFile, '');
        }

        // Use default filenames - the C code will look for these files
        console.log("Using default file names for streams");
      } else {
        // If not a multi-stream object, treat as regular input
        console.warn("Input is not a multi-stream object, this may not work as expected");
        const normalizedInput = inputData ? inputData.toString().replace(/\r\n/g, '\n') : '';
        module.FS.writeFile('input.txt', normalizedInput);
      }

      console.log("Executing module.callMain with arguments:", args);
      module.callMain(args);

      // Return the standard output
      const outData = stdoutBuffer.trim();
      return { stdout: outData, stderr: stderrBuffer.trim() };

    } catch (err) {
      console.error(`Error in runFastaMergeStreams:`, err);
      throw err;
    }
  }

  /**
   * Dynamically loads the WASM module script if not already loaded.
   */
  function loadModuleScript(moduleName) {
    return new Promise((resolve, reject) => {
      if (window[moduleName]) return resolve();
      const script = document.createElement('script');
      script.src = `/wasm/${moduleName}.js`;
      script.onload = () => resolve();
      script.onerror = () => reject(new Error(`Failed to load ${moduleName}.js`));
      document.head.appendChild(script);
    });
  }

  // Expose globally
  window.run_fasta_merge_streams = runFastaMergeStreams;
})();