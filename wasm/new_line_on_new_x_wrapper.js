window.run_new_line_on_new_x=async function(n,o=[]){console.log("Starting runNewLineOnNewX"),console.log("Arguments:",o);try{let t="",i="";const r={locateFile:n=>n.endsWith(".wasm")?("localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/gto-wasm-app/wasm/")+n:n,thisProgram:"./new_line_on_new_x",noInitialRun:!0,print:n=>{t+=n+"\n"},printErr:n=>{i+=n+"\n"}};await(e="new_line_on_new_x",new Promise(((n,o)=>{if(window[e])return n();const t=document.createElement("script"),i="localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/gto-wasm-app/wasm/";t.src=i+`${e}.js`,t.onload=()=>n(),t.onerror=()=>o(new Error(`Failed to load ${e}.js`)),document.head.appendChild(t)})));const a=window.new_line_on_new_x;if("function"!=typeof a)throw new Error("Module factory for new_line_on_new_x not available.");const w=await a(r);n=n.replace(/\r\n/g,"\n"),w.FS.writeFile("input.txt",n);let l=o.slice();return console.log("Executing module.callMain with arguments:",l),w.callMain(l),{stdout:t.trim(),stderr:i.trim()}}catch(n){throw console.error("Error in runNewLineOnNewX:",n),n}var e};