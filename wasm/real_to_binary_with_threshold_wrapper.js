window.run_real_to_binary_with_threshold=async function(o,t=[]){console.log("Starting runRealToBinaryWithThreshold"),console.log("Arguments:",t);try{let r="",a="";const e={locateFile:o=>o.endsWith(".wasm")?("localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/gto-wasm-app/wasm/")+o:o,thisProgram:"./real_to_binary_with_threshold",noInitialRun:!0,print:o=>{r+=o+"\n"},printErr:o=>{a+=o+"\n"}};await(n="real_to_binary_with_threshold",new Promise(((o,t)=>{if(window[n])return o();const r=document.createElement("script"),a="localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/gto-wasm-app/wasm/";r.src=a+`${n}.js`,r.onload=()=>o(),r.onerror=()=>t(new Error(`Failed to load ${n}.js`)),document.head.appendChild(r)})));const i=window.real_to_binary_with_threshold;if("function"!=typeof i)throw new Error("Module factory for real_to_binary_with_threshold not available.");const l=await i(e);o=o.replace(/\r\n/g,"\n"),l.FS.writeFile("input.txt",o);let s=t.slice();return console.log("Executing module.callMain with arguments:",s),l.callMain(s),{stdout:r.trim(),stderr:a.trim()}}catch(o){throw console.error("Error in runRealToBinaryWithThreshold:",o),o}var n};