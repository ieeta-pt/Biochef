window.run_fasta_extract=async function(t,a=[]){console.log("Starting runFastaExtract"),console.log("Arguments:",a);try{let n="",r="";const e={locateFile:t=>t.endsWith(".wasm")?("localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/gto-wasm-app/wasm/")+t:t,thisProgram:"./fasta_extract",noInitialRun:!0,print:t=>{n+=t+"\n"},printErr:t=>{r+=t+"\n"}};await(o="fasta_extract",new Promise(((t,a)=>{if(window[o])return t();const n=document.createElement("script"),r="localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/gto-wasm-app/wasm/";n.src=r+`${o}.js`,n.onload=()=>t(),n.onerror=()=>a(new Error(`Failed to load ${o}.js`)),document.head.appendChild(n)})));const i=window.fasta_extract;if("function"!=typeof i)throw new Error("Module factory for fasta_extract not available.");const s=await i(e);t=t.replace(/\r\n/g,"\n"),s.FS.writeFile("input.txt",t);let c=a.slice();return console.log("Executing module.callMain with arguments:",c),s.callMain(c),{stdout:n.trim(),stderr:r.trim()}}catch(t){throw console.error("Error in runFastaExtract:",t),t}var o};