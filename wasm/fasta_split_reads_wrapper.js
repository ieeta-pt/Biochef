window.run_fasta_split_reads=async function(t,r=[]){console.log("Starting runFastaSplitReads"),console.log("Arguments:",r);try{let e="",n="";const a={locateFile:t=>t.endsWith(".wasm")?`/wasm/${t}`:t,thisProgram:"./fasta_split_reads",noInitialRun:!0,print:t=>{e+=t+"\n"},printErr:t=>{n+=t+"\n"}};await(o="fasta_split_reads",new Promise(((t,r)=>{if(window[o])return t();const e=document.createElement("script");e.src=`/wasm/${o}.js`,e.onload=()=>t(),e.onerror=()=>r(new Error(`Failed to load ${o}.js`)),document.head.appendChild(e)})));const s=window.fasta_split_reads;if("function"!=typeof s)throw new Error("Module factory for fasta_split_reads not available.");const i=await s(a);t=t.replace(/\r\n/g,"\n"),i.FS.writeFile("input.txt",t);let l=r.slice();try{i.FS.mkdir("/outputs")}catch(t){console.log("Output directory already exists.")}l.includes("-l")||l.push("-l","/outputs"),console.log("Executing module.callMain with arguments:",l),i.callMain(l);let c={};try{const t=i.FS.readdir("/outputs").filter((t=>"."!==t&&".."!==t));for(const r of t){const t=i.FS.readFile(`/outputs/${r}`,{encoding:"binary"});c[r]=new TextDecoder("utf-8",{fatal:!1}).decode(t)}for(const r of t)i.FS.unlink(`/outputs/${r}`);i.FS.rmdir("/outputs")}catch(t){console.error("Error reading output files:",t)}return{stdout:e.trim(),stderr:n.trim(),outputs:c}}catch(t){throw console.error("Error in runFastaSplitReads:",t),t}var o};