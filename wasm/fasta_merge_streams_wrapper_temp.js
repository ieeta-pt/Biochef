window.run_fasta_merge_streams=async function(t,o=[]){console.log("Starting runFastaMergeStreams"),console.log("Arguments:",o);try{let a="",n="";const r={locateFile:t=>t.endsWith(".wasm")?("localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/Biochef/wasm/")+t:t,thisProgram:"./fasta_merge_streams",noInitialRun:!0,print:t=>{a+=t+"\n"},printErr:t=>{n+=t+"\n"},stdin:null};await(e="fasta_merge_streams",new Promise(((t,o)=>{if(window[e])return t();const a=document.createElement("script"),n="localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/Biochef/wasm/";a.src=n+`${e}.js`,a.onload=()=>t(),a.onerror=()=>o(new Error(`Failed to load ${e}.js`)),document.head.appendChild(a)})));const s=window.fasta_merge_streams;if("function"!=typeof s)throw new Error("Module factory for fasta_merge_streams not available.");const i=await s(r);for(const[o,e]of Object.entries(t))i.FS.writeFile(e.name,e.data);let l=o;return console.log("Executing module.callMain with arguments:",l),i.callMain(l),{stdout:a.trim(),stderr:n.trim()}}catch(t){throw console.error("Error in runFastaMergeStreams:",t),t}var e};