window.run_lower_bound=async function(o,n=[]){console.log("Starting runLowerBound"),console.log("Arguments:",n);try{let e="",t="";const i={locateFile:o=>o.endsWith(".wasm")?`/wasm/${o}`:o,thisProgram:"./lower_bound",noInitialRun:!0,print:o=>{e+=o+"\n"},printErr:o=>{t+=o+"\n"}};await(r="lower_bound",new Promise(((o,n)=>{if(window[r])return o();const e=document.createElement("script");e.src=`/wasm/${r}.js`,e.onload=()=>o(),e.onerror=()=>n(new Error(`Failed to load ${r}.js`)),document.head.appendChild(e)})));const l=window.lower_bound;if("function"!=typeof l)throw new Error("Module factory for lower_bound not available.");const a=await l(i);o=o.replace(/\r\n/g,"\n"),a.FS.writeFile("input.txt",o);let c=n.slice();return console.log("Executing module.callMain with arguments:",c),a.callMain(c),{stdout:e.trim(),stderr:t.trim()}}catch(o){throw console.error("Error in runLowerBound:",o),o}var r};