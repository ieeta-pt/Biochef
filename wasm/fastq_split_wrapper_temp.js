window.run_fastq_split=async function(t,e=[]){console.log("Starting runFastqSplit"),console.log("Arguments:",e);try{let r="",a="";const n={locateFile:t=>t.endsWith(".wasm")?("localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/Biochef/wasm/")+t:t,thisProgram:"./fastq_split",noInitialRun:!0,print:t=>{r+=t+"\n"},printErr:t=>{a+=t+"\n"}};await(o="fastq_split",new Promise(((t,e)=>{if(window[o])return t();const r=document.createElement("script"),a="localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/Biochef/wasm/";r.src=a+`${o}.js`,r.onload=()=>t(),r.onerror=()=>e(new Error(`Failed to load ${o}.js`)),document.head.appendChild(r)})));const s=window.fastq_split;if("function"!=typeof s)throw new Error("Module factory for fastq_split not available.");const i=await s(n);t=t.replace(/\r\n/g,"\n"),i.FS.writeFile("input.txt",t);let l=e.slice();try{i.FS.mkdir("/outputs")}catch(t){console.log("Output directory already exists.")}l.includes("-h")||(l=["-f","forward.fastq","-r","reverse.fastq",...l]),console.log("Executing module.callMain with arguments:",l),i.callMain(l);let c={};try{if(i.FS.analyzePath("forward.fastq").exists){const t=i.FS.readFile("forward.fastq",{encoding:"binary"});c["forward.fastq"]=new TextDecoder("utf-8",{fatal:!1}).decode(t),i.FS.unlink("forward.fastq")}if(i.FS.analyzePath("reverse.fastq").exists){const t=i.FS.readFile("reverse.fastq",{encoding:"binary"});c["reverse.fastq"]=new TextDecoder("utf-8",{fatal:!1}).decode(t),i.FS.unlink("reverse.fastq")}}catch(t){console.error("Error reading output files:",t)}return{stdout:r.trim(),stderr:a.trim(),outputs:c}}catch(t){throw console.error("Error in runFastqSplit:",t),t}var o};