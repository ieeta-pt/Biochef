window.run_max=async function(n,o=[]){console.log("Starting runMax"),console.log("Arguments:",o);try{let t="",e="";const a={locateFile:n=>n.endsWith(".wasm")?`/wasm/${n}`:n,thisProgram:"./max",noInitialRun:!0,print:n=>{t+=n+"\n"},printErr:n=>{e+=n+"\n"},stdin:null};await(r="max",new Promise(((n,o)=>{if(window[r])return n();const t=document.createElement("script");t.src=`/wasm/${r}.js`,t.onload=()=>n(),t.onerror=()=>o(new Error(`Failed to load ${r}.js`)),document.head.appendChild(t)})));const i=window.max;if("function"!=typeof i)throw new Error("Module factory for max not available.");const l=await i(a);for(const[o,r]of Object.entries(n))l.FS.writeFile(r.name,r.data);let s=o;return console.log("Executing module.callMain with arguments:",s),l.callMain(s),{stdout:t.trim(),stderr:e.trim()}}catch(n){throw console.error("Error in runMax:",n),n}var r};