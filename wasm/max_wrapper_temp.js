window.run_max=async function(o,n=[]){console.log("Starting runMax"),console.log("Arguments:",n);try{let a="",r="";const e={locateFile:o=>o.endsWith(".wasm")?("localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/gto-wasm-app/wasm/")+o:o,thisProgram:"./max",noInitialRun:!0,print:o=>{a+=o+"\n"},printErr:o=>{r+=o+"\n"},stdin:null};await(t="max",new Promise(((o,n)=>{if(window[t])return o();const a=document.createElement("script"),r="localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/gto-wasm-app/wasm/";a.src=r+`${t}.js`,a.onload=()=>o(),a.onerror=()=>n(new Error(`Failed to load ${t}.js`)),document.head.appendChild(a)})));const i=window.max;if("function"!=typeof i)throw new Error("Module factory for max not available.");const l=await i(e);for(const[n,t]of Object.entries(o))l.FS.writeFile(t.name,t.data);let s=n;return console.log("Executing module.callMain with arguments:",s),l.callMain(s),{stdout:a.trim(),stderr:r.trim()}}catch(o){throw console.error("Error in runMax:",o),o}var t};