window.run_genomic_count_bases=async function(o,n=[]){console.log("Starting runGenomicCountBases"),console.log("Arguments:",n);try{let e="",i="";const a={locateFile:o=>o.endsWith(".wasm")?("localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/Biochef/wasm/")+o:o,thisProgram:"./genomic_count_bases",noInitialRun:!0,print:o=>{e+=o+"\n"},printErr:o=>{i+=o+"\n"}};await(t="genomic_count_bases",new Promise(((o,n)=>{if(window[t])return o();const e=document.createElement("script"),i="localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/Biochef/wasm/";e.src=i+`${t}.js`,e.onload=()=>o(),e.onerror=()=>n(new Error(`Failed to load ${t}.js`)),document.head.appendChild(e)})));const r=window.genomic_count_bases;if("function"!=typeof r)throw new Error("Module factory for genomic_count_bases not available.");const s=await r(a);o=o.replace(/\r\n/g,"\n"),s.FS.writeFile("input.txt",o);let c=n.slice();return console.log("Executing module.callMain with arguments:",c),s.callMain(c),{stdout:e.trim(),stderr:i.trim()}}catch(o){throw console.error("Error in runGenomicCountBases:",o),o}var t};