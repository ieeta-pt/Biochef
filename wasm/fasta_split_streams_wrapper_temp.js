window.run_fasta_split_streams=async function(t,e=[]){console.log("Starting runFastaSplitStreams"),console.log("Arguments:",e);try{let a="",n="";const o={locateFile:t=>t.endsWith(".wasm")?`/wasm/${t}`:t,thisProgram:"./fasta_split_streams",noInitialRun:!0,print:t=>{a+=t+"\n"},printErr:t=>{n+=t+"\n"}};await(r="fasta_split_streams",new Promise(((t,e)=>{if(window[r])return t();const a=document.createElement("script");a.src=`/wasm/${r}.js`,a.onload=()=>t(),a.onerror=()=>e(new Error(`Failed to load ${r}.js`)),document.head.appendChild(a)})));const s=window.fasta_split_streams;if("function"!=typeof s)throw new Error("Module factory for fasta_split_streams not available.");const c=await s(o);t=t.replace(/\r\n/g,"\n"),c.FS.writeFile("input.txt",t);let i=e.slice();try{c.FS.mkdir("/outputs")}catch(t){console.log("Output directory already exists.")}console.log("Executing module.callMain with arguments:",i),c.callMain(i);let l={};try{const t="HEADERS.JV2",e="EXTRA.JV2",r="DNA.JV2";try{const e=c.FS.readFile(t,{encoding:"binary"});l.headers=new TextDecoder("utf-8",{fatal:!1}).decode(e)}catch(e){console.warn(`Could not read headers file ${t}:`,e)}try{const t=c.FS.readFile(e,{encoding:"binary"});l.extra=new TextDecoder("utf-8",{fatal:!1}).decode(t)}catch(t){console.warn(`Could not read extra file ${e}:`,t)}try{const t=c.FS.readFile(r,{encoding:"binary"});l.dna=new TextDecoder("utf-8",{fatal:!1}).decode(t)}catch(t){console.warn(`Could not read DNA file ${r}:`,t)}try{c.FS.unlink(t)}catch(t){}try{c.FS.unlink(e)}catch(t){}try{c.FS.unlink(r)}catch(t){}}catch(t){console.error("Error reading output files:",t)}return{stdout:a.trim(),stderr:n.trim(),outputs:l}}catch(t){throw console.error("Error in runFastaSplitStreams:",t),t}var r};