window.run_fastq_maximum_read_size=async function(o,a=[]){console.log("Starting runFastqMaximumReadSize"),console.log("Arguments:",a);try{let n="",e="";const i={locateFile:o=>o.endsWith(".wasm")?("localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/Biochef/wasm/")+o:o,thisProgram:"./fastq_maximum_read_size",noInitialRun:!0,print:o=>{n+=o+"\n"},printErr:o=>{e+=o+"\n"}};await(t="fastq_maximum_read_size",new Promise(((o,a)=>{if(window[t])return o();const n=document.createElement("script"),e="localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/Biochef/wasm/";n.src=e+`${t}.js`,n.onload=()=>o(),n.onerror=()=>a(new Error(`Failed to load ${t}.js`)),document.head.appendChild(n)})));const r=window.fastq_maximum_read_size;if("function"!=typeof r)throw new Error("Module factory for fastq_maximum_read_size not available.");const s=await r(i);o=o.replace(/\r\n/g,"\n"),s.FS.writeFile("input.txt",o);let m=a.slice();return console.log("Executing module.callMain with arguments:",m),s.callMain(m),{stdout:n.trim(),stderr:e.trim()}}catch(o){throw console.error("Error in runFastqMaximumReadSize:",o),o}var t};