window.run_fastq_maximum_read_size=async function(a,o=[]){console.log("Starting runFastqMaximumReadSize"),console.log("Arguments:",o);try{let n="",e="";const i={locateFile:a=>a.endsWith(".wasm")?("localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/gto-wasm-app/wasm/")+a:a,thisProgram:"./fastq_maximum_read_size",noInitialRun:!0,print:a=>{n+=a+"\n"},printErr:a=>{e+=a+"\n"}};await(t="fastq_maximum_read_size",new Promise(((a,o)=>{if(window[t])return a();const n=document.createElement("script"),e="localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/gto-wasm-app/wasm/";n.src=e+`${t}.js`,n.onload=()=>a(),n.onerror=()=>o(new Error(`Failed to load ${t}.js`)),document.head.appendChild(n)})));const r=window.fastq_maximum_read_size;if("function"!=typeof r)throw new Error("Module factory for fastq_maximum_read_size not available.");const s=await r(i);a=a.replace(/\r\n/g,"\n"),s.FS.writeFile("input.txt",a);let m=o.slice();return console.log("Executing module.callMain with arguments:",m),s.callMain(m),{stdout:n.trim(),stderr:e.trim()}}catch(a){throw console.error("Error in runFastqMaximumReadSize:",a),a}var t};