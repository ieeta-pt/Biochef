window.run_fasta_merge_streams=async function(t,o=[]){console.log("Starting runFastaMergeStreams"),console.log("Arguments:",o);try{let e="",n="";const r={locateFile:t=>t.endsWith(".wasm")?("localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/gto-wasm-app/wasm/")+t:t,thisProgram:"./fasta_merge_streams",noInitialRun:!0,print:t=>{e+=t+"\n"},printErr:t=>{n+=t+"\n"},stdin:null};await(a="fasta_merge_streams",new Promise(((t,o)=>{if(window[a])return t();const e=document.createElement("script"),n="localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/gto-wasm-app/wasm/";e.src=n+`${a}.js`,e.onload=()=>t(),e.onerror=()=>o(new Error(`Failed to load ${a}.js`)),document.head.appendChild(e)})));const s=window.fasta_merge_streams;if("function"!=typeof s)throw new Error("Module factory for fasta_merge_streams not available.");const i=await s(r);for(const[o,a]of Object.entries(t))i.FS.writeFile(a.name,a.data);let l=o;return console.log("Executing module.callMain with arguments:",l),i.callMain(l),{stdout:e.trim(),stderr:n.trim()}}catch(t){throw console.error("Error in runFastaMergeStreams:",t),t}var a};