window.run_fasta_split_streams=async function(t,o=[]){console.log("Starting runFastaSplitStreams"),console.log("Arguments:",o);try{let e="",n="";const r={locateFile:t=>t.endsWith(".wasm")?("localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/gto-wasm-app/wasm/")+t:t,thisProgram:"./fasta_split_streams",noInitialRun:!0,print:t=>{e+=t+"\n"},printErr:t=>{n+=t+"\n"}};await(a="fasta_split_streams",new Promise(((t,o)=>{if(window[a])return t();const e=document.createElement("script"),n="localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname?"/wasm/":"/gto-wasm-app/wasm/";e.src=n+`${a}.js`,e.onload=()=>t(),e.onerror=()=>o(new Error(`Failed to load ${a}.js`)),document.head.appendChild(e)})));const s=window.fasta_split_streams;if("function"!=typeof s)throw new Error("Module factory for fasta_split_streams not available.");const i=await s(r);t=t.replace(/\r\n/g,"\n"),i.FS.writeFile("input.txt",t);let l=o.slice();try{i.FS.mkdir("/outputs")}catch(t){console.log("Output directory already exists.")}console.log("Executing module.callMain with arguments:",l),i.callMain(l);let c={};try{const t="HEADERS.JV2",o="EXTRA.JV2",a="DNA.JV2";try{const o=i.FS.readFile(t,{encoding:"binary"});c.headers=new TextDecoder("utf-8",{fatal:!1}).decode(o)}catch(o){console.warn(`Could not read headers file ${t}:`,o)}try{const t=i.FS.readFile(o,{encoding:"binary"});c.extra=new TextDecoder("utf-8",{fatal:!1}).decode(t)}catch(t){console.warn(`Could not read extra file ${o}:`,t)}try{const t=i.FS.readFile(a,{encoding:"binary"});c.dna=new TextDecoder("utf-8",{fatal:!1}).decode(t)}catch(t){console.warn(`Could not read DNA file ${a}:`,t)}try{i.FS.unlink(t)}catch(t){}try{i.FS.unlink(o)}catch(t){}try{i.FS.unlink(a)}catch(t){}}catch(t){console.error("Error reading output files:",t)}return{stdout:e.trim(),stderr:n.trim(),outputs:c}}catch(t){throw console.error("Error in runFastaSplitStreams:",t),t}var a};