#!/usr/bin/env python3

# generate_wrapper.py
# Usage: python generate_wrapper.py <tool_name> <input_type> <output_type>
# Example: python generate_wrapper.py fasta_info stdin stdout

import sys
import os

if len(sys.argv) != 4:
    print("Usage: python generate_wrapper.py <tool_name> <input_type> <output_type>")
    sys.exit(1)

tool_name = sys.argv[1]  # e.g., 'fasta_info'
input_type = sys.argv[2]  # 'file' or 'stdin'
output_type = sys.argv[3]  # 'file' or 'stdout'

# Determine script directory.
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))

# Define the path for the wrapper file.
wrapper_file = os.path.join(SCRIPT_DIR, 'public', 'wasm', f'{tool_name}_wrapper.js')

# Begin writing the wrapper file.
with open(wrapper_file, 'w') as f:
    f.write(f'''/**
 * Wrapper function for the {tool_name} WASM module.
 * Automatically generated by generate_wrapper.py
 */

(async function() {{

  /**
   * Runs the {tool_name} tool with the provided input data.
   * @param {{string}} inputData - The input data.
   * @param {{Array<string>}} args - Additional arguments to pass to {tool_name}.
   * @returns {{Promise<Object>}} An object containing stdout and stderr outputs.
   */
  async function run{tool_name.capitalize()}(inputData, args = []) {{
    console.log("Starting run{tool_name.capitalize()} with input:", inputData);
    console.log("Arguments:", args);

    try {{
      let stdout = '';
      let stderr = '';

      // Prepare input data
      const encoder = new TextEncoder();
      const inputArray = encoder.encode(inputData);
      let inputIndex = 0;

      // Module options
      const moduleOptions = {{
        noInitialRun: true,
        locateFile: (path) => {{
          if (path.endsWith('.wasm')) {{
            return `/wasm/{tool_name}.wasm`;
          }}
          return path;
        }},
        print: (text) => {{
          console.log("stdout:", text);
          stdout += text + '\\n';
        }},
        printErr: (text) => {{
          console.error("stderr:", text);
          stderr += text + '\\n';
        }},
        stdin: function() {{
          if (inputIndex < inputArray.length) {{
            const char = inputArray[inputIndex++];
            return char;
          }} else {{
            return null; // EOF
          }}
        }},
      }};

      // Load the WASM module
      const wasmModule = await loadModule(moduleOptions);

      // Prepare the arguments for callMain
      let fullArgs = args;

      console.log("Running main with arguments:", fullArgs);
      wasmModule.callMain(fullArgs);

      // Wait for the module to finish execution
      await wasmModule.onExit;

      return {{
        stdout: stdout.trim(),
        stderr: stderr.trim()
      }};
    }} catch (err) {{
      console.error('Error in run{tool_name.capitalize()}:', err);
      throw err;
    }} finally {{
      // Clean up the global Module variable
      delete window.Module;
    }}
  }}

  /**
   * Expose the run{tool_name.capitalize()} function globally.
   */
  window.run_{tool_name} = run{tool_name.capitalize()};

  /**
   * Loads the WASM module asynchronously.
   * @param {{Object}} moduleOptions - Options to pass to the module.
   * @returns {{Promise<Object>}} The initialized WASM module.
   */
  function loadModule(moduleOptions = {{}}, scriptDirectory = '/wasm/') {{
    return new Promise((resolve, reject) => {{
      // Set Module globally before loading the script
      window.Module = moduleOptions;

      const script = document.createElement('script');
      script.src = scriptDirectory + '{tool_name}.js';
      script.onload = () => {{
        if (typeof window.Module !== 'object') {{
          reject(new Error('Module object not found.'));
          return;
        }}
        // Initialize the module
        window.Module.onRuntimeInitialized = () => {{
          console.log("WASM module for {tool_name} loaded successfully");
          resolve(window.Module);
        }};
      }};
      script.onerror = () => reject(new Error('Failed to load {tool_name}.js script.'));
      document.head.appendChild(script);
    }});
  }}

}})();
''')

    print(f"Generated wrapper for {tool_name} at {wrapper_file}")