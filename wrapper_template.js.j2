/**
 * Wrapper function for the {{ tool_name }} WASM module.
 * Automatically generated by generate_wrapper.py
 */

(function() {
  /**
   * Runs the {{ tool_name_camel }} tool with the provided input data.
   * @param {string} inputData - The input data.
   * @param {Array<string>} args - Additional arguments to pass to {{ tool_name }}.
   * @returns {Promise<Object>} An object containing stdout and stderr outputs.
   */
  async function run{{ tool_name_camel }}(inputData, args = []) {
    console.log("Starting run{{ tool_name_camel }} with input:", inputData);
    console.log("Arguments:", args);

    try {
      // Normalize line endings
      inputData = inputData.replace(/\r\n/g, '\n');

      // Buffers for capturing stdout and stderr
      let stdoutBuffer = '';
      let stderrBuffer = '';

      // Initialize options for the module
      const options = {
        locateFile: (path) => {
          if (path.endsWith('.wasm')) {
            return `/wasm/${path}`;
          }
          return path;
        },
        thisProgram: './{{ tool_name }}',
        noInitialRun: true, // We will call main manually
        // Remove noExitRuntime to use default behavior (false)
        // noExitRuntime: false,
        print: function(text) {
          stdoutBuffer += text + '\n';
        },
        printErr: function(text) {
          stderrBuffer += text + '\n';
        },
      };

      // Load the module
      await loadModuleScript('{{ tool_name }}');
      const moduleFactory = window['{{ tool_name }}'];
      if (typeof moduleFactory !== 'function') {
        throw new Error("Module factory function for {{ tool_name }} is not available.");
      }

      const module = await moduleFactory(options);

      // Write input data to 'input.txt' in the virtual filesystem
      {% if is_multi_output %}
      // For multi-output tools, create a dedicated output directory.
      try {
        module.FS.mkdir('/outputs');
      } catch (e) {
        console.log('Output directory already exists.');
      }
      // Optionally add output directory to arguments if not provided.
      let fullArgs = args.slice();
      if (!fullArgs.includes('-l')) {
        fullArgs.push('-l', '/outputs');
      }
      {% else %}
      let fullArgs = args;
      {% endif %}

      module.FS.writeFile('input.txt', inputData);
      console.log("Executing module.callMain with arguments:", fullArgs);
      module.callMain(fullArgs);

      {% if is_multi_output %}
      // Multi-output: enumerate /outputs and load files.
      let outputFiles = {};
      try {
        let files = module.FS.readdir('/outputs').filter(f => f !== '.' && f !== '..');
        for (let file of files) {
          try {
            outputFiles[file] = module.FS.readFile(`/outputs/${file}`, { encoding: 'utf8' });
          } catch (err) {
            console.error(`Error reading file ${file}:`, err);
          }
        }
        // Cleanup: remove all files in /outputs and remove the directory.
        for (let file of files) {
          try {
            module.FS.unlink(`/outputs/${file}`);
          } catch (err) {
            console.error(`Error deleting file ${file}:`, err);
          }
        }
        try {
          module.FS.rmdir('/outputs');
        } catch (err) {
          console.error("Error removing /outputs directory:", err);
        }
      } catch (err) {
        console.error("Error listing output files:", err);
      }
      return {
        stdout: stdoutBuffer.trim(),
        stderr: stderrBuffer.trim(),
        outputs: outputFiles
      };
      {% else %}
      // Single-output: capture stdout normally.
      const outputData = stdoutBuffer.trim();
      return {
        stdout: outputData,
        stderr: stderrBuffer.trim()
      };
      {% endif %}

    } catch (err) {
      console.error('Error in run{{ tool_name_camel }}:', err);
      throw err;
    }
  }

  /**
   * Dynamically loads the WASM module script if not already loaded.
   * @param {string} moduleName - The name of the module.
   */
  function loadModuleScript(moduleName) {
    return new Promise((resolve, reject) => {
      if (window[moduleName]) {
        // Module script is already loaded
        resolve();
        return;
      }

      const script = document.createElement('script');
      script.src = `/wasm/${moduleName}.js`;
      script.onload = () => {
        console.log(`Module script ${moduleName}.js loaded.`);
        resolve();
      };
      script.onerror = () => {
        reject(new Error(`Failed to load module script ${moduleName}.js.`));
      };
      document.head.appendChild(script);
    });
  }

  /**
   * Expose the run{{ tool_name_camel }} function globally.
   */
  window.run_{{ tool_name.lower() }} = run{{ tool_name_camel }};
})();