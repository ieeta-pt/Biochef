/**
 * Wrapper function for the {{ tool_name }} WASM module.
 * Automatically generated by generate_wrapper.py
 */

(function() {
  /**
   * Loads the WASM module asynchronously.
   * @param {Object} options - Options to pass to the factory function.
   * @returns {Promise<Object>} The initialized WASM module.
   */
  function loadModule(options = {}) {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = '/wasm/{{ tool_name }}.js';
      script.onload = () => {
        if (typeof window.{{ tool_name }} !== 'function') {
          reject(new Error('Module factory function "{{ tool_name }}" not found.'));
          return;
        }
        window.{{ tool_name }}(options).then(module => {
          console.log("WASM module loaded successfully for {{ tool_name }}");
          resolve(module);
        }).catch(err => {
          console.error("Error initializing WASM module for {{ tool_name }}:", err);
          reject(err);
        });
      };
      script.onerror = () => reject(new Error('Failed to load {{ tool_name }}.js script.'));
      document.head.appendChild(script);
    });
  }

  /**
   * Runs the {{ tool_name_camel }} tool with the provided input data.
   * @param {string} inputData - The input data.
   * @param {Array<string>} args - Additional arguments to pass to {{ tool_name }}.
   * @returns {Promise<Object>} An object containing stdout and stderr outputs.
   */
  async function run{{ tool_name_camel }}(inputData, args = []) {
    console.log("Starting run{{ tool_name_camel }} with input:", inputData);
    console.log("Arguments:", args);

    try {
      let stdout = '';
      let stderr = '';
      
      {% if input_type == 'stdin' %}
      const stdinBuffer = inputData.split('');

      const options = {
        locateFile: (path) => {
          if (path.endsWith('.wasm')) {
            return `/wasm/${path}`;
          }
          return path;
        },
        print: (text) => {
          console.log("stdout:", text);
          stdout += text + '\n';
        },
        printErr: (text) => {
          console.error("stderr:", text);
          stderr += text + '\n';
        },
        stdin: () => {
          if (stdinBuffer.length > 0) {
            return stdinBuffer.shift().charCodeAt(0);
          } else {
            return null; // EOF
          }
        }
      };
      {% else %}
      const options = {
        locateFile: (path) => {
          if (path.endsWith('.wasm')) {
            return `/wasm/${path}`;
          }
          return path;
        },
        print: (text) => {
          console.log("stdout:", text);
          stdout += text + '\n';
        },
        printErr: (text) => {
          console.error("stderr:", text);
          stderr += text + '\n';
        },
        // No stdin handling required for file input
      };
      {% endif %}

      const module = await loadModule(options);

      if (!module) {
        throw new Error("Failed to load WASM module for {{ tool_name }}.");
      }

      // Prepare the arguments for callMain
      // Emscripten treats argv[0] as the program name
      {% if input_type == 'file' %}
      const programName = './{{ tool_name }}';
      const inputFile = '/input.txt';
      {% if output_type == 'file' %}
      const outputFile = '/output.txt';
      {% endif %}
      const fullArgs = [programName, inputFile{% if output_type == 'file' %}, outputFile{% endif %}, ...args];
      {% else %}
      const programName = './{{ tool_name }}';
      const fullArgs = [programName, ...args];
      {% endif %}

      console.log("Executing module.callMain with arguments:", fullArgs);
      module.callMain(fullArgs);

      {% if output_type == 'file' %}
      // Read output from the virtual filesystem
      const outputText = module.FS.readFile(outputFile, { encoding: 'utf8' });

      // Clean up output file
      module.FS.unlink(outputFile);
      
          {% if input_type == 'file' %}
      // Clean up input file
      module.FS.unlink(inputFile);
          {% endif %}

      return { stdout: stdout.trim(), stderr: stderr.trim(), outputText: outputText.trim() };
      {% else %}
          {% if input_type == 'file' %}
      // Clean up input file
      module.FS.unlink(inputFile);
          {% endif %}

      return {
        stdout: stdout.trim(),
        stderr: stderr.trim()
      };
      {% endif %}
    } catch (err) {
      console.error('Error in run{{ tool_name_camel }}:', err);
      throw err;
    }
  }

  /**
   * Expose the run{{ tool_name_camel }} function globally.
   */
  window.run_{{ tool_name.lower() }} = run{{ tool_name_camel }};
})();