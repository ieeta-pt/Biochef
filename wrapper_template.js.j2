/**
 * Wrapper function for the {{ tool_name }} WASM module.
 * Automatically generated by generate_wrapper.py
 */

(function() {
  /**
   * Runs the {{ tool_name_camel }} tool.
   * {% if input_type == 'stdin' %}Uses a single stdin data string.{% else %}Accepts file inputs for parameters.{% endif %}
   * @param {% if input_type == 'stdin' %}{string} inputData - The input data.{% else %}{Object.<string,{name:string,data:(string|Uint8Array)}> } files - Mapping of parameter names to file objects.{% endif %}
   * @param {Array<string>} args - CLI arguments (include flags and filenames for file inputs).
   * @returns {Promise<Object>} An object containing stdout and stderr outputs{% if output_type == 'file' %} and output files{% endif %}.
   */
  async function run{{ tool_name_camel }}({% if input_type == 'stdin' %}inputData, args = []{% else %}files, args = []{% endif %}) {
    console.log("Starting run{{ tool_name_camel }}");
    console.log("Arguments:", args);

    try {
      // Buffers for capturing stdout and stderr
      let stdoutBuffer = '';
      let stderrBuffer = '';

      // Module instantiation options
      const options = {
        locateFile: (path) => path.endsWith('.wasm') ? `/wasm/${path}` : path,
        thisProgram: './{{ tool_name }}',
        noInitialRun: true,
        print: (text) => { stdoutBuffer += text + '\n'; },
        printErr: (text) => { stderrBuffer += text + '\n'; },
        {% if is_file_based %}
        stdin: null,  // Disable stdin for file-based tools
        {% endif %}
      };

      // Load the WASM module script
      await loadModuleScript('{{ tool_name }}');
      const moduleFactory = window['{{ tool_name }}'];
      if (typeof moduleFactory !== 'function') {
        throw new Error(`Module factory for {{ tool_name }} not available.`);
      }
      const module = await moduleFactory(options);

      // ------------------------------------------------------------------
      // Write inputs into the virtual filesystem
      // ------------------------------------------------------------------
      {% if input_type == 'stdin' %}
      // Normalize and write single stdin input
      inputData = inputData.replace(/\r\n/g, '\n');
      module.FS.writeFile('input.txt', inputData);
      let fullArgs = args.slice();
      {% else %}
      // Write each file parameter into MEMFS
      for (const [param, file] of Object.entries(files)) {
        // file.name is the filename, file.data is string or Uint8Array
        module.FS.writeFile(file.name, file.data);
      }
      // For file-based tools, just pass the args as is
      let fullArgs = args;
      {% endif %}

      console.log("Executing module.callMain with arguments:", fullArgs);
      module.callMain(fullArgs);

      // ------------------------------------------------------------------
      // Collect outputs
      // ------------------------------------------------------------------
      {% if is_multi_output %}
      // Multi-output: read all files from /outputs
      let outputFiles = {};
      try {
        const filesOut = module.FS.readdir('/outputs').filter(f => f !== '.' && f !== '..');
        for (const fname of filesOut) {
          outputFiles[fname] = module.FS.readFile(`/outputs/${fname}`, { encoding: 'utf8' });
        }
        // cleanup outputs directory
        for (const fname of filesOut) module.FS.unlink(`/outputs/${fname}`);
        module.FS.rmdir('/outputs');
      } catch (e) {
        console.error('Error reading multi-output files:', e);
      }
      return { stdout: stdoutBuffer.trim(), stderr: stderrBuffer.trim(), outputs: outputFiles };
      {% else %}
      // Single-output: capture stdout
      const outData = stdoutBuffer.trim();
      {% if output_type == 'file' %}
      // If output_type file, write it into MEMFS under provided filename in args
      const outFlagIndex = args.findIndex((v, i) => ['-o','--output'].includes(v));
      let outputFile = null;
      if (outFlagIndex >= 0 && args[outFlagIndex+1]) {
        outputFile = args[outFlagIndex+1];
        module.FS.writeFile(outputFile, outData);
      }
      return { stdout: outData, stderr: stderrBuffer.trim(), file: outputFile };
      {% else %}
      return { stdout: outData, stderr: stderrBuffer.trim() };
      {% endif %}
      {% endif %}

    } catch (err) {
      console.error(`Error in run{{ tool_name_camel }}:`, err);
      throw err;
    }
  }

  /**
   * Dynamically loads the WASM module script if not already loaded.
   */
  function loadModuleScript(moduleName) {
    return new Promise((resolve, reject) => {
      if (window[moduleName]) return resolve();
      const script = document.createElement('script');
      script.src = `/wasm/${moduleName}.js`;
      script.onload = () => resolve();
      script.onerror = () => reject(new Error(`Failed to load ${moduleName}.js`));
      document.head.appendChild(script);
    });
  }

  // Expose globally
  window.run_{{ tool_name }} = run{{ tool_name_camel }};
})();