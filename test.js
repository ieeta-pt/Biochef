/**
 * Wrapper function for the fasta_info WASM module.
 * Automatically generated by generate_wrapper.sh
 */

(function() {
  /**
   * Loads the WASM module asynchronously.
   * @param {Object} options - Options to pass to the factory function.
   * @returns {Promise<Object>} The initialized WASM module.
   */
  function loadModule(options = {}) {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = '/wasm/fasta_info.js';
      script.onload = () => {
        if (typeof window.fasta_info !== 'function') {
          reject(new Error('Module factory function "fasta_info" not found.'));
          return;
        }
        window.fasta_info(options).then(module => {
          console.log("WASM module loaded successfully");
          resolve(module);
        }).catch(err => {
          console.error("Error initializing WASM module:", err);
          reject(err);
        });
      };
      script.onerror = () => reject(new Error('Failed to load fasta_info.js script.'));
      document.head.appendChild(script);
    });
  }

  /**
   * Runs the fasta_info tool with the provided input data.
   * @param {string} inputData - The FASTA-formatted input data.
   * @param {Array<string>} args - Additional arguments to pass to fasta_info.
   * @returns {Promise<Object>} An object containing stdout and stderr outputs.
   */
  async function runFastaInfo(inputData, args = []) {
    console.log("Starting runFastaInfo with input:", inputData);
    console.log("Arguments:", args);

    try {
      let stdout = '';
      let stderr = '';
      const stdinBuffer = inputData.split('');

      const options = {
        locateFile: (path) => {
          if (path.endsWith('.wasm')) {
            return `/wasm/${path}`;
          }
          return path;
        },
        print: (text) => {
          console.log("stdout:", text);
          stdout += text + '\n';
        },
        printErr: (text) => {
          console.error("stderr:", text);
          stderr += text + '\n';
        },
        stdin: () => {
          if (stdinBuffer.length > 0) {
            return stdinBuffer.shift().charCodeAt(0);
          } else {
            return null; // EOF
          }
        }
      };

      const module = await loadModule(options);

      if (!module) {
        throw new Error("Failed to load WASM module.");
      }

      // Prepare the arguments for callMain
      // Emscripten treats argv[0] as the program name
      const programName = './fasta_info'; // Corrected program name
      const fullArgs = [programName, ...args];
      console.log("Running main with arguments:", fullArgs);
      module.callMain(fullArgs);

      // Optional: Wait for the module to finish execution
      await new Promise(resolve => setTimeout(resolve, 100)); // Adjust as needed

      return {
        stdout: stdout.trim(),
        stderr: stderr.trim()
      };
    } catch (err) {
      console.error('Error in runFastaInfo:', err);
      throw err;
    }
  }

  /**
   * Expose the runFastaInfo function globally.
   */
  window.run_fasta_info = runFastaInfo;

})();