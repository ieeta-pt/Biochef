% File: gto/manual/sections/Amino_acid_sequence_tools/AminoAcidCompressor.tex
\section{Program gto\char`_amino\char`_acid\char`_compressor}
The \texttt{gto\char`_amino\char`_acid\char`_compressor} is a new lossless compressor to compress efficiently amino acid sequences (proteins). It uses a cooperation between multiple context and substitutional tolerant context models. The cooperation between models is balanced with weights that benefit the models with better performance according to a forgetting function specific for each model.\\
For help type:
\begin{lstlisting}
./gto_amino_acid_compressor -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_amino\char`_acid\char`_compressor} program needs a file with amino acid sequences to compress.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_amino_acid_compressor [OPTION]... -r [FILE]  [FILE]:[...]                          
Compression of amino acid sequences.                                   
                                                                       
Non-mandatory arguments:                                               
                                                                       
  -h                     give this help,                               
  -s                     show AC compression levels,                   
  -v                     verbose mode (more information),              
  -V                     display version number,                       
  -f                     force overwrite of output,                    
  -l <level>             level of compression [1;7] (lazy -tm setup),  
  -t <threshold>         threshold frequency to discard from alphabet,
  -e                     it creates a file with the extension ".iae" 
                         with the respective information content.      
                                                                       
  -rm <c>:<d>:<g>/<m>:<e>:<a>  reference model (-rm 1:10:0.9/0:0:0),   
  -rm <c>:<d>:<g>/<m>:<e>:<a>  reference model (-rm 5:90:0.9/1:50:0.8),
  ...                                                                  
  -tm <c>:<d>:<g>/<m>:<e>:<a>  target model (-tm 1:1:0.8/0:0:0),       
  -tm <c>:<d>:<g>/<m>:<e>:<a>  target model (-tm 7:100:0.9/2:10:0.85), 
  ...                                                                  
                         target and reference templates use <c> for    
                         context-order size, <d> for alpha (1/<d>), <g>
                         for gamma (decayment forgetting factor) [0;1),
                         <m> to the maximum sets the allowed mutations,
                         on the context without being discarded (for   
                         deep contexts), under the estimator <e>, using
                         <a> for gamma (decayment forgetting factor)   
                         [0;1) (tolerant model),                       
                                                                       
  -r <FILE>              reference file ("-rm" are loaded here),     
                                                                       
Mandatory arguments:                                                   
                                                                       
  <FILE>:<...>:<...>     file to compress (last argument). For more    
                         files use splitting ":" characters.         
                                                                       
Example:                                                               
                                                                       
  [Compress]   ./gto_amino_acid_compressor -v -tm 1:1:0.8/0:0:0 -tm 5:20:0.9/3:20:0.9 seq.txt 
  [Decompress] ./gto_amino_acid_decompressor -v seq.txt.co  
\end{lstlisting}
In the following example, it will be downloaded nine amino acid sequences and compress and decompress one of the smallest (HI). Finally, it compares if the uncompressed sequence is equal to the original.
\begin{lstlisting}
wget http://sweet.ua.pt/pratas/datasets/AminoAcidsCorpus.zip
unzip AminoAcidsCorpus.zip
cp AminoAcidsCorpus/HI .
./gto_amino_acid_compressor -v -l 2 HI
./gto_amino_acid_decompressor -v HI.co
cmp HI HI.de
\end{lstlisting}

% File: gto/manual/sections/Amino_acid_sequence_tools/AminoAcidFromFasta.tex
\section{Program gto\char`_amino\char`_acid\char`_from\char`_fasta}
The \texttt{gto\char`_amino\char`_acid\char`_from\char`_fasta} converts DNA sequences in FASTA or Multi-FASTA file format to an amino acid sequence.\\
For help type:
\begin{lstlisting}
./gto_amino_acid_from_fasta -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_amino\char`_acid\char`_from\char`_fasta} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTA or Multi-FASTA file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ../../bin/gto_amino_acid_from_fasta [options] [[--] args]
   or: ../../bin/gto_amino_acid_from_fasta [options]

It converts FASTA or Multi-FASTA file format to an amino acid sequence (translation).

    -h, --help            Show this help message and exit

Basic options
    < input.mfasta        Input FASTA or Multi-FASTA file format (stdin)
    > output.prot         Output amino acid sequence file (stdout)

Optional
    -f, --frame=<int>     Translation codon frame (1, 2 or 3)

Example: ../../bin/gto_amino_acid_from_fasta < input.mfasta > output.prot
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCC
CGGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGG
AAGTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGT
GCCGCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCC
CAGCTAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
>AB000263 |acc=AB000263|descr=Homo sapiens mRNA 
ACAAGATGCCATTGTCCCCCGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGG
TGGCCCCACCGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCT
TGGTGGTTTGAGTGGACCTCCCAGGCCAGTGCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGG
AAGGCGCACCCCCCCAGCAATCCGCGCGCCGGGACAGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTG
CAAATAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
\end{lstlisting}

\subsection*{Output}

The output of the \texttt{gto\char`_amino\char`_acid\char`_from\char`_fasta} program is an amino acid sequence.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
TRRPPAAAALRGHGPGGSTAALLPLSPAPPKEKQPPDFPRLGRDSEHMQEAAGSGLSGPPGPS-ERKLGRWPGGRKQAS
AANPRAGTESPAKPCRNFFWKTFSTPPAKTSPMNAHASLITDLTRCHCPPASCCCCSPGPRPPLPCPWRVAPPAETASI
CRKRQE-GKAAS-LSSLGGLSGPPRPVPGPS-ERKLGRWPGGRKAHPPSNPRAGTECPAGTSSGRPSPPANKTSPMNAH
ASLITDL
\end{lstlisting}


% File: gto/manual/sections/Amino_acid_sequence_tools/AminoAcidFromFastq.tex
\section{Program gto\char`_amino\char`_acid\char`_from\char`_fastq}
The \texttt{gto\char`_amino\char`_acid\char`_from\char`_fastq} converts DNA sequences in the FASTQ file format to an amino acid sequence.\\
For help type:
\begin{lstlisting}
./gto_amino_acid_from_fastq -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_amino\char`_acid\char`_from\char`_fastq} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ../../bin/gto_amino_acid_from_fastq [options] [[--] args]
   or: ../../bin/gto_amino_acid_from_fastq [options]

It converts FASTQ file format to an amino acid sequence (translation).

    -h, --help            Show this help message and exit

Basic options
    < input.fastq         Input FASTQ file format (stdin)
    > output.prot         Output amino acid sequence file (stdout)

Optional
    -f, --frame=<int>     Translation codon frame (1, 2 or 3)

Example: ../../bin/gto_amino_acid_from_fastq < input.fastq > output.prot
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGGTTTTCAAATAGA
+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
+SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}

The output of the \texttt{gto\char`_amino\char`_acid\char`_from\char`_fastq} program is an amino acid sequence.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
G-WPLPMASNPTKLPLTT-GFSNRVQGYDVCILRI-SRSR--YASFYH
\end{lstlisting}


% File: gto/manual/sections/Amino_acid_sequence_tools/AminoAcidFromSeq.tex
\section{Program gto\char`_amino\char`_acid\char`_from\char`_seq}
The \texttt{gto\char`_amino\char`_acid\char`_from\char`_seq} converts DNA sequence to an amino acid sequence.\\
For help type:
\begin{lstlisting}
./gto_amino_acid_from_seq -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_amino\char`_acid\char`_from\char`_seq} program needs two streams for the computation, namely the input and output standard. The input stream is a DNA sequence.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ../../bin/gto_amino_acid_from_seq [options] [[--] args]
   or: ../../bin/gto_amino_acid_from_seq [options]

It converts DNA sequence to an amino acid sequence (translation).


    -h, --help            Show this help message and exit

Basic options
    < input.seq           Input sequence file (stdin)
    > output.prot         Output amino acid sequence file (stdout)

Optional
    -f, --frame=<int>     Translation codon frame (1, 2 or 3)

Example: ../../bin/gto_amino_acid_from_seq < input.seq > output.prot
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCC
CGGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGG
AAGTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGT
GCCGCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCC
CAGCTAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAAACAAGATGCCATTGTCCCCCGGCCTCC
TGCTGCTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGGTGGCCCCACCGGCCGAGACAGCGAGCA
TATGCAGGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGTGGTTTGAGTGGACCTCCCAGGCC
AGTGCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGGCGCACCCCCCCAGCAATCCGCGC
GCCGGGACAGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAATAAAACCTCACCCATGAATGCTC
ACGCAAGTTTAATTACAGACCTGAA
\end{lstlisting}

\subsection*{Output}

The output of the \texttt{gto\char`_amino\char`_acid\char`_from\char`_seq} program is an amino acid sequence.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
TRRPPAAAALRGHGPGGSTAALLPLSPAPPKEKQPPDFPRLGRDSEHMQEAAGSGLSGPPGPS-ERKLGRWPGGRKQAS
AANPRAGTESPAKPCRNFFWKTFSTPPAKTSPMNAHASLITDLKQDAIVPRPPAAAALRGHGHRCPAPGGWPHRPRQRA
YAGSGRNKEKQPPDFPRLVV-VDLPGQCRAPHRRGSSGGGQAAGRRTPPAIRAPGQNALQELLLEDLLLLQIKPHP-ML
TQV-LQT-
\end{lstlisting}


% File: gto/manual/sections/Amino_acid_sequence_tools/AminoAcidToGroup.tex
\section{Program gto\char`_amino\char`_acid\char`_to\char`_group}

The \texttt{gto\char`_amino\char`_acid\char`_to\char`_group} converts an amino acid sequence to a group 
sequence.\\
For help type:
\begin{lstlisting}
./gto_amino_acid_to_group -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_amino\char`_acid\char`_to\char`_group} program needs two streams for the computation, namely the input and output standard. The input stream is an amino acid sequence.
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_amino_acid_to_group [options] [[--] args]
   or: ./gto_amino_acid_to_group [options]

It converts a amino acid sequence to a group sequence.

    -h, --help            show this help message and exit

Basic options
    < input.prot          Input amino acid sequence file (stdin)
    > output.group        Output group sequence file (stdout)

Example: ./gto_amino_acid_to_group < input.prot > output.group
Table:
Prot	Group
R		P
H		P  Amino acids with electric charged side chains: POSITIVE
K		P
-		-
D		N
E		N  Amino acids with electric charged side chains: NEGATIVE
-		-
S		U
T		U
N		U  Amino acids with electric UNCHARGED side chains
Q		U
-		-
C		S
U		S
G		S  Special cases
P		S
-		-
A		H
V		H
I		H
L		H
M		H  Amino acids with hydrophobic side chains
F		H
Y		H
W		H
-		-
*		*  Others
X		X  Unknown
\end{lstlisting}
It can be used to group amino acids by properties, such as electric charge (positive
and negative), uncharged side chains, hydrophobic side chains and special cases.
An example of such an input file is:
\begin{lstlisting}
IPFLLKKQFALADKLVLSKLRQLLGGRIKMMPCGGAKLEPAIGLFFHAIGINIKLGYGMTETTATVSCWHDFQFNPNSIG
TLMPKAEVKIGENNEILVRGGMVMKGYYKKPEETAQAFTEDGFLKTGDAGEFDEQGNLFITDRIKELMKTSNGKYIAPQY
IESKIGKDKFIEQIAIIADAKKYVSALIVPCFDSLEEYAKQLNIKYHDRLELLKNSDILKMFE
\end{lstlisting}

\subsection*{Output}

The output of the \texttt{gto\char`_amino\char`_acid\char`_to\char`_group} program is a group sequence.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
HSHHHPPUHHHHNPHHHUPHPUHHSSPHPHHSSSSHPHNSHHSHHHPHHSHUHPHSHSHUNUUHUHUSHPNHUHUSUUHS
UHHSPHNHPHSNUUNHHHPSSHHHPSHHPPSNNUHUHHUNNSHHPUSNHSNHNNUSUHHHUNPHPNHHPUUUSPHHHSUH
HNUPHSPNPHHNUHHHHHNHPPHHUHHHHSSHNUHNNHHPUHUHPHPNPHNHHPUUNHHPHHN
\end{lstlisting}


% File: gto/manual/sections/Amino_acid_sequence_tools/AminoAcidToPseudoDNA.tex
\section{Program gto\char`_amino\char`_acid\char`_to\char`_pseudo\char`_dna}
The \texttt{gto\char`_amino\char`_acid\char`_to\char`_pseudo\char`_dna} converts an amino acid (protein) sequence to a pseudo DNA sequence.\\
For help type:
\begin{lstlisting}
./gto_amino_acid_to_pseudo_dna -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_amino\char`_acid\char`_to\char`_pseudo\char`_dna} program needs two streams for the computation, namely the input and output standard. The input stream is an amino acid sequence.
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_amino_acid_to_pseudo_dna [options] [[--] args]
   or: ./gto_amino_acid_to_pseudo_dna [options]

It converts a protein sequence to a pseudo DNA sequence.

    -h, --help        show this help message and exit

Basic options
    < input.prot      Input amino acid sequence file (stdin)
    > output.dna      Output DNA sequence file (stdout)

Example: ./gto_amino_acid_to_pseudo_dna < input.prot > output.dna
Table:
Prot	DNA
A		GCA
C		TGC
D		GAC
E		GAG
F		TTT
G		GGC
H		CAT
I		ATC
K		AAA
L		CTG
M		ATG
N		AAC
P		CCG
Q		CAG
R		CGT
S		TCT
T		ACG
V		GTA
W		TGG
Y		TAC
*		TAG
X		GGG
\end{lstlisting}
It can be used to generate pseudo-DNA with characteristics passed by amino acid (protein) sequences. An example of such an input file is:
\begin{lstlisting}
IPFLLKKQFALADKLVLSKLRQLLGGRIKMMPCGGAKLEPAIGLFFHAIGINIKLGYGMTETTATVSCWHDFQFNPNSIG
TLMPKAEVKIGENNEILVRGGMVMKGYYKKPEETAQAFTEDGFLKTGDAGEFDEQGNLFITDRIKELMKTSNGKYIAPQY
IESKIGKDKFIEQIAIIADAKKYVSALIVPCFDSLEEYAKQLNIKYHDRLELLKNSDILKMFE
\end{lstlisting}

\subsection*{Output}

The output of the \texttt{gto\char`_amino\char`_acid\char`_to\char`_pseudo\char`_dna} program is a DNA sequence.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
ATCCCGTTTCTGCTGAAAAAACAGTTTGCACTGGCAGACAAACTGGTACTGTCTAAACTGCGTCAGCTGCTGGGCGGCCG
TATCAAAATGATGCCGTGCGGCGGCGCAAAACTGGAGCCGGCAATCGGCCTGTTTTTTCATGCAATCGGCATCAACATCA
AACTGGGCTACGGCATGACGGAGACGACGGCAACGGTATCTTGCTGGCATGACTTTCAGTTTAACCCGAACTCTATCGGC
ACGCTGATGCCGAAAGCAGAGGTAAAAATCGGCGAGAACAACGAGATCCTGGTACGTGGCGGCATGGTAATGAAAGGCTA
CTACAAAAAACCGGAGGAGACGGCACAGGCATTTACGGAGGACGGCTTTCTGAAAACGGGCGACGCAGGCGAGTTTGACG
AGCAGGGCAACCTGTTTATCACGGACCGTATCAAAGAGCTGATGAAAACGTCTAACGGCAAATACATCGCACCGCAGTAC
ATCGAGTCTAAAATCGGCAAAGACAAATTTATCGAGCAGATCGCAATCATCGCAGACGCAAAAAAATACGTATCTGCACT
GATCGTACCGTGCTTTGACTCTCTGGAGGAGTACGCAAAACAGCTGAACATCAAATACCATGACCGTCTGGAGCTGCTGA
AAAACTCTGACATCCTGAAAATGTTTGAG
\end{lstlisting}


% File: gto/manual/sections/Amino_acid_sequence_tools/AminoAcidToSeq.tex
\section{Program gto\char`_amino\char`_acid\char`_to\char`_seq}
The \texttt{gto\char`_amino\char`_acid\char`_to\char`_seq} converts amino acid sequences to DNA sequences.\\
For help type:
\begin{lstlisting}
./gto_amino_acid_to_seq -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_amino\char`_acid\char`_to\char`_seq} program needs two streams for the computation, namely the input and output standard. The input stream is an amino acid sequence.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_amino_acid_to_seq [options] [[--] args]
   or: ./gto_amino_acid_to_seq [options]

It converts amino acid sequences to DNA sequences.


    -h, --help        Show this help message and exit

Basic options
    < input.prot      Input amino acid sequence file (stdin)
    > output.seq      Output sequence file (stdout)

Example: ./gto_amino_acid_to_seq < input.prot > output.seq
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
IPFLLKKQFALADKLVLSKLRQLLGGRIKMMPCGGAKLEPAIGLFFHAIGINIKLGYGMTETTATVSCWHDFQFNPNSI
GTLMPKAEVKIGENNEILVRGGMVMKGYYKKPEETAQAFTEDGFLKTGDAGEFDEQGNLFITDRIKELMKTSNGKYIAP
QYIESKIGKDKFIEQIAIIADAKKYVSALIVPCFDSLEEYAKQLNIKYHDRLELLKNSDILKMFE
\end{lstlisting}

\subsection*{Output}

The output of the \texttt{gto\char`_amino\char`_acid\char`_to\char`_seq} program is a DNA sequence.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
TO DO
\end{lstlisting}


% File: gto/manual/sections/Amino_acid_sequence_tools/Amino_acid_sequence_tools.tex
\chapter{Amino acid sequence tools}
%\addcontentsline{toc}{chapter}{Sequence tools}
\label{seq}
A more specific subset of tools is the Amino Acid Sequence tools, designed to manipulate amino acid sequences. The main features of those tools are grouping sequences, for instance by their properties, such as electric charge (positive and negative), uncharged side chains, hydrophobic side chains and special cases. It is also possible generating pseudo-DNA with characteristics passed by amino acid sequences, or for data compression, using cooperation between multiple contexts and substitutional tolerant context models. The current available amino acid sequence tools, for analysis and manipulation, are:
\begin{enumerate}
	
\item \texttt{gto\char`_amino\char`_acid\char`_to\char`_group}: it converts an amino acid sequence to a group sequence.

\item \texttt{gto\char`_amino\char`_acid\char`_to\char`_pseudo\char`_dna}: it converts an amino acid (protein) sequence to a pseudo DNA sequence.

\item \texttt{gto\char`_amino\char`_acid\char`_compressor}: it is a new lossless compressor to compress efficiently amino acid sequences (proteins).

\item \texttt{gto\char`_amino\char`_acid\char`_from\char`_fasta}: it converts DNA sequences in FASTA or Multi-FASTA file format to an amino acid sequence.

\item \texttt{gto\char`_amino\char`_acid\char`_from\char`_fastq}: it converts DNA sequences in the FASTQ file format to an amino acid sequence.

\item \texttt{gto\char`_amino\char`_acid\char`_from\char`_seq}: it converts DNA sequences to an amino acid sequence.

%\item \texttt{gto\char`_amino\char`_acid\char`_to\char`_seq}: it converts amino acid sequences to DNA sequences.

\end{enumerate}

\input{\AminoAcidSequenceToolsPath/AminoAcidToGroup.tex}
\input{\AminoAcidSequenceToolsPath/AminoAcidToPseudoDNA.tex}
\input{\AminoAcidSequenceToolsPath/AminoAcidCompressor.tex}
\input{\AminoAcidSequenceToolsPath/AminoAcidFromFasta.tex}
\input{\AminoAcidSequenceToolsPath/AminoAcidFromFastq.tex}
\input{\AminoAcidSequenceToolsPath/AminoAcidFromSeq.tex}
%\input{\AminoAcidSequenceToolsPath/AminoAcidToSeq.tex}


% File: gto/manual/sections/FASTA_tools/FASTA_tools.tex
\chapter{FASTA tools}
\label{fasta}
The FASTA tool subset has similar goals to the FASTQ tools. With these tools, it is possible convert data from different formats to the FASTA and multi-FASTA files, or the opposite. In these tools, there are also features to extract and filter reads based on patterns, which can solve specific problems in genomic analytic workflows. The currently available FASTA tools, for analysis and manipulation, are:
\begin{enumerate}

\item \texttt{gto\char`_fasta\char`_to\char`_seq}: it converts a FASTA or Multi-FASTA file format to a seq.

\item \texttt{gto\char`_fasta\char`_from\char`_seq}: it converts a genomic sequence to pseudo FASTA file format.

\item \texttt{gto\char`_fasta\char`_extract}: it extracts sequences from a FASTA file, which the range is defined by the user in the parameters.

\item \texttt{gto\char`_fasta\char`_extract\char`_by\char`_read}: it extracts sequences from each read in a Multi-FASTA file (splited by \textbackslash n), which the range is defined by the user in the parameters.

\item \texttt{gto\char`_fasta\char`_info}: it shows the readed information of a FASTA or Multi-FASTA file format.

\item \texttt{gto\char`_fasta\char`_mutate}: it creates a synthetic mutation of a FASTA file given specific rates of editions, deletions and additions.

\item \texttt{gto\char`_fasta\char`_rand\char`_extra\char`_chars}: it substitues in the DNA sequence the outside ACGT chars by random ACGT symbols.

\item \texttt{gto\char`_fasta\char`_extract\char`_read\char`_by\char`_pattern}: it extracts reads from a Multi-FASTA file format given a pattern in the header.

\item \texttt{gto\char`_fasta\char`_find\char`_n\char`_pos}: it reports the ''N'' regions in a sequence or FASTA (seq) file.

\item \texttt{gto\char`_fasta\char`_split\char`_reads}: it splits a Multi-FASTA file to multiple FASTA files.

\item \texttt{gto\char`_fasta\char`_rename\char`_human\char`_headers}: it changes the headers of FASTA or Multi-FASTA file to simple chrX by order, where X is the number.

\item \texttt{gto\char`_fasta\char`_extract\char`_pattern\char`_coords}: it extracts the header and coordinates from a Multi-FASTA file format given a pattern/motif in the sequence.

\item \texttt{gto\char`_fasta\char`_complement}: it replaces the ACGT bases with their complements in FASTA or Multi-FASTA file format.

\item \texttt{gto\char`_fasta\char`_reverse}: it reverses the order of a FASTA or Multi-FASTA file format.

\item \texttt{gto\char`_fasta\char`_variation\char`_map}: this tool is an alias to gto\char`_fastq\char`_variation\char`_map tool. Please check the documentation of this tool in the in the section of FASTQ tools. 

\item \texttt{gto\char`_fasta\char`_variation\char`_filter}: this tool is an alias to gto\char`_fastq\char`_variation\char`_filter tool. Please check the documentation of this tool in the in the section of FASTQ tools. 

\item \texttt{gto\char`_fasta\char`_variation\char`_visual}: this tool is an alias to gto\char`_fastq\char`_variation\char`_visual tool. Please check the documentation of this tool in the in the section of FASTQ tools. 

\item \texttt{gto\char`_fasta\char`_split\char`_streams}: it splits and writes a FASTA file into three channels of information: headers, extra and DNA. 

\item \texttt{gto\char`_fasta\char`_merge\char`_streams}: it merges the three channels of information (headers, extra and DNA) and writes it into a FASTA file.


\end{enumerate}

\input{\FASTAToolsPath/FastaToSeq.tex}
\input{\FASTAToolsPath/FastaFromSeq.tex}
\input{\FASTAToolsPath/FastaExtract.tex}
\input{\FASTAToolsPath/FastaExtractByRead.tex}
\input{\FASTAToolsPath/FastaInfo.tex} 
\input{\FASTAToolsPath/FastaMutate.tex}
\input{\FASTAToolsPath/FastaRandExtraChars.tex}
\input{\FASTAToolsPath/FastaExtractReadByPattern.tex}
\input{\FASTAToolsPath/FastaFindNPos.tex}
\input{\FASTAToolsPath/FastaSplitReads.tex}
\input{\FASTAToolsPath/FastaRenameHumanHeaders.tex}
\input{\FASTAToolsPath/FastaExtractPatternCoords.tex}
\input{\FASTAToolsPath/FastaComplement.tex}
\input{\FASTAToolsPath/FastaReverse.tex}
\input{\FASTAToolsPath/FastaSplitStreams.tex}
\input{\FASTAToolsPath/FastaMergeStreams.tex}

% File: gto/manual/sections/FASTA_tools/FastaComplement.tex
\section{Program gto\char`_fasta\char`_complement}
The \texttt{gto\char`_fasta\char`_complement} replaces the ACGT bases with their complements in FASTA or Multi-FASTA file format.\\
For help type:
\begin{lstlisting}
./gto_fasta_complement -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fasta\char`_complement} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTA or Multi-FASTA file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fasta_complement [options] [[--] args]
   or: ./gto_fasta_complement [options]

It replaces the ACGT bases with their complements in FASTA or Multi-FASTA file format.


    -h, --help            Show this help message and exit

Basic options
    < input.fasta         Input FASTA or Multi-FASTA file format (stdin)
    > output.fasta        Output FASTA or Multi-FASTA file format (stdout)

Example: ./gto_fasta_complement < input.mfasta > output.mfasta
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCC
CGGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGG
AAGTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGT
GCCGCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCC
CAGCTAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
>AB000263 |acc=AB000263|descr=Homo sapiens mRNA 
ACAAGATGCCATTGTCCCCCGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGG
TGGCCCCACCGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCT
TGGTGGTTTGAGTGGACCTCCCAGGCCAGTGCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGG
AAGGCGCACCCCCCCAGCAATCCGCGCGCCGGGACAGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTG
CAAATAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fasta\char`_complement} program is FASTA or Multi-FASTA file with the ACGT base complements.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
TGTTCTGCCGGAGGACGACGACGACGAGAGGCCCCGGTGCCGGGACCTCCCAGGTGGCGACGGGACGACGGTAACAGGG
GCCGGGGTGGATTCCTTTTCGTCGGAGGACTGAAAGGAGCGAACCCGGCTCTGTCGCTCGTATACGTCCTTCGCCGTCC
TTCACCAAACTCACCTGGAGGCCCGGGGAGTATCCTCTCCTTCGAGCCCTCCACCGGTCCGCCGTCCTTCGTCCGGTCA
CGGCGCTTAGGCGCGCGGCCCTGTCTTAGAGGACGTTTCGGGACGTCCTTGAAGAAGACCTTCTGGAAGAGGTGGGGGG
GTCGATTTTGGAGTGGGTACTTACGAGTGCGTTCAAATTAATGTCTGGACTT
>AB000263 |acc=AB000263|descr=Homo sapiens mRNA 
TGTTCTACGGTAACAGGGGGCCGGAGGACGACGACGACGAGAGGCCCCGGTGCCGGTGGCGACGGGACGGGGACCTCCC
ACCGGGGTGGCCGGCTCTGTCGCTCGTATACGTCCTTCGCCGTCCTTATTCCTTTTCGTCGGAGGACTGAAAGGAGCGA
ACCACCAAACTCACCTGGAGGGTCCGGTCACGGCCCGGGGAGTATCCTCTCCTTCGAGCCCTCCACCGGTCCGCCGTCC
TTCCGCGTGGGGGGGTCGTTAGGCGCGCGGCCCTGTCTTACGGGACGTCCTTGAAGAAGACCTTCTGGAAGAGGAGGAC
GTTTATTTTGGAGTGGGTACTTACGAGTGCGTTCAAATTAATGTCTGGACTT
\end{lstlisting}

% File: gto/manual/sections/FASTA_tools/FastaExtract.tex
\section{Program gto\char`_fasta\char`_extract}
The \texttt{gto\char`_fasta\char`_extract} extracts sequences from a FASTA file, which the range is defined by the user in the parameters.\\
For help type:
\begin{lstlisting}
./gto_fasta_extract -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fasta\char`_extract} program needs two paramenters, which defines the begin and the end of the extraction, and two streams for the computation, namely the input and output standard. The input stream is a FASTA file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fasta_extract [options] [[--] args]
   or: ./gto_fasta_extract [options]

It extracts sequences from a FASTA file.

    -h, --help            show this help message and exit

Basic options
    -i, --init=<int>      The first position to start the extraction (default 0)
    -e, --end=<int>       The last extract position (default 100)
    < input.fasta         Input FASTA or Multi-FASTA file format (stdin)
    > output.seq          Output sequence file (stdout)

Example: ./gto_fasta_extract -i <init> -e <end> < input.fasta > output.seq
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fasta\char`_extract} program is a group sequence.\\
Using the input above with the value 0 as the extraction starting point and the 50 as the ending, an output example for this is the following:
\begin{lstlisting}
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGG
\end{lstlisting}

% File: gto/manual/sections/FASTA_tools/FastaExtractByRead.tex
\section{Program gto\char`_fasta\char`_extract\char`_by\char`_read}
The \texttt{gto\char`_fasta\char`_extract\char`_by\char`_read} extracts sequences from a FASTA or Multi-FASTA file, which the range is defined by the user in the parameters.\\
For help type:
\begin{lstlisting}
./gto_fasta_extract_by_read -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fasta\char`_extract\char`_by\char`_read} program needs two paramenters, which defines the begin and the end of the extraction, and two streams for the computation, namely the input and output standard. The input stream is a FASTA or Multi-FASTA file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fasta_extract_by_read [options] [[--] args]
   or: ./gto_fasta_extract_by_read [options]

It extracts sequences from each read in a Multi-FASTA file (splited by \n)

    -h, --help            show this help message and exit

Basic options
    -i, --init=<int>      The first position to start the extraction (default 0)
    -e, --end=<int>       The last extract position (default 100)
    < input.fasta         Input FASTA or Multi-FASTA file format (stdin)
    > output.fasta        Output FASTA or Multi-FASTA file format (stdout)

Example: ./gto_fasta_extract_by_read -i <init> -e <end> < input.mfasta > output.mfasta
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
>AB000263 |acc=AB000263|descr=Homo sapiens mRNA 
ACAAGATGCCATTGTCCCCCGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGGT
GGCCCCACCGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTG
GTGGTTTGAGTGGACCTCCCAGGCCAGTGCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAG
GCGCACCCCCCCAGCAATCCGCGCGCCGGGACAGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAA
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fasta\char`_extract\char`_by\char`_read} program is FASTA or Multi-FASTA file wiht the extracted sequences.\\
Using the input above with the value 0 as the extraction starting point and the 50 as the ending, an output example for this is the following:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGG
>AB000263 |acc=AB000263|descr=Homo sapiens mRNA 
ACAAGATGCCATTGTCCCCCGGCCTCCTGCTGCTGCTGCTCTCCGGGGCC
\end{lstlisting}

% File: gto/manual/sections/FASTA_tools/FastaExtractPatternCoords.tex
\section{Program gto\char`_fasta\char`_extract\char`_pattern\char`_coords}
The \texttt{gto\char`_fasta\char`_extract\char`_pattern\char`_coords} extracts the header and coordinates from a Multi-FASTA file format given a pattern/motif in the sequence. \\
For help type:
\begin{lstlisting}
./gto_fasta_extract_pattern_coords -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fasta\char`_extract\char`_pattern\char`_coords} program needs two streams for the computation, namely the input and output standard. The input stream is a Multi-FASTA  file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fasta_extract_pattern_coords [options] [[--] args]
   or: ./gto_fasta_extract_pattern_coords [options]

It extracts the header and coordinates from a Multi-FASTA file format given a 
pattern/motif in the sequence.

    -h, --help            show this help message and exit

Basic options
    -p, --pattern=<str>   Pattern to search in the file header
    < input.fasta         Input Multi-FASTA file format (stdin)
    > output.coords       Output coordinates (stdout)

Example: ./gto_fasta_extract_pattern_coords -p <pattern> < input.fasta > output.coords
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCGCAACACGCAAGTTTAATTCGCAAGTTAGACCTGAACGGGAGGTGGCCACGCAAGTT
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fasta\char`_extract\char`_pattern\char`_coords} program is a Multi-FASTA  file.\\
Using the input above, with the pattern ACA, an output example for this is the following:
\begin{lstlisting}
1	3	>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
131	133	>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
259	261	>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
347	349	>AB000264 |acc=AB000264|descr=Homo sapiens mRNA  
\end{lstlisting}


% File: gto/manual/sections/FASTA_tools/FastaExtractReadByPattern.tex
\section{Program gto\char`_fasta\char`_extract\char`_read\char`_by\char`_pattern}
The \texttt{gto\char`_fasta\char`_extract\char`_read\char`_by\char`_pattern} extracts reads from a Multi-FASTA file format given a pattern in the header. Also, this pattern is case insensitive. \\
For help type:
\begin{lstlisting}
./gto_fasta_extract_read_by_pattern -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fasta\char`_extract\char`_read\char`_by\char`_pattern} program needs two streams for the computation, namely the input and output standard. The input stream is a Multi-FASTA file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fasta_extract_read_by_pattern [options] [[--] args]
   or: ./gto_fasta_extract_read_by_pattern [options]

It extracts reads from a Multi-FASTA file format given a pattern in the header (ID).

    -h, --help            show this help message and exit

Basic options
    -p, --pattern=<str>   Pattern to search in the file header
    < input.fasta            Input Multi-FASTA file format (stdin)
    > output.fasta           Output Multi-FASTA file format (stdout)

Example: ./gto_fasta_extract_read_by_pattern -p <pattern> < input.mfasta > output.fasta
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
>AB000263 |acc=AB000263|descr=Homo sapiens mRNA 
ACAAGATGCCATTGTCCCCCGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGGT
GGCCCCACCGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTG
GTGGTTTGAGTGGACCTCCCAGGCCAGTGCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAG
GCGCACCCCCCCAGCAATCCGCGCGCCGGGACAGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAA
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fasta\char`_extract\char`_read\char`_by\char`_pattern} program is a Multi-FASTA file.\\
Using the input above with the pattern value as ''264'', an output example for this is the following:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
\end{lstlisting}


% File: gto/manual/sections/FASTA_tools/FastaFindNPos.tex
\section{Program gto\char`_fasta\char`_find\char`_n\char`_pos}
The \texttt{gto\char`_fasta\char`_find\char`_n\char`_pos} reports the ''N'' regions in a sequence or FASTA (seq) file.\\
For help type:
\begin{lstlisting}
./gto_fasta_find_n_pos -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fasta\char`_find\char`_n\char`_pos} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTA file or a sequence.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fasta_find_n_pos [options] [[--] args]
   or: ./gto_fasta_find_n_pos [options]

It reports the 'N' regions in a sequence or FASTA (seq) file.

    -h, --help            show this help message and exit

Basic options
    < input.fasta         Input FASTQ file format or a sequence (stdin)
    > output              Output report of 'N' positions (stdout)

Example: ./gto_fasta_find_n_pos < input.fasta > output

The output obeys the following structure:
Begin	End	Positions
<value>	<value>	<value>
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
NCNNNACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GNCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTNGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACNTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAN
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fasta\char`_find\char`_n\char`_pos} program is a structured report of ''N'' appearances in the sequence or FASTA file. The first column is the first position of the ''N'' appearance, the second is the position of the last ''N'' in the interval found, and the last column is the count of ''N'' in this interval. \\
Using the input above, an output example for this is the following:
\begin{lstlisting}
1	1	1
3	5	3
82	82	1
163	163	1
289	289	1
\end{lstlisting}


% File: gto/manual/sections/FASTA_tools/FastaFromSeq.tex
\section{Program gto\char`_fasta\char`_from\char`_seq}
The \texttt{gto\char`_fasta\char`_from\char`_seq} converts a genomic sequence to pseudo FASTA file format.\\
For help type:
\begin{lstlisting}
./gto_fasta_from_seq -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fasta\char`_from\char`_seq} program needs two streams for the computation, namely the input and output standard. The input stream is a sequence group file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fasta_from_seq [options] [[--] args]
   or: ./gto_fasta_from_seq [options]

It converts a genomic sequence to pseudo FASTA file format.

    -h, --help            show this help message and exit

Basic options
    < input.seq           Input sequence file (stdin)
    > output.fasta        Output FASTA file format (stdout)

Optional options
    -n, --name=<str>      The read's header
    -l, --lineSize=<int>  The maximum of chars for line

Example: ./gto_fasta_from_seq -l <lineSize> -n <name> < input.seq > output.fasta
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAAACAAGATGCCATTGTCCCCCGGCCTCCTGCTG
CTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGGTGGCCCCACCGGCCGAGACAGCGAGCATATGCA
GGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGTGGTTTGAGTGGACCTCCCAGGCCAGTGCCG
GGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGGCGCACCCCCCCAGCAATCCGCGCGCCGGGAC
AGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAATAAAACCTCACCCATGAATGCTCACGCAAGTT
TAATTACAGACCTGAA
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fasta\char`_from\char`_seq} program is a pseudo FASTA file.\\
Using the input above with the size line as 80 and the read's header as ''SeqToFasta'', an output example for this is the following:
\begin{lstlisting}
>SeqToFasta
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAAACAAGATGCCATTGTCCCCCGGCCTCCTGCTG
CTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGGTGGCCCCACCGGCCGAGACAGCGAGCATATGCA
GGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGTGGTTTGAGTGGACCTCCCAGGCCAGTGCCG
GGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGGCGCACCCCCCCAGCAATCCGCGCGCCGGGAC
AGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAATAAAACCTCACCCATGAATGCTCACGCAAGTT
TAATTACAGACCTGAA
\end{lstlisting}


% File: gto/manual/sections/FASTA_tools/FastaGetUnique.tex
\section{Program gto\char`_fasta\char`_get\char`_unique}
The \texttt{gto\char`_fasta\char`_get\char`_unique} changes the headers of FASTA or Multi-FASTA file to simple chrX by order, where X is the number.\\
For help type:
\begin{lstlisting}
./gto_fasta_get_unique -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fasta\char`_get\char`_unique} program needs two streams for the computation, namely the input and output standard. The input stream is a Multi-FASTA file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fasta_get_unique [options] [[--] args]
   or: ./gto_fasta_get_unique [options]

It extracts unique reads from Multi-FASTA files.

    -h, --help            show this help message and exit

Basic options
    < input.fasta         Input Multi-FASTA file format (stdin)
    > output.fasta        Output FASTA or Multi-FASTA file format (stdout)

Example: ./gto_fasta_get_unique < input.fasta > output.fasta
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
todo
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fasta\char`_get\char`_unique} program is a FASTA or Multi-FASTA file.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
todo
\end{lstlisting}


% File: gto/manual/sections/FASTA_tools/FastaInfo.tex
\section{Program gto\char`_fasta\char`_info}
The \texttt{gto\char`_fasta\char`_info} shows the readed information of a FASTA or Multi-FASTA file format.\\
For help type:
\begin{lstlisting}
./gto_fasta_info -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fasta\char`_info} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTA or Multi-FASTA file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fasta_info [options] [[--] args]
   or: ./gto_fasta_info [options]

It shows read information of a FASTA or Multi-FASTA file format.

    -h, --help            show this help message and exit

Basic options
    < input.fasta         Input FASTA or Multi-FASTA file format (stdin)
    > output              Output read information (stdout)

Example: ./gto_fasta_info < input.mfasta > output

Output example :
Number of reads      : value
Number of bases      : value
MIN of bases in read : value
MAX of bases in read : value
AVG of bases in read : value
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
>AB000263 |acc=AB000263|descr=Homo sapiens mRNA 
ACAAGATGCCATTGTCCCCCGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGGT
GGCCCCACCGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTG
GTGGTTTGAGTGGACCTCCCAGGCCAGTGCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAG
GCGCACCCCCCCAGCAATCCGCGCGCCGGGACAGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAA
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fasta\char`_info} program is a set of information related to the file read. \\
Using the input above, an output example for this is the following:
\begin{lstlisting}
Number of reads      : 2
Number of bases      : 736
MIN of bases in read : 368
MAX of bases in read : 368
AVG of bases in read : 368.0000
\end{lstlisting}

% File: gto/manual/sections/FASTA_tools/FastaMergeStreams.tex
\section{Program gto\char`_fasta\char`_merge\char`_streams}
The \texttt{gto\char`_fasta\char`_merge\char`_streams} merges the three channels of information (headers, extra and DNA) and writes it into a FASTA file. \\
For help type:
\begin{lstlisting}
./gto_fasta_merge_streams -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fasta\char`_merge\char`_streams} program needs the three files resulting from the execution of the \texttt{gto\char`_fasta\char`_split\char`_streams} tool, and the output standard stream for computation. The output stream is a FASTA or Multi-FASTA file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fasta_merge_streams [options] [[--] args]
   or: ./gto_fasta_merge_streams [options]

It merges the three channels of information (headers, extra and DNA) and writes it into a FASTA file.

    -h, --help            Show this help message and exit

Basic options
    -e, --extra=<str>     Output file for the extra information
    -d, --dna=<str>       Output file for the DNA information
    -H, --headers=<str>   Output file for the headers information
    > output              Output FASTA file format (stdout)

Example: ./gto_fasta_merge_streams -e <filename> -d <filename> -H <filename> > output.fasta
\end{lstlisting}

\subsection*{Output}

The output of the \texttt{gto\char`_fasta\char`_merge\char`_streams} program is a FASTA or Multi-FASTA file.\\
Using the three output files of the \texttt{gto\char`_fasta\char`_split\char`_streams} tool as input in this example, the output of this tool is the following:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCCGGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAAGTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCCGCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGCTAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
>AB000263 |acc=AB000263|descr=Homo sapiens mRNA 
ACAAGATGCCATTGTCCCCCGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGGTGGCCCCACCGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGTGGTTTGAGTGGACCTCCCAGGCCAGTGCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGGCGCACCCCCCCAGCAATCCGCGCGCCGGGACAGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAATAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
\end{lstlisting}

% File: gto/manual/sections/FASTA_tools/FastaMutate.tex
\section{Program gto\char`_fasta\char`_mutate}
The \texttt{gto\char`_fasta\char`_mutate} creates a synthetic mutation of a FASTA file given specific rates of editions, deletions and additions. All these paramenters are defined by the user, and their are optional.\\
For help type:
\begin{lstlisting}
./gto_fasta_mutate -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fasta\char`_mutate} program needs two streams for the computation, namely the input and output standard. However, optional settings can be supplied too, such as the starting point to the random generator, and the edition, deletion and insertion rates. Also, the user can choose to use the ACGTN alphabet in the synthetic mutation. The input stream is a FASTA or Multi-FASTA File.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fasta_mutate [options] [[--] args]
   or: ./gto_fasta_mutate [options]

Creates a synthetic mutation of a fasta file given specific rates of editions, 
deletions and additions

    -h, --help                    show this help message and exit

Basic options
    < input.fasta                 Input FASTA or Multi-FASTA file format (stdin)
    > output.fasta                Output FASTA or Multi-FASTA file format (stdout)

Optional
    -s, --seed=<int>              Starting point to the random generator
    -e, --edit-rate=<dbl>         Defines the edition rate (default 0.0)
    -d, --deletion-rate=<dbl>     Defines the deletion rate (default 0.0)
    -i, --insertion-rate=<dbl>    Defines the insertion rate (default 0.0)
    -a, --ACGTN-alphabet          When active, the application uses the ACGTN alphabet

Example: ./gto_fasta_mutate -s <seed> -e <edit rate> -d <deletion rate> -i 
<insertion rate> -a < input.mfasta > output.fasta
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
>AB000263 |acc=AB000263|descr=Homo sapiens mRNA 
ACAAGATGCCATTGTCCCCCGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGGT
GGCCCCACCGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTG
GTGGTTTGAGTGGACCTCCCAGGCCAGTGCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAG
GCGCACCCCCCCAGCAATCCGCGCGCCGGGACAGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAA
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fasta\char`_mutate} program is a FASTA or Multi-FASTA file whith the synthetic mutation of input file.\\
Using the input above with the seed value as 1 and the edition rate as 0.5, an output example for this is the following:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ACGCAACGNATTCCTGCTGATCATANTGTNCCGCNCCCCNGCGACGGGGNCTCNCNNGCACACATNGTACCATTGTCCAC
NCTTNCANGTNANCGCTAGCAGGCTACNGTTTNTCCTCNCCTANNCCAANCNGGCGTNNNTACACTGGCACGTGCAGGCA
TNGGTCGGCNGGNNCCTCCGGNAACGGCACCGGAGACGAAGCTCGGNGGNTATACAGGTGTCANGAAACATCCCCGCGNC
GNGTGNCCNNGAANCCANAGAGTATCTCACTCACAACCCTGCGTGCACNTCTAGAGNANGACCTTACNCACCNTCCCNTT
NNGTACCACACCAATGAACGCTGCAGAAAGTCTGTTTNNAGGNGNGCA
>AB000263 |acc=AB000263|descr=Homo sapiens mRNA 
ATTTGAAGGCAANCGGNCCAGNAATNCGGNGGGTGCNGCTCNTGTNGGCTACGGNCATCGCGGCCCTGCTNTANTAAGCN
TGAACCACCGNTCGNNGCACTTAGCAATNGCGNAANCCGTCGGCACGGCGGAGACNAANCCGCTANTNNTTTCCCGCTNA
ATGGNTGTACAAGACCNACTANACCANCCTCCGTCACCACACTGGAGCGCANGATGGNNCGCTGNCTAGNAGNCNNTGAG
GCGCTCCNTCCTANAAANCCGTGGNCGAGCNCCCTATGGNAGNGTGGGGGTTTTACCGGAAGACCNTCGNGCCCTATGGG
AGCAATCANAANCTAGAAAGCTTACNGATGGTGANGAANTAGACTANG
\end{lstlisting}

% File: gto/manual/sections/FASTA_tools/FastaRandExtraChars.tex
\section{Program gto\char`_fasta\char`_rand\char`_extra\char`_chars}
The \texttt{gto\char`_fasta\char`_rand\char`_extra\char`_chars} substitues in the DNA sequence the outside ACGT chars by random ACGT symbols. It works both in FASTA and Multi-FASTA file formats.\\
For help type:
\begin{lstlisting}
./gto_fasta_rand_extra_chars -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fasta\char`_rand\char`_extra\char`_chars} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTA or Multi-FASTA file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fasta_rand_extra_chars [options] [[--] args]
   or: ./gto_fasta_rand_extra_chars [options]

It substitues in the DNA sequence the outside ACGT chars by random ACGT symbols.
It works both in FASTA and Multi-FASTA file formats


    -h, --help            show this help message and exit

Basic options
    < input.fasta         Input FASTA or Multi-FASTA file format (stdin)
    > output.fasta        Output FASTA or Multi-FASTA file format (stdout)

Example: ./gto_fasta_rand_extra_chars < input.mfasta > output.mfasta
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ANAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGNCCCTGGAGGGTCCNCCGCTGCCCTGCTGCCATTGNCNCC
NGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCNGGAAGCGGCAGGAA
GNGGTTTGAGTGGACCTCCNGGCCCCTCATAGGAGAGGAAGCNNGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGNC
GCGAATCCGNGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCNNN
TAAANNNTCACCCATGAATGCTCACGCAANTTTAATTACAGACCTGAA
>AB000263 |acc=AB000263|descr=Homo sapiens mRNA 
GCGAATCCGNGCGCCGGGACAGAATCTCCTTCTCCACCCCCCCNNNTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACC
NGCCCCACCTAAGGAAAAGCAGCCTCCAGGAACTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCNGGAAGCGG
ANAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGNCCCTGGCNCCAGGGTCCNCCGCTGCCCTGCTGCCATTGN
GAGGAAGCNNGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGNCGNGGTTTGAGTGGACCTCCNGGCCCCTCATAGGA
TCACGCAANTTTAATTACAGACCTGAATAAANNNTCACCCATGAATGC
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fasta\char`_rand\char`_extra\char`_chars} program is a FASTA or Multi-FASTA file.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ATAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCCCCGCTGCCCTGCTGCCATTGTCCCC
TGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCGGGAAGCGGCAGGAA
GAGGTTTGAGTGGACCTCCCGGCCCCTCATAGGAGAGGAAGCCGGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGTC
GCGAATCCGGGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCTTG
TAAAAGATCACCCATGAATGCTCACGCAAATTTAATTACAGACCTGAA
>AB000263 |acc=AB000263|descr=Homo sapiens mRNA 
GCGAATCCGTGCGCCGGGACAGAATCTCCTTCTCCACCCCCCCATCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACC
GGCCCCACCTAAGGAAAAGCAGCCTCCAGGAACTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCGGGAAGCGG
AGAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGTCCCTGGCTCCAGGGTCCTCCGCTGCCCTGCTGCCATTGC
GAGGAAGCGGGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGGCGCGGTTTGAGTGGACCTCCTGGCCCCTCATAGGA
TCACGCAACTTTAATTACAGACCTGAATAAAATGTCACCCATGAATGC
\end{lstlisting}

% File: gto/manual/sections/FASTA_tools/FastaRenameHumanHeaders.tex
\section{Program gto\char`_fasta\char`_rename\char`_human\char`_headers}
The \texttt{gto\char`_fasta\char`_rename\char`_human\char`_headers} changes the headers of FASTA or Multi-FASTA file to simple chrX by order, where X is the number.\\
For help type:
\begin{lstlisting}
./gto_fasta_rename_human_headers -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fasta\char`_rename\char`_human\char`_headers} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTA or Multi-FASTA file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fasta_rename_human_headers [options] [[--] args]
   or: ./gto_fasta_rename_human_headers [options]

It changes the headers of FASTA or Multi-FASTA file to simple chr$1 by order.

    -h, --help            show this help message and exit

Basic options
    < input.fasta         Input FASTA or Multi-FASTA file format (stdin)
    > output.fasta        Output FASTA or Multi-FASTA file format (stdout)

Example: ./gto_fasta_rename_human_headers < input.mfasta > output.mfasta
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
> AB000264 | acc = AB000264 | descr = Homo sapiens mRNA
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
> AB000263 | acc = AB000263 | descr = Homo sapiens mRNA
ACAAGATGCCATTGTCCCCCGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGGT
GGCCCCACCGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTG
GTGGTTTGAGTGGACCTCCCAGGCCAGTGCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAG
GCGCACCCCCCCAGCAATCCGCGCGCCGGGACAGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAA
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fasta\char`_rename\char`_human\char`_headers} program is a FASTA or Multi-FASTA file.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
>chr1
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
>chr2
ACAAGATGCCATTGTCCCCCGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGGT
GGCCCCACCGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTG
GTGGTTTGAGTGGACCTCCCAGGCCAGTGCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAG
GCGCACCCCCCCAGCAATCCGCGCGCCGGGACAGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAA
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
\end{lstlisting}


% File: gto/manual/sections/FASTA_tools/FastaReverse.tex
\section{Program gto\char`_fasta\char`_reverse}
The \texttt{gto\char`_fasta\char`_reverse} reverses the ACGT bases order for each read in a FASTA or Multi-FASTA file format.\\
For help type:
\begin{lstlisting}
./gto_fasta_reverse -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fasta\char`_reverse} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTA or Multi-FASTA file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fasta_reverse [options] [[--] args]
   or: ./gto_fasta_reverse [options]

It reverses the ACGT bases order for each read in a FASTA or Multi-FASTA file.

    -h, --help            Show this help message and exit

Basic options
    < input.fasta         Input FASTA or Multi-FASTA file format (stdin)
    > output.fasta        Output FASTA or Multi-FASTA file format (stdout)

Example: ./gto_fasta_reverse < input.mfasta > output.mfasta
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCC
CGGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGG
AAGTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGT
GCCGCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCC
CAGCTAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
>AB000263 |acc=AB000263|descr=Homo sapiens mRNA 
ACAAGATGCCATTGTCCCCCGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGG
TGGCCCCACCGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCT
TGGTGGTTTGAGTGGACCTCCCAGGCCAGTGCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGG
AAGGCGCACCCCCCCAGCAATCCGCGCGCCGGGACAGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTG
CAAATAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fasta\char`_reverse} program is FASTA or Multi-FASTA file with the bases reversed and the flag ''(Reversed)'' added in the header.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA  (Reversed)
AAGTCCAGACATTAATTTGAACGCACTCGTAAGTACCCACTCCAAAATCGACCCCCCCACCTCTTCCAGAAGGTCTTCT
TCAAGGACGTCCCGAAACGTCCTCTAAGACAGGGCCGCGCGCCTAAGCGCCGTGACCGGACGAAGGACGGCGGACCGGT
GGAGGGCTCGAAGGAGAGGATACTCCCCGGGCCTCCAGGTGAGTTTGGTGAAGGACGGCGAAGGACGTATACGAGCGAC
AGAGCCGGGTTCGCTCCTTTCAGTCCTCCGACGAAAAGGAATCCACCCCGGCCCCTGTTACCGTCGTCCCGTCGCCACC
TGGGAGGTCCCGGCACCGGGGCCTCTCGTCGTCGTCGTCCTCCGGCAGAACA
>AB000263 |acc=AB000263|descr=Homo sapiens mRNA  (Reversed)
AAAGTCCAGACATTAATTTGAACGCACTCGTAAGTACCCACTCCAAAATAAACGTCCTCCTCTTCCAGAAGGTCTTCTT
CAAGGACGTCCCGTAAGACAGGGCCGCGCGCCTAACGACCCCCCCACGCGGAAGGACGGCGGACCGGTGGAGGGCTCGA
AGGAGAGGATACTCCCCGGGCCGTGACCGGACCCTCCAGGTGAGTTTGGTGGTTCGCTCCTTTCAGTCCTCCGACGAAA
AGGAATAAGGACGGCGAAGGACGTATACGAGCGACAGAGCCGGCCACCCCGGTGGGAGGTCCCCGTCCCGTCGCCACCG
GCACCGGGGCCTCTCGTCGTCGTCGTCCTCCGGCCCCCTGTTACCGTAGAACA
\end{lstlisting}

% File: gto/manual/sections/FASTA_tools/FastaSplitReads.tex
\section{Program gto\char`_fasta\char`_split\char`_reads}
The \texttt{gto\char`_fasta\char`_split\char`_reads} splits a Multi-FASTA file to multiple FASTA files.\\
For help type:
\begin{lstlisting}
./gto_fasta_split_reads -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fasta\char`_split\char`_reads} program needs one stream for the computation, namely the input standard. This input stream is a Multi-FASTA file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fasta_split_reads [options] [[--] args]
   or: ./gto_fasta_split_reads [options]

It splits a Multi-FASTA file to multiple FASTA files.

    -h, --help            show this help message and exit

Basic options
    < input.fasta         Input Multi-FASTA file format (stdin)

Optional options
    -l, --location=<str>  Location to store the files

Example: ./gto_fasta_split_reads < input.mfasta
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
>AB000263 |acc=AB000263|descr=Homo sapiens mRNA 
ACAAGATGCCATTGTCCCCCGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGGT
GGCCCCACCGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTG
GTGGTTTGAGTGGACCTCCCAGGCCAGTGCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAG
GCGCACCCCCCCAGCAATCCGCGCGCCGGGACAGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAA
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fasta\char`_split\char`_reads} program is a report summary of the execution, and the files created in the defined location.\\ 
Using the input above, an output example for this is the following:
\begin{lstlisting}
1 : Splitting to file:./out1.fasta
2 : Splitting to file:./out2.fasta
\end{lstlisting}


% File: gto/manual/sections/FASTA_tools/FastaSplitStreams.tex
\section{Program gto\char`_fasta\char`_split\char`_streams}
The \texttt{gto\char`_fasta\char`_split\char`_streams} splits and writes a FASTA file into three channels of information: headers, extra and DNA.\\
For help type:
\begin{lstlisting}
./gto_fasta_split_streams -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fasta\char`_split\char`_streams} program needs the input standard stream for the computation. The input stream is a FASTA or Multi-FASTA file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fasta_split_streams [options] [[--] args]
   or: ./gto_fasta_split_streams [options]

It splits and writes a FASTA file into three channels of information: headers, extra and DNA.

    -h, --help            Show this help message and exit

Basic options
    -e, --extra=<str>     Output file for the extra information
    -d, --dna=<str>       Output file for the DNA information
    -H, --headers=<str>   Output file for the headers information
    < input.fastq         Input FASTA file format (stdin)

Example: ./gto_fasta_split_streams -e <filename> -d <filename> -H <filename> < input.fasta
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCC
CGGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGG
AAGTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGT
GCCGCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCC
CAGCTAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
>AB000263 |acc=AB000263|descr=Homo sapiens mRNA 
ACAAGATGCCATTGTCCCCCGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGG
TGGCCCCACCGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCT
TGGTGGTTTGAGTGGACCTCCCAGGCCAGTGCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGG
AAGGCGCACCCCCCCAGCAATCCGCGCGCCGGGACAGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTG
CAAATAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
\end{lstlisting}

\subsection*{Output}

The output of the \texttt{gto\char`_fasta\char`_split\char`_streams} program are three files containing the headers, extra information and DNA. The name of those files can be passed in the tool's paramenters. The default names are HEADERS.JV2, EXTRA.JV2 and DNA.JV2. 


% File: gto/manual/sections/FASTA_tools/FastaToSeq.tex
\section{Program gto\char`_fasta\char`_to\char`_seq}
The \texttt{gto\char`_fasta\char`_to\char`_seq} converts a FASTA or Multi-FASTA file format to a sequence.\\
For help type:
\begin{lstlisting}
./gto_fasta_to_seq -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fasta\char`_to\char`_seq} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTA or Multi-FASTA file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fasta_to_seq [options] [[--] args]
   or: ./gto_fasta_to_seq [options]

It converts a FASTA or Multi-FASTA file format to a seq.

    -h, --help            show this help message and exit

Basic options
    < input.fasta         Input FASTA or Multi-FASTA file format (stdin)
    > output.seq          Output sequence file (stdout)

Example: ./gto_fasta_to_seq < input.mfasta > output.seq
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
>AB000263 |acc=AB000263|descr=Homo sapiens mRNA 
ACAAGATGCCATTGTCCCCCGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGGT
GGCCCCACCGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTG
GTGGTTTGAGTGGACCTCCCAGGCCAGTGCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAG
GCGCACCCCCCCAGCAATCCGCGCGCCGGGACAGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAA
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
\end{lstlisting}

\subsection*{Output}

The output of the \texttt{gto\char`_fasta\char`_to\char`_seq} program is a group sequence. \\
Using the input above, an output example for this is the following:
\begin{lstlisting}
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAAACAAGATGCCATTGTCCCCCGGCCTCCTGCTG
CTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGGTGGCCCCACCGGCCGAGACAGCGAGCATATGCA
GGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGTGGTTTGAGTGGACCTCCCAGGCCAGTGCCG
GGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGGCGCACCCCCCCAGCAATCCGCGCGCCGGGAC
AGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAATAAAACCTCACCCATGAATGCTCACGCAAGTT
TAATTACAGACCTGAA
\end{lstlisting}


% File: gto/manual/sections/FASTQ_tools/FASTQ_tools.tex
\chapter{FASTQ tools}
\label{fastq}
The toolkit has a set of tools dedicated to manipulating FASTQ files. Some of these tools allow the data conversion to/from different formats, i. e., there are tools designed to convert a FASTQ file into a sequence or a FASTA/Multi-FASTA format, or converting DNA in some of those formats to FASTQ.

There are also tools for data manipulation in this format, which are designed to exclude 'N', remove low quality scored reads, following different metrics and randomize DNA sequences. Succeeding the manipulation, it is also possible to perform analyses over these files, simulations and mutations. The current available tools for FASTQ format analysis and manipulation include:
\begin{enumerate}

\item \texttt{gto\char`_fastq\char`_to\char`_fasta}: it converts a FASTQ file format to a pseudo FASTA file.

\item \texttt{gto\char`_fastq\char`_to\char`_mfasta}: it converts a FASTQ file format to a pseudo Multi-FASTA file.

\item \texttt{gto\char`_fastq\char`_exclude\char`_n}: it discards the FASTQ reads with the minimum number of "N" symbols.

\item \texttt{gto\char`_fastq\char`_extract\char`_quality\char`_scores}: it extracts all the quality-scores from FASTQ reads.

\item \texttt{gto\char`_fastq\char`_info}: it analyses the basic information of FASTQ file format.

\item \texttt{gto\char`_fastq\char`_maximum\char`_read\char`_size}: it filters the FASTQ reads with the length higher than the value defined.

\item \texttt{gto\char`_fastq\char`_minimum\char`_quality\char`_score}: it discards reads with average quality-score below of the defined.

\item \texttt{gto\char`_fastq\char`_minimum\char`_read\char`_size}: it filters the FASTQ reads with the length smaller than the value defined.

\item \texttt{gto\char`_fastq\char`_rand\char`_extra\char`_chars}: it substitues in the FASTQ files, the DNA sequence the outside ACGT chars by random ACGT symbols.

\item \texttt{gto\char`_fastq\char`_from\char`_seq}: it converts a genomic sequence to pseudo FASTQ file format.

\item \texttt{gto\char`_fastq\char`_mutate}: it creates a synthetic mutation of a FASTQ file given specific rates of mutations, deletions and additions.

\item \texttt{gto\char`_fastq\char`_split}: it splits Paired End files according to the direction of the strand ('/1' or '/2').

\item \texttt{gto\char`_fastq\char`_pack}: it packages each FASTQ read in a single line.

\item \texttt{gto\char`_fastq\char`_unpack}: it unpacks the FASTQ reads packaged using the \texttt{gto\char`_fastq\char`_pack} tool.

\item \texttt{gto\char`_fastq\char`_quality\char`_score\char`_info}: it analyses the quality-scores of a FASTQ file.

\item \texttt{gto\char`_fastq\char`_quality\char`_score\char`_min}: it analyses the minimal quality-scores of a FASTQ file.

\item \texttt{gto\char`_fastq\char`_quality\char`_score\char`_max}: it analyses the maximal quality-scores of a FASTQ file.

\item \texttt{gto\char`_fastq\char`_cut}: it cuts read sequences in a FASTQ file. 

\item \texttt{gto\char`_fastq\char`_minimum\char`_local\char`_quality\char`_score\char`_forward}: it filters the reads considering the quality score average of a defined window size of bases.

\item \texttt{gto\char`_fastq\char`_minimum\char`_local\char`_quality\char`_score\char`_reverse}: it filters the reverse reads, considering the average window size score defined by the bases.

\item \texttt{gto\char`_fastq\char`_xs}: it is a skilled FASTQ read simulation tool, flexible, portable and tunable in terms of sequence complexity.

\item \texttt{gto\char`_fastq\char`_clust\char`_reads}: it agroups reads and creates an index file.

\item \texttt{gto\char`_fastq\char`_complement}: it replaces the ACGT bases with their complements in a FASTQ file format.

\item \texttt{gto\char`_fastq\char`_reverse}: it reverses the ACGT bases order for each read in a FASTQ file format.

\item \texttt{gto\char`_fastq\char`_variation\char`_map}: it identifies the variation that occours in the sequences relative to the reads or a set of reads.

\item \texttt{gto\char`_fastq\char`_variation\char`_filter}: it filters and segments the regions of singularity from the output of \texttt{gto\char`_fastq\char`_variation\char`_map}.

\item \texttt{gto\char`_fastq\char`_variation\char`_visual}: it depites the regions of singularity using the output from \texttt{gto\char`_fastq\char`_variation\char`_filter} into an SVG image.

\item \texttt{gto\char`_fastq\char`_metagenomics}: it measures similarity between any FASTQ file, independently from the size, against any multi-FASTA database (also under the alias gto\char`_fastq\char`_falcon).

\end{enumerate}

\input{\FASTQToolsPath/FastqToFasta.tex}
\input{\FASTQToolsPath/FastqToMFasta.tex}
\input{\FASTQToolsPath/FastqExcludeN.tex}
\input{\FASTQToolsPath/FastqExtractQualityScores.tex}
\input{\FASTQToolsPath/FastqInfo.tex}
\input{\FASTQToolsPath/FastqMaximumReadSize.tex}
\input{\FASTQToolsPath/FastqMinimumQualityScore.tex}
\input{\FASTQToolsPath/FastqMinimumReadSize.tex}
\input{\FASTQToolsPath/FastqRandExtraChars.tex}
\input{\FASTQToolsPath/FastqFromSeq.tex}
\input{\FASTQToolsPath/FastqMutate.tex}
\input{\FASTQToolsPath/FastqSplit.tex}
\input{\FASTQToolsPath/FastqPack.tex}
\input{\FASTQToolsPath/FastqUnpack.tex}
\input{\FASTQToolsPath/FastqQualityScoreInfo.tex}
\input{\FASTQToolsPath/FastqQualityScoreMax.tex}
\input{\FASTQToolsPath/FastqQualityScoreMin.tex}
\input{\FASTQToolsPath/FastqCut.tex}
\input{\FASTQToolsPath/FastqMinimumQualityScoreForward.tex}
\input{\FASTQToolsPath/FastqMinimumQualityScoreReverse.tex}
\input{\FASTQToolsPath/FastqXS.tex}
\input{\FASTQToolsPath/FastqClustReads.tex}
\input{\FASTQToolsPath/FastqComplement.tex}
\input{\FASTQToolsPath/FastqReverse.tex}
\input{\FASTQToolsPath/FastqVariationMap.tex}
\input{\FASTQToolsPath/FastqVariationFilter.tex}
\input{\FASTQToolsPath/FastqVariationVisual.tex}
\input{\FASTQToolsPath/FastqMetagenomics.tex}


% File: gto/manual/sections/FASTQ_tools/FastqClustReads.tex
\section{Program gto\char`_fastq\char`_clust\char`_reads}
The \texttt{gto\char`_fastq\char`_clust\char`_reads} agroups reads and creates an index file. It cluster reads in therms of Seq k-mer Lexicographical order.\\
For help type:
\begin{lstlisting}
./gto_fastq_clust_reads -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_clust\char`_reads} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file. The program sorts the FASTQ reads accoring to the lexicographic order of the genomic sequences.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_clust_reads [options] [[--] args]
   or: ./gto_fastq_clust_reads [options]

It agroups reads and creates an index file.
It cluster reads in therms of Seq k-mer Lexicographical order


    -h, --help            Show this help message and exit

Basic options
    -c, --ctx=<int>       
    < input.fastq         Input FASTQ file format (stdin)
    > output.fastq        Output FASTQ file format (stdout)

Example: ./gto_fastq_clust_reads -c <ctx> < input.fastq > output.fastq
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001661.1 071112_SLXA-EAS1_s_7:5:1:817:345
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGG
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIII
@SRR001661.2 071112_SLXA-EAS1_s_7:5:1:801:338
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCG
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGI
@SRR001661.3 071112_SLXA-EAS1_s_7:5:1:821:328
AACGCGTATTCGGAGCTTCTTCGTTGGGTACGTGCGCCTATTATGCGGCGCGATTGCTAT
+
IIIIIII6BBB6BBBBBBBBBBBBBBBBBDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
@SRR001661.4 071112_SLXA-EAS1_s_7:5:1:943:128
ATCGCGCATTCGACTGGTACGTGTACGTGTAGTCGTAGCGTATGTTCGGTCGTATGCGTG
+
II77777LPMMMPPMMMMIIIIIIIIIIIIII777777777BBBBBBBBDDDDDIIIIII
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_clust\char`_reads} program is a FASTQ file with clustered reads in therms of the genomic sequence k-mer Lexicographical order.
An example, for the output, is:
\begin{lstlisting}
@SRR001661.3 071112_SLXA-EAS1_s_7:5:1:821:328
AACGCGTATTCGGAGCTTCTTCGTTGGGTACGTGCGCCTATTATGCGGCGCGATTGCTAT
+
IIIIIII6BBB6BBBBBBBBBBBBBBBBBDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
@SRR001661.4 071112_SLXA-EAS1_s_7:5:1:943:128
ATCGCGCATTCGACTGGTACGTGTACGTGTAGTCGTAGCGTATGTTCGGTCGTATGCGTG
+
II77777LPMMMPPMMMMIIIIIIIIIIIIII777777777BBBBBBBBDDDDDIIIIII
@SRR001661.1 071112_SLXA-EAS1_s_7:5:1:817:345
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGG
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIII
@SRR001661.2 071112_SLXA-EAS1_s_7:5:1:801:338
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCG
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGI
\end{lstlisting}


% File: gto/manual/sections/FASTQ_tools/FastqComplement.tex
\section{Program gto\char`_fastq\char`_complement}
The \texttt{gto\char`_fastq\char`_complement} replaces the ACGT bases with their complements in a FASTQ file format.\\
For help type:
\begin{lstlisting}
./gto_fastq_complement -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_complement} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_complement [options] [[--] args]
   or: ./gto_fastq_complement [options]

It replaces the ACGT bases with their complements in a FASTQ file format.

    -h, --help            Show this help message and exit

Basic options
    < input.fastq         Input FASTQ file (stdin)
    > output.fastq        Output FASTQ file (stdout)

Example: ./gto_fastq_complement < input.fastq > output.fastq
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGGTTTTCAAATAGA
+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
+SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_complement} program is the FASTQ file with the ACGT base complements.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
CCCACTACCGGCGACGGCTACCGCAGTTTAGGGTGGTTCAATGGGAATTGTTGAATTCCCAAAAGTTTATCT
+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
CAAGTCCCTATGCTGCAAACATAAAATTCTTAGACTTCGTCTTCAGCTACTATTATGCGCAGCAAAATAGTA
+SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

% File: gto/manual/sections/FASTQ_tools/FastqCut.tex
\section{Program gto\char`_fastq\char`_cut}
The \texttt{gto\char`_fastq\char`_cut} cuts read sequences in a FASTQ file. It requires that the initial and end positions for the cut.\\
For help type:
\begin{lstlisting}
./gto_fastq_cut -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_cut} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_cut [options] [[--] args]
   or: ./gto_fastq_cut [options]

It cuts read sequences in a FASTQ file.

    -h, --help            show this help message and exit

Basic options
    -i, --initial=<int>   Starting position to the cut
    -e, --end=<int>       Ending position to the cut
    < input.fastq         Input FASTQ file format (stdin)
    > output.fastq        Output FASTQ file format (stdout)

Example: ./gto_fastq_cut -i <initial> -e <end> < input.fastq > output.fastq
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGGTTTTCAAATAGA
+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
+SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_cut} program is a FASTQ file cut.\\
Using the initial value as 10 and the end value as 30, an example for this input, is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
CGCTGCCGATGGCGTCAAATC
+
IIIIIIIIIIIIIIIIIIII9
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
ACGACGTTTGTATTTTAAGAA
+
IIIIIIIIIIIIIIIIIIIII
\end{lstlisting}

% File: gto/manual/sections/FASTQ_tools/FastqExcludeN.tex
\section{Program gto\char`_fastq\char`_exclude\char`_n}
The \texttt{gto\char`_fastq\char`_exclude\char`_n} discards the FASTQ reads with the minimum number of ''N'' symbols. Also, if present, it will erase the second header (after +).\\
For help type:
\begin{lstlisting}
./gto_fastq_exclude_n -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_exclude\char`_n} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_exclude_n [options] [[--] args]
   or: ./gto_fastq_exclude_n [options]

It discards the FASTQ reads with the minimum number of "N" symbols. 
If present, it will erase the second header (after +).

    -h, --help            show this help message and exit

Basic options
    -m, --max=<int>       The maximum of of "N" symbols in the read
    < input.fastq         Input FASTQ file format (stdin)
    > output.fastq        Output FASTQ file format (stdout)

Example: ./gto_fastq_exclude_n -m <max> < input.fastq > output.fastq

Console output example :
<FASTQ non-filtered reads>
Total reads    : value
Filtered reads : value
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GNNTGATGGCCGCTGCCGATGGCGNANAATCCCACCAANATACCCTTAACAACTTAAGGGTTNTCAAATAGA
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
NTTCAGGGATACGACGNTTGTATTTTAAGAATCTGNAGCAGAAGTCGATGATAATACGCGNCGTTTTATCAN
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_exclude\char`_n} program is a set of all the filtered FASTQ reads, followed by the execution report.
The execution report only appears in the console.\\
Using the input above with the max value as 5, an output example for this is the following:
\begin{lstlisting}
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
NTTCAGGGATACGACGNTTGTATTTTAAGAATCTGNAGCAGAAGTCGATGATAATACGCGNCGTTTTATCAN
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
Total reads    : 2
Filtered reads : 1
\end{lstlisting}


% File: gto/manual/sections/FASTQ_tools/FastqExtractQualityScores.tex
\section{Program gto\char`_fastq\char`_extract\char`_quality\char`_scores}
The \texttt{gto\char`_fastq\char`_extract\char`_quality\char`_scores} extracts all the quality-scores from FASTQ reads.\\
For help type:
\begin{lstlisting}
./gto_fastq_extract_quality_scores -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_extract\char`_quality\char`_scores} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_extract_quality_scores [options] [[--] args]
   or: ./gto_fastq_extract_quality_scores [options]

It extracts all the quality-scores from FASTQ reads.

    -h, --help            show this help message and exit

Basic options
    < input.fastq         Input FASTQ file format (stdin)
    > output.fastq        Output FASTQ file format (stdout)

Example: ./gto_fastq_extract_quality_scores < input.fastq > output.fastq

Console output example:
<FASTQ quality scores>
Total reads          : value
Total Quality-Scores : value
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGGTTTTCAAATAGA
+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
+SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_extract\char`_quality\char`_scores} program is a set of all the quality scores from the FASTQ reads, followed by the execution report.
The execution report only appears in the console.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
Total reads          : 2
Total Quality-Scores : 144
\end{lstlisting}


% File: gto/manual/sections/FASTQ_tools/FastqFromSeq.tex
\section{Program gto\char`_fastq\char`_from\char`_seq}
The \texttt{gto\char`_fastq\char`_from\char`_seq} converts a genomic sequence to pseudo FASTQ file format.\\
For help type:
\begin{lstlisting}
./gto_fastq_from_seq -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_from\char`_seq} program needs two streams for the computation, namely the input and output standard. The input stream is a sequence group file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_from_seq [options] [[--] args]
   or: ./gto_fastq_from_seq [options]

It converts a genomic sequence to pseudo FASTQ file format.

    -h, --help            show this help message and exit

Basic options
    < input.seq           Input sequence file (stdin)
    > output.fastq        Output FASTQ file format (stdout)

Optional options
    -n, --name=<str>      The read's header
    -l, --lineSize=<int>  The maximum of chars for line

Example: ./gto_fastq_from_seq -l <lineSize> -n <name> < input.seq > output.fastq
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAAACAAGATGCCATTGTCCCCCGGCCTCCTGCTG
CTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGGTGGCCCCACCGGCCGAGACAGCGAGCATATGCA
GGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGTGGTTTGAGTGGACCTCCCAGGCCAGTGCCG
GGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGGCGCACCCCCCCAGCAATCCGCGCGCCGGGAC
AGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAATAAAACCTCACCCATGAATGCTCACGCAAGTT
TAATTACAGACCTGAA
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_from\char`_seq} program is a pseudo FASTQ file.\\
An example, using the size line as 80 and the read's header as ''SeqToFastq'', for the input, is:
\begin{lstlisting}
@SeqToFastq1
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
+
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
@SeqToFastq2
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
+
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
@SeqToFastq3
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
+
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
@SeqToFastq4
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
+
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
@SeqToFastq5
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAAACAAGATGCCATTGTCCCCCGGCCTCCTGCTG
+
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
@SeqToFastq6
CTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGGTGGCCCCACCGGCCGAGACAGCGAGCATATGCA
+
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
@SeqToFastq7
GGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGTGGTTTGAGTGGACCTCCCAGGCCAGTGCCG
+
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
@SeqToFastq8
GGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGGCGCACCCCCCCAGCAATCCGCGCGCCGGGAC
+
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
@SeqToFastq9
AGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAATAAAACCTCACCCATGAATGCTCACGCAAGTT
+
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
@SeqToFastq10
TAATTACAGACCTGAA
+
FFFFFFFFFFFFFFFFF
\end{lstlisting}


% File: gto/manual/sections/FASTQ_tools/FastqInfo.tex
\section{Program gto\char`_fastq\char`_info}
The \texttt{gto\char`_fastq\char`_info} analyses the basic information of FASTQ file format.\\
For help type:
\begin{lstlisting}
./gto_fastq_info -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_info} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_info [options] [[--] args]
   or: ./gto_fastq_info [options]

It analyses the basic information of FASTQ file format.

    -h, --help            show this help message and exit

Basic options
    < input.fastq         Input FASTQ file format (stdin)
    > output              Output read information (stdout)

Example: ./gto_fastq_info < input.fastq > output

Output example:
Total reads     : value
Max read length : value
Min read length : value
Min QS value    : value
Max QS value    : value
QS range        : value
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGGTTTTCAAATAGA
+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
+SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_info} program is a set of information related to the file read. \\
Using the input above, an output example for this is the following:
\begin{lstlisting}
Total reads     : 2
Max read length : 72
Min read length : 72
Min QS value    : 41
Max QS value    : 73
QS range        : 33
\end{lstlisting}


% File: gto/manual/sections/FASTQ_tools/FastqMaximumReadSize.tex
\section{Program gto\char`_fastq\char`_maximum\char`_read\char`_size}
The \texttt{gto\char`_fastq\char`_maximum\char`_read\char`_size} filters the FASTQ reads with the length higher than the value defined.\\
For help type:
\begin{lstlisting}
./gto_fastq_maximum_read_size -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_maximum\char`_read\char`_size} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_maximum_read_size [options] [[--] args]
   or: ./gto_fastq_maximum_read_size [options]

It filters the FASTQ reads with the length higher than the value defined. 
If present, it will erase the second header (after +).

    -h, --help            show this help message and exit

Basic options
    -s, --size=<int>      The maximum read length
    < input.fastq         Input FASTQ file format (stdin)
    > output.fastq        Output FASTQ file format (stdout)

Example: ./gto_fastq_maximum_read_size -s <size> < input.fastq > output.fastq

Console output example :
<FASTQ non-filtered reads>
Total reads    : value
Filtered reads : value
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGG
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIII
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_maximum\char`_read\char`_size} program is a set of all the filtered FASTQ reads, followed by the execution report.
The execution report only appears in the console.\\
Using the input above with the size values as 60, an output example for this is the following:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGG
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIII
Total reads    : 2
Filtered reads : 1
\end{lstlisting}


% File: gto/manual/sections/FASTQ_tools/FastqMetagenomics.tex
\section{Program gto\char`_fastq\char`_metagenomics}
The \texttt{gto\char`_fastq\char`_metagenomics} is an ultra-fast method to infer metagenomic composition of sequenced reads relative to a database. gto\char`_fastq\char`_metagenomics measures similarity between any FASTQ file (or FASTA), independently from the size, against any multi-FASTA database, such as the entire set of complete genomes from the NCBI. gto\char`_fastq\char`_metagenomics supports single reads, paired-end reads, and compositions of both. It has been tested in many plataforms, such as Illumina MySeq, HiSeq, Novaseq, IonTorrent.\\
gto\char`_fastq\char`_metagenomics is efficient to detect the presence and authenticate a given species in the FASTQ reads. The core of the method is based on relative data compression. gto\char`_fastq\char`_metagenomics uses variable multi-threading, without multiplying the memory for each thread, being able to run efficiently in a common laptop.\\
For help type:
\begin{lstlisting}
./gto_fastq_metagenomics -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_metagenomics} program needs a FASTQ file to compute.\\
The attribution is given according to:
\begin{lstlisting}
NAME                                                                     
      gto_fastq_metagenomics v3.1: a tool to infer metagenomic composition.            
                                                                         
SYNOPSIS                                                                 
      gto_fastq_metagenomics [OPTION]... [FILE1]:[FILE2]:... [FILE]                      
                                                                         
SAMPLE                                                                   
      gto_fastq_metagenomics -v -F -l 47 -Z -y pro.com reads1.fq:reads2.fq DB.fa         
                                                                         
DESCRIPTION                                                              
      It infers metagenomic sample composition of sequenced reads.       
      The core of the method uses a cooperation between multiple         
      context and tolerant context models with several depths.           
      The reference sequences must be in a multi-FASTA format.           
      The sequenced reads must be trimmed and in FASTQ format.           
                                                                         
      Non-mandatory arguments:                                           
                                                                         
      -h                   give this help,                               
      -F                   force mode (overwrites top file),             
      -V                   display version number,                       
      -v                   verbose mode (more information),              
      -Z                   database local similarity,                    
      -s                   show compression levels,                      
                                                                         
      -l <level>           compression level [1;47],                    
      -p <sample>          subsampling (default: 1),                    
      -t <top>             top of similarity (default: 20),              
      -n <nThreads>        number of threads (default: 2),              
                                                                         
      -x <FILE>            similarity top filename,                      
      -y <FILE>            profile filename (-Z must be on).             
                                                                         
      Mandatory arguments:                                               
                                                                         
      [FILE1]:[FILE2]:...  metagenomic filename (FASTQ),                 
                           Use ":" for splitting files.                
                                                                         
      [FILE]               database filename (Multi-FASTA).              
                                                                         
COPYRIGHT                                                                
      Copyright (C) 2014-2019, IEETA, University of Aveiro.              
      This is a Free software, under GPLv3. You may redistribute         
      copies of it under the terms of the GNU - General Public           
      License v3 <http://www.gnu.org/licenses/gpl.html>.    
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGGTTTTCAAATAGA
+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
+SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_metagenomics} program is a CSV file (top.csv) with the highest probability of being contained in the samples. An example for this CSV file is the following:
\begin{lstlisting}
1  66725   12.263   NC_037703.1_Saccharomycodes_ludwigii_strain_Y-8871_mitochondrion
2  66725   12.263   NC_037703.1_Saccharomycodes_ludwigii_strain_Y-8871_mitochondrion
3  107123  11.492   NC_012621.1_Nakaseomyces_bacillisporus_mitochondrion
4  107123  11.492   NC_012621.1_Nakaseomyces_bacillisporus_mitochondrion
5  16592   11.153   NC_024030.1_Equus_przewalskii_mitochondrial_DNA
6  14583   10.851   NC_021120.1_Bursaphelenchus_mucronatus_mitochondrion
7  162504  10.607   NC_018415.1_Candidatus_Carsonella_ruddii_CS_isolate_Thao2000
8  10315   10.586   NC_016117.1_Mnemiopsis_leidyi_mitochondrion
9  162589  10.550   NC_018414.1_Candidatus_Carsonella_ruddii_CE_isolate_Thao2000
10 166163  10.476   NC_018416.1_Candidatus_Carsonella_ruddii_HC_isolate_Thao2000
\end{lstlisting}


% File: gto/manual/sections/FASTQ_tools/FastqMinimumQualityScore.tex
\section{Program gto\char`_fastq\char`_minimum\char`_quality\char`_score}
The \texttt{gto\char`_fastq\char`_minimum\char`_quality\char`_score} discards reads with average quality-score below of the defined.\\
For help type:
\begin{lstlisting}
./gto_fastq_minimum_quality_score -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_minimum\char`_quality\char`_score} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_minimum_quality_score [options] [[--] args]
   or: ./gto_fastq_minimum_quality_score [options]

It discards reads with average quality-score below value.

    -h, --help            show this help message and exit

Basic options
    -m, --min=<int>       The minimum average quality-score (Value 25 or 30 is commonly used)
    < input.fastq         Input FASTQ file format (stdin)
    > output.fastq        Output FASTQ file format (stdout)

Example: ./gto_fastq_minimum_quality_score -m <min> < input.fastq > output.fastq

Console output example:
<FASTQ non-filtered reads>
Total reads    : value
Filtered reads : value
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGGTTTTCAAATAGA
+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
+SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
54599<>77977==6=?I6IBI::33344235521677999>>><<<@@A@BBCDGGBFFH>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_minimum\char`_quality\char`_score} program is a set of all the filtered FASTQ reads, followed by the execution report.\\
Using the input above with the minimum averge value as 30, an output example for this is the following:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGGTTTTCAAATAGA
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
Total reads    : 2
Filtered reads : 1
\end{lstlisting}


% File: gto/manual/sections/FASTQ_tools/FastqMinimumQualityScoreForward.tex
\section{Program gto\char`_fastq\char`_minimum\char`_local\char`_quality\char`_score\char`_forward}
The \texttt{gto\char`_fastq\char`_minimum\char`_local\char`_quality\char`_score\char`_forward} filters the reads considering the quality score average of a defined window size of bases.\\
For help type:
\begin{lstlisting}
./gto_fastq_minimum_local_quality_score_forward -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_minimum\char`_local\char`_quality\char`_score\char`_forward} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_minimum_local_quality_score_forward [options] [[--] args]
   or: ./gto_fastq_minimum_local_quality_score_forward [options]

It filters the reads considering the quality score average of a defined window size 
of bases.

    -h, --help                show this help message and exit

Basic options
    -k, --windowsize=<int>    The window size of bases (default 5)
    -w, --minavg=<int>        The minimum average of quality score (default 25)
    -m, --minqs=<int>         The minimum value of the quality score (default 33)
    < input.fastq             Input FASTQ file format (stdin)
    > output.fastq            Output FASTQ file format (stdout)

Example: ./gto_fastq_minimum_local_quality_score_forward -k <windowsize> -w <minavg> 
-m <minqs> < input.fastq > output.fastq

Console output example:
Minimum QS       : value
<FASTQ output>
Total reads      : value
Trimmed reads    : value
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGGTTTTCAAATAGA
+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
+SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_minimum\char`_local\char`_quality\char`_score\char`_forward} program is a FASTQ file with the reads filtered following a quality score average of a defined window of bases.
The execution report only appears in the console.\\
Using the input above with the default values, an output example for this is the following:
\begin{lstlisting}
Minimum QS     : 33
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGGTTTTCAAATAGA
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTT
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIII
Total reads    : 2
Trimmed reads  : 1
\end{lstlisting}

% File: gto/manual/sections/FASTQ_tools/FastqMinimumQualityScoreReverse.tex
\section{Program gto\char`_fastq\char`_minimum\char`_local\char`_quality\char`_score\char`_reverse}
The \texttt{gto\char`_fastq\char`_minimum\char`_local\char`_quality\char`_score\char`_reverse} filters the reverse reads, considering the quality score average of a defined window size of bases.\\
For help type:
\begin{lstlisting}
./gto_fastq_minimum_local_quality_score_reverse -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_minimum\char`_local\char`_quality\char`_score\char`_reverse} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_minimum_local_quality_score_reverse [options] [[--] args]
   or: ./gto_fastq_minimum_local_quality_score_reverse [options]

It filters the reverse reads, considering the quality score average of a defined 
window size of bases.

    -h, --help                show this help message and exit

Basic options
    -k, --windowsize=<int>    The window size of bases (default 5)
    -w, --minavg=<int>        The minimum average of quality score (default 25)
    -m, --minqs=<int>         The minimum value of the quality score (default 33)
    < input.fastq             Input FASTQ file format (stdin)
    > output.fastq            Output FASTQ file format (stdout)

Example: ./gto_fastq_minimum_local_quality_score_reverse -k <windowsize> -w <minavg> 
-m <minqs> < input.fastq > output.fastq

Console output example:
Minimum QS       : value
<FASTQ output>
Total reads      : value
Trimmed reads    : value
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGGTTTTCAAATAGA
+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
+SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_minimum\char`_local\char`_quality\char`_score\char`_reverse} program is a FASTQ file with the reads filtered following a quality score average of a defined window of bases.
The execution report only appears in the console.\\
Using the input above with the default values, an output example for this is the following:
\begin{lstlisting}
Minimum QS: 33
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGGTTTTCAAATAGA
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
Total reads    : 2
Trimmed reads  : 1
\end{lstlisting}

% File: gto/manual/sections/FASTQ_tools/FastqMinimumReadSize.tex
\section{Program gto\char`_fastq\char`_minimum\char`_read\char`_size}
The \texttt{gto\char`_fastq\char`_minimum\char`_read\char`_size} filters the FASTQ reads with the length smaller than the value defined.\\
For help type:
\begin{lstlisting}
./gto_fastq_minimum_read_size -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_minimum\char`_read\char`_size} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_minimum_read_size [options] [[--] args]
   or: ./gto_fastq_minimum_read_size [options]

It filters the FASTQ reads with the length smaller than the value defined. 
If present, it will erase the second header (after +).

    -h, --help            show this help message and exit

Basic options
    -s, --size=<int>      The minimum read length
    < input.fastq         Input FASTQ file format (stdin)
    > output.fastq        Output FASTQ file format (stdout)

Example: ./gto_fastq_minimum_read_size -s <size> < input.fastq > output.fastq

Console output example:
<FASTQ non-filtered reads>
Total reads    : value
Filtered reads : value
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGG
+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIII
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
+SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_minimum\char`_read\char`_size} program is a set of all the filtered FASTQ reads, followed by the execution report.
The execution report only appears in the console.\\
Using the input above with the size values as 65, an output example for this is the following:
\begin{lstlisting}
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
Total reads    : 2
Filtered reads : 1
\end{lstlisting}


% File: gto/manual/sections/FASTQ_tools/FastqMutate.tex
\section{Program gto\char`_fastq\char`_mutate}
The \texttt{gto\char`_fastq\char`_mutate} creates a synthetic mutation of a FASTQ file given specific rates of mutations, deletions and additions. All these paramenters are defined by the user, and their are optional.\\
For help type:
\begin{lstlisting}
./gto_fastq_mutate -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_mutate} program needs two streams for the computation, namely the input and output standard. However, optional settings can be supplied too, such as the starting point to the random generator, and the edition, deletion and insertion rates. Also, the user can choose to use the ACGTN alphabet in the synthetic mutation. The input stream is a FASTQ File.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_mutate [options] [[--] args]
   or: ./gto_fastq_mutate [options]

Creates a synthetic mutation of a FASTQ file given specific rates of mutations,
deletions and additions

    -h, --help                    show this help message and exit

Basic options
    < input.fasta                 Input FASTQ file format (stdin)
    > output.fasta                Output FASTQ file format (stdout)

Optional
    -s, --seed=<int>              Starting point to the random generator
    -m, --mutation-rate=<dbl>     Defines the mutation rate (default 0.0)
    -d, --deletion-rate=<dbl>     Defines the deletion rate (default 0.0)
    -i, --insertion-rate=<dbl>    Defines the insertion rate (default 0.0)
    -a, --ACGTN-alphabet          When active, the application uses the ACGTN alphabet

Example: ./gto_fastq_mutate -s <seed> -m <mutation rate> -d <deletion rate> -i 
<insertion rate> -a < input.fastq > output.fastq

\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGGTTTTCAAATAGA
+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
+SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_mutate} program is a FASTQ file whith the synthetic mutation of input file.\\
Using the input above with the seed value as 1 and the mutation rate as 0.5, an output example for this is the following:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GGACTTTGAGGTGTGGCGATAGACTGAAAACACTTCAGGGTAAAATCACTCGCAAAAGTGCTATGGTTATGG
+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGAGCCTTTACCGTAGGGGTGTAAGATTTTATACAAAAAGTCCAGGTCAAGAGGAATCGGACAACCGA
+SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}


% File: gto/manual/sections/FASTQ_tools/FastqPack.tex
\section{Program gto\char`_fastq\char`_pack}
The \texttt{gto\char`_fastq\char`_pack} packages each FASTQ read in a single line. It can show the read score first or the dna sequence, depending on the execution mode. \\
For help type:
\begin{lstlisting}
./gto_fastq_pack -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_pack} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_pack [options] [[--] args]
   or: ./gto_fastq_pack [options]

It packages each FASTQ read in a single line.

    -h, --help            show this help message and exit

Basic options
    < input.fastq         Input FASTQ file format (stdin)
    > output.fastqpack    Output packaged FASTQ file format (stdout)

Optional
    -s, --scores          When active, the application show the scores first

Example: ./gto_fastq_pack -s < input.fastq > output.fastqpack
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GNNTGATGGCCGCTGCCGATGGCGNANAATCCCACCAANATACCCTTAACAACTTAAGGGTTNTCAAATAGA
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
NTTCAGGGATACGACGNTTGTATTTTAAGAATCTGNAGCAGAAGTCGATGATAATACGCGNCGTTTTATCAN
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_pack} program is a packaged FASTQ file.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
GNNTGATGGCCGCTGCCGATGGCGNANAATCCCACCAANATACCCTTAACAACTTAAGGGTTNTCAAATAGA
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72+	0
NTTCAGGGATACGACGNTTGTATTTTAAGAATCTGNAGCAGAAGTCGATGATAATACGCGNCGTTTTATCAN
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72+	1
\end{lstlisting}
Another example for the same input, but using the scores first (flag ''s''), is:
\begin{lstlisting}
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
GNNTGATGGCCGCTGCCGATGGCGNANAATCCCACCAANATACCCTTAACAACTTAAGGGTTNTCAAATAGA
SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72+	0
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
NTTCAGGGATACGACGNTTGTATTTTAAGAATCTGNAGCAGAAGTCGATGATAATACGCGNCGTTTTATCAN
SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72+	1
\end{lstlisting}


% File: gto/manual/sections/FASTQ_tools/FastqQualityScoreInfo.tex
\section{Program gto\char`_fastq\char`_quality\char`_score\char`_info}
The \texttt{gto\char`_fastq\char`_quality\char`_score\char`_info} analyses the quality-scores of a FASTQ file.\\
For help type:
\begin{lstlisting}
./gto_fastq_quality_score_info -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_quality\char`_score\char`_info} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_quality_score_info [options] [[--] args]
   or: ./gto_fastq_quality_score_info [options]

It analyses the quality-scores of a FASTQ file.

    -h, --help            show this help message and exit

Basic options
    < input.fastq         Input FASTQ file format (stdin)
    > output              Output read information (stdout)
    
Optional
    -m, --max=<int>       The lenght of the maximum window

Example: ./gto_fastq_quality_score_info -m <max> < input.fastq > output

Output example :
Total reads     : value
Max read length : value
Min read length : value
Min QS value    : value
Max QS value    : value
QS range        : value
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@111 071112_SLXA-EAS1_s_7:5:1:817:345 length=72 1
GNNTGATGGCCGCTGCCGATGGCGNANAATCCCACCAANATACCCTTAACAACTTAAGGGTTNTCAAATAGA
+111
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@222 071112_SLXA-EAS1_s_7:5:1:801:338 length=72 2
NTTCAGGGATACGACGNTTGTATTTTAAGAATCTGNAGCAGAAGTCGATGATAATACGCGNCGTTTTATCAN
+222
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_quality\char`_score\char`_info} program is a set of information related to the file read. \\
Using the input above with the max window value as 30, an output example for this is the following:
\begin{lstlisting}
Total reads     : 2
Max read length : 72
Min read length : 72
Min QS value    : 41
Max QS value    : 73
QS range        : 33
 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 
--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 
\end{lstlisting}

% File: gto/manual/sections/FASTQ_tools/FastqQualityScoreMax.tex
\section{Program gto\char`_fastq\char`_quality\char`_score\char`_max}
The \texttt{gto\char`_fastq\char`_quality\char`_score\char`_max} analyses the maximal quality-scores of a FASTQ file.\\
For help type:
\begin{lstlisting}
./gto_fastq_quality_score_max -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_quality\char`_score\char`_max} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_quality_score_max [options] [[--] args]
   or: ./gto_fastq_quality_score_max [options]

It analyses the maximal quality-scores of a FASTQ file.

    -h, --help            show this help message and exit

Basic options
    < input.fastq         Input FASTQ file format (stdin)
    > output              Output read information (stdout)

Optional
    -m, --max=<int>       The maximum window length (default 40)

Example: ./gto_fastq_quality_score_max -m <max> < input.fastq > output
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@111 071112_SLXA-EAS1_s_7:5:1:817:345 length=72 1
GNNTGATGGCCGCTGCCGATGGCGNANAATCCCACCAANATACCCTTAACAACTTAAGGGTTNTCAAATAGA
+
IIIIIIIIIIII9IG9ICIIIIIIIIIIIABAAABCIIIIFFGIIAACBBIIIII6IBIIIIIII>IIIIII/
@222 071112_SLXA-EAS1_s_7:5:1:801:338 length=72 2
NTTCAGGGATACGACGNTTGTATTTTAAGAATCTGNAGCAGAAGTCGATGATAATACGCGNCGTTTTATCAN
+
IIIIIIIABAAABCIIIIFFGIIAACBBIIIII6IBIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_quality\char`_score\char`_max} program is a set of information related to the file read, considering the maximal quality scores.\\
Using the input above with the max window value as 30, an output example for this is the following:
\begin{lstlisting}
 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 
--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
73 73 73 73 73 73 73 73 73 73 73 73 66 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 
\end{lstlisting}

% File: gto/manual/sections/FASTQ_tools/FastqQualityScoreMin.tex
\section{Program gto\char`_fastq\char`_quality\char`_score\char`_min}
The \texttt{gto\char`_fastq\char`_quality\char`_score\char`_min} analyses the minimal quality-scores of a FASTQ file.\\
For help type:
\begin{lstlisting}
./gto_fastq_quality_score_min -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_quality\char`_score\char`_min} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_quality_score_min [options] [[--] args]
   or: ./gto_fastq_quality_score_min [options]

It analyses the minimal quality-scores of a FASTQ file.

    -h, --help            show this help message and exit

Basic options
    < input.fastq         Input FASTQ file format (stdin)
    > output              Output read information (stdout)

Optional
    -m, --max=<int>       The maximum window length (default 40)

Example: ./gto_fastq_quality_score_min -m <max> < input.fastq > output
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@111 071112_SLXA-EAS1_s_7:5:1:817:345 length=72 1
GNNTGATGGCCGCTGCCGATGGCGNANAATCCCACCAANATACCCTTAACAACTTAAGGGTTNTCAAATAGA
+
IIIIIIIIIIII9IG9ICIIIIIIIIIIIABAAABCIIIIFFGIIAACBBIIIII6IBIIIIIII>IIIIII/
@222 071112_SLXA-EAS1_s_7:5:1:801:338 length=72 2
NTTCAGGGATACGACGNTTGTATTTTAAGAATCTGNAGCAGAAGTCGATGATAATACGCGNCGTTTTATCAN
+
IIIIIIIABAAABCIIIIFFGIIAACBBIIIII6IBIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_quality\char`_score\char`_min} program is a set of information related to the file read, considering the minimum quality scores.  \\
Using the input above with the max window value as 30, an output example for this is the following:
\begin{lstlisting}
 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 
--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
73 73 73 73 73 73 73 65 66 65 65 65 57 67 71 57 73 67 70 70 71 73 73 65 65 67 66 66 73 65 
\end{lstlisting}

% File: gto/manual/sections/FASTQ_tools/FastqRandExtraChars.tex
\section{Program gto\char`_fastq\char`_rand\char`_extra\char`_chars}
The \texttt{gto\char`_fastq\char`_rand\char`_extra\char`_chars} substitues in the FASTQ files, the DNA sequence the outside ACGT chars by random ACGT symbols.\\
For help type:
\begin{lstlisting}
./gto_fastq_rand_extra_chars -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_rand\char`_extra\char`_chars} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_rand_extra_chars [options] [[--] args]
   or: ./gto_fastq_rand_extra_chars [options]

It substitues in the FASTQ files, the DNA sequence the outside ACGT chars by random ACGT symbols.

    -h, --help            show this help message and exit

Basic options
    < input.fastq         Input FASTQ file format (stdin)
    > output.fastq        Output FASTQ file format (stdout)

Example: ./gto_fastq_rand_extra_chars < input.fastq > output.fastq
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GNNTGATGGCCGCTGCCGATGGCGNANAATCCCACCAANATACCCTTAACAACTTAAGGGTTNTCAAATAGA
+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
NTTCAGGGATACGACGNTTGTATTTTAAGAATCTGNAGCAGAAGTCGATGATAATACGCGNCGTTTTATCAN
+SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_rand\char`_extra\char`_chars} program is a FASTQ file.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GTGTGATGGCCGCTGCCGATGGCGCATAATCCCACCAACATACCCTTAACAACTTAAGGGTTTTCAAATAGA
+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGATTGTATTTTAAGAATCTGCAGCAGAAGTCGATGATAATACGCGCCGTTTTATCAG
+SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}


% File: gto/manual/sections/FASTQ_tools/FastqReverse.tex
\section{Program gto\char`_fastq\char`_reverse}
The \texttt{gto\char`_fastq\char`_reverse} reverses the ACGT bases order for each read in a FASTQ file format.\\
For help type:
\begin{lstlisting}
./gto_fastq_reverse -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_reverse} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_reverse [options] [[--] args]
   or: ./gto_fastq_reverse [options]

It reverses the ACGT bases order for each read in a FASTQ file.

    -h, --help            Show this help message and exit

Basic options
    < input.fastq         Input FASTQ file (stdin)
    > output.fastq        Output FASTQ file (stdout)

Example: ./gto_fastq_reverse < input.fastq > output.fastq
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGGTTTTCAAATAGA
+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
+SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_reverse} program is the FASTQ file complement with the flag ''(Reversed)'' added in the header.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72 (Reversed)
AGATAAACTTTTGGGAATTCAACAATTCCCATTGAACCACCCTAAACTGCGGTAGCCGTCGCCGGTAGTGGG
+
/IIIIII>IIIIIIIDIIIIIIIIIIIIIIIIIIIICI9GI9IIIIIIIIIIIIIIIIIIIIIIIIIIIIII
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72 (Reversed)
TACTATTTTGCTGCGCATAATAGTAGCTGAAGACGAAGTCTAAGAATTTTATGTTTGCAGCATAGGGACTTG
+
I8)I-IIIII>IIGIIIIIIIIIIIIIIIIIIIIIIIBI6IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
\end{lstlisting}

% File: gto/manual/sections/FASTQ_tools/FastqSplit.tex
\section{Program gto\char`_fastq\char`_split}
The \texttt{gto\char`_fastq\char`_split} splits Paired End files according to the direction of the strand ('/1' or '/2'). It writes by default singleton reads as forward stands. \\
For help type:
\begin{lstlisting}
./gto_fastq_split -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_split} program needs a stream for the computation, namely the input standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_split [options] [[--] args]
   or: ./gto_fastq_split [options]

It writes by default singleton reads as forward stands.

    -h, --help            show this help message and exit

Basic options
    -f, --forward=<str>   Output forward file
    -r, --reverse=<str>   Output reverse file
    < input.fastq         Input FASTQ file format (stdin)
    > output         	  Output read information (stdout)

Example: ./gto_fastq_split -f <output_forward.fastq> -r <output_reverse.fastq> < input.fastq > output

Output example :
Total reads      : value
Singleton reads  : value
Forward reads    : value
Reverse reads    : value
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72 1
GNNTGATGGCCGCTGCCGATGGCGNANAATCCCACCAANATACCCTTAACAACTTAAGGGTTNTCAAATAGA
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72 2
NTTCAGGGATACGACGNTTGTATTTTAAGAATCTGNAGCAGAAGTCGATGATAATACGCGNCGTTTTATCAN
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_split} program is a set of information related to the file read.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
Total reads     : 2
Singleton reads : 0
Forward reads   : 65536
Reverse reads   : 1
\end{lstlisting}
Also, this program generates two FASTQ files, with the reverse and forward reads.\\
An example of the forward reads, for the input, is: 
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72 1
GNNTGATGGCCGCTGCCGATGGCGNANAATCCCACCAANATACCCTTAACAACTTAAGGGTTNTCAAATAGA
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
\end{lstlisting}


% File: gto/manual/sections/FASTQ_tools/FastqToFasta.tex
\section{Program gto\char`_fastq\char`_to\char`_fasta}
The \texttt{gto\char`_fastq\char`_to\char`_fasta} converts a FASTQ file format to a pseudo FASTA file. However, it does not align the sequence. Also, it extracts the sequence and adds a pseudo header.\\
For help type:
\begin{lstlisting}
./gto_fastq_to_fasta -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_to\char`_fasta} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_to_fasta [options] [[--] args]
   or: ./gto_fastq_to_fasta [options]

It converts a FASTQ file format to a pseudo FASTA file.
It does NOT align the sequence.
It extracts the sequence and adds a pseudo header.

    -h, --help            show this help message and exit

Basic options
    < input.fastq         Input FASTQ file format (stdin)
    > output.fasta        Output FASTA file format (stdout)

Example: ./gto_fastq_to_fasta < input.fastq > output.fasta
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGGTTTTCAAATAGA
+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
+SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_to\char`_fasta} program a FASTA file.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
> Computed with Fastq2Fasta
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGGTTTTCAAATAGA
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
\end{lstlisting}


% File: gto/manual/sections/FASTQ_tools/FastqToMFasta.tex
\section{Program gto\char`_fastq\char`_to\char`_mfasta}
The \texttt{gto\char`_fastq\char`_to\char`_mfasta} onverts a FASTQ file format to a pseudo Multi-FASTA file. However, it does not align the sequence. Also, it extracts the sequence and adds a pseudo header.\\
For help type:
\begin{lstlisting}
./gto_fastq_to_mfasta -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_to\char`_mfasta} program needs two streams for the computation, namely the input and output standard. The input stream is a FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_to_mfasta [options] [[--] args]
   or: ./gto_fastq_to_mfasta [options]

It converts a FASTQ file format to a pseudo Multi-FASTA file.
It does NOT align the sequence.
It extracts the sequence and adds each header in a Multi-FASTA format.


    -h, --help            show this help message and exit

Basic options
    < input.fastq         Input FASTQ file format (stdin)
    > output.mfasta       Output Multi-FASTA file format (stdout)

Example: ./gto_fastq_to_mfasta < input.fastq > output.mfasta
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGGTTTTCAAATAGA
+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
+SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_to\char`_mfasta} program a Multi-FASTA file.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
>SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGGTTTTCAAATAGA
>SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
\end{lstlisting}


% File: gto/manual/sections/FASTQ_tools/FastqUnpack.tex
\section{Program gto\char`_fastq\char`_unpack}
The \texttt{gto\char`_fastq\char`_unpack} unpacks the FASTQ reads packaged using the \texttt{gto\char`_fastq\char`_pack} tool.\\
For help type:
\begin{lstlisting}
./gto_fastq_unpack -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_unpack} program needs two streams for the computation, namely the input and output standard. The input stream is a packaged FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_unpack [options] [[--] args]
   or: ./gto_fastq_unpack [options]

It unpacks the FASTQ reads packaged using the gto_fastq_pack tool.

    -h, --help            show this help message and exit

Basic options
    < input.fastq         Input FASTQ file format (stdin)
    > output.fastq        Output FASTQ file format (stdout)

Optional
    -s, --scores          When active, the application show the scores first
    
Example: ./gto_fastq_unpack -s < input.fastqpack > output.fastq
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
GNNTGATGGCCGCTGCCGATGGCGNANAATCCCACCAANATACCCTTAACAACTTAAGGGTTNTCAAATAGA
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72+	0
NTTCAGGGATACGACGNTTGTATTTTAAGAATCTGNAGCAGAAGTCGATGATAATACGCGNCGTTTTATCAN
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72+ 1
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_unpack} program is a FASTQ file.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=72
GNNTGATGGCCGCTGCCGATGGCGNANAATCCCACCAANATACCCTTAACAACTTAAGGGTTNTCAAATAGA
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIIIIIII>IIIIII/
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
NTTCAGGGATACGACGNTTGTATTTTAAGAATCTGNAGCAGAAGTCGATGATAATACGCGNCGTTTTATCAN
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}


% File: gto/manual/sections/FASTQ_tools/FastqVariationFilter.tex
\section{Program gto\char`_fastq\char`_variation\char`_filter}
The \texttt{gto\char`_fastq\char`_variation\char`_filter} filters and segments the regions of singularity from the output of \texttt{gto\char`_fastq\char`_variation\char`_map}.\\
For help type:
\begin{lstlisting}
./gto_fastq_variation_filter -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_variation\char`_filter} program needs a the output of \texttt{gto\char`_fastq\char`_variation\char`_map} to compute.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_variation_filter <OPTIONS>... [FILE]:<...>      
./gto_fastq_variation_filter: a tool to filter maps (gto_fastq_variation_map)  
                                                     
  -v                       verbose mode,             
  -a                       about CHESTER,            
  -t <value>               threshold [0.0;1.0],      
  -w <value>               window size,              
  -u <value>               sub-sampling,             
                                                     
  [tFile1]:<tFile2>:<...>  target file(s).           
                                                     
The target files may be generated by gto_fastq_variation_map.    
Report bugs to <{pratas,raquelsilva,ap,pjf}@ua.pt>. 
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
1111111111111111111111111111100000000000000000000000000000001111111111111111111
11111111110000000000000000000000000000000000000000000
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_variation\char`_filter} program is a text file with the coordenates of the segmented regions.\\
Using the inputs above, an output example for this is the following:
\begin{lstlisting}
#132#132
30:60
90:130
\end{lstlisting}

% File: gto/manual/sections/FASTQ_tools/FastqVariationMap.tex
\section{Program gto\char`_fastq\char`_variation\char`_map}
The \texttt{gto\char`_fastq\char`_variation\char`_map} identifies the variation that occours in the sequences relative to the reads or a set of reads.\\
For help type:
\begin{lstlisting}
./gto_fastq_variation_map -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_variation\char`_map} program needs FASTQ, FASTA or SEQ files to be used as reference and target files.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_variation_map <OPTIONS>... [FILE]:<...> [FILE]:<...>
./gto_fastq_variation_map: a tool to map relative singularity regions  
The (probabilistic) Bloom filter is automatically set.   
                                                         
  -v                       verbose mode,                 
  -a                       about CHESTER,                
  -s <value>               bloom size,                   
  -i                       use inversions,               
  -p                       show positions/words,         
  -k <value>               k-mer size (up to 30),        
                                                         
  [rFile1]:<rFile2>:<...>  reference file(s),            
  [tFile1]:<tFile2>:<...>  target file(s).               
                                                         
The reference files may be FASTA, FASTQ or DNA SEQ,      
while the target files may be FASTA OR DNA SEQ.          
Report bugs to <{pratas,raquelsilva,ap,pjf}@ua.pt>.
\end{lstlisting}
An example of a reference file (Multi-FASTA format) is:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCC
CGGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGG
AAGTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGT
GCCGCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCC
CAGCTAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
>AB000263 |acc=AB000263|descr=Homo sapiens mRNA 
ACAAGATGCCATTGTCCCCCGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGG
TGGCCCCACCGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCT
TGGTGGTTTGAGTGGACCTCCCAGGCCAGTGCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGG
AAGGCGCACCCCCCCAGCAATCCGCGCGCCGGGACAGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTG
CAAATAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAA
\end{lstlisting}
An example for the target file (FASTQ format) is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGG
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIII
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_variation\char`_map} program is a text file identifying the relative regions.\\
Using the inputs above, an output example for this is the following:
\begin{lstlisting}
1111111111111111111111111111100000000000000000000000000000001111111111111111111
11111111110000000000000000000000000000000000000000000
\end{lstlisting}

% File: gto/manual/sections/FASTQ_tools/FastqVariationVisual.tex
\section{Program gto\char`_fastq\char`_variation\char`_visual}
The \texttt{gto\char`_fastq\char`_variation\char`_visual} depites the regions of singularity using the output from \texttt{gto\char`_fastq\char`_variation\char`_filter} into an SVG image.\\
For help type:
\begin{lstlisting}
./gto_fastq_variation_visual -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_variation\char`_visual} program needs a the output of \texttt{gto\char`_fastq\char`_variation\char`_filter} to compute.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_variation_visual <OPTIONS>... [FILE]:<...>
./gto_fastq_variation_visual: visualize relative singularity regions.
                                                     
  -v                       verbose mode,             
  -a                       about CHESTER,            
  -e <value>               enlarge painted regions,  
                                                     
  [tFile1]:<tFile2>:<...>  target file(s).           
                                                     
Report bugs to <{pratas,raquelsilva,ap,pjf}@ua.pt>. 
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
#132#132
30:60
90:130
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_variation\char`_visual} program is a SVG plot with the maps.\\
In the Figure~\ref{fig:gtoFastqVariationVisual} is represented the plot using the input above.

\begin{figure}[!h]
\centering
\includegraphics[scale=0.6]{./images/gto_fastq_variation_visual.png}
\caption{\texttt{gto\char`_fastq\char`_variation\char`_visual} execution plot.}
\label{fig:gtoFastqVariationVisual}
\end{figure}

% File: gto/manual/sections/FASTQ_tools/FastqXS.tex
\section{Program gto\char`_fastq\char`_xs}
The \texttt{gto\char`_fastq\char`_xs} is a skilled FASTQ read simulation tool, flexible, portable (does not need a reference sequence) and tunable in terms of sequence complexity. XS handles Ion Torrent, Roche-454, Illumina and ABI-SOLiD simulation sequencing types. It has several running modes, depending on the time and memory available, and is aimed at testing computing infrastructures, namely cloud computing of large-scale projects, and testing FASTQ compression algorithms. Moreover, XS offers the possibility of simulating the three main FASTQ components individually (headers, DNA sequences and quality-scores). Quality-scores can be simulated using uniform and Gaussian distributions.\\
For help type:
\begin{lstlisting}
./gto_fastq_xs -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_fastq\char`_xs} program needs a FASTQ file to compute.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_fastq_xs   [OPTION]... [FILE] 

System options:
 -h                       give this help
 -v                       verbose mode

Main FASTQ options:
 -t  <sequencingType>     type: 1=Roche-454, 2=Illumina, 3=ABI SOLiD, 4=Ion Torrent
 -hf <headerFormat>       header format: 1=Length appendix, 2=Pair End
 -i  n=<instrumentName>   the unique instrument name (use n= before name)
 -o                       use the same header in third line of the read
 -ls <lineSize>           static line (bases/quality scores) size
 -ld <minSize>:<maxSize>  dynamic line (bases/quality scores) size
 -n  <numberOfReads>      number of reads per file

DNA options:
 -f  <A>,<C>,<G>,<T>,<N>  symbols frequency
 -rn <numberOfRepeats>    repeats: number (default: 0)
 -ri <repeatsMinSize>     repeats: minimum size
 -ra <repeatsMaxSize>     repeats: maximum size
 -rm <mutationRate>       repeats: mutation frequency
 -rr                      repeats: use reverse complement repeats

Quality scores options:
 -qt <assignmentType>     quality scores distribution: 1=uniform, 2=gaussian
 -qf <statsFile>          load file: mean, standard deviation (when: -qt 2)
 -qc <template>           custom template ascii alphabet

Filtering options:
 -eh                      excludes the use of headers from output
 -eo                      excludes the use of optional headers (+) from output
 -ed                      excludes the use of DNA bases from output
 -edb                     excludes '\n' when DNA bases line size is reached
 -es                      excludes the use of quality scores from output

Stochastic options:
 -s  <seed>               generation seed

<genFile>                 simulated output file

Common usage:
 ./XS -v -t 1 -i n=MySeq -ld 30:80 -n 20000 -qt=1 -qc 33,36,39:43 File
 ./XS -v -ls 100 -n 10000 -eh -eo -es -edb -f 0.3,0.2,0.2,0.3,0.0 -rn 50 -ri 300 -ra 3000 -rm 0.1 File
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=60
GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACCAAGTTACCCTTAACAACTTAAGGG
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICIIIIIIIIIIIIIIIIIIIIDIII
@SRR001666.2 071112_SLXA-EAS1_s_7:5:1:801:338 length=72
GTTCAGGGATACGACGTTTGTATTTTAAGAATCTGAAGCAGAAGTCGATGATAATACGCGTCGTTTTATCAT
+
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII6IBIIIIIIIIIIIIIIIIIIIIIIIGII>IIIII-I)8I
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_fastq\char`_xs} program is a FASTQ file\\
Using the input above using the common usage with 5 reads (-n 5), an output example for this is the following:
\begin{lstlisting}
@output.fastq.598 LQGQLWH01D5WVZ length=62
TTCNTNCCAGGTAAAGAGAACATNCCGNCGCACTACTCGTAAGACTTGCTGGNCGAGAAAGG
+
)(+!*!$')($(()+'))$$()'!)!$!!$*+)+''('!)))!+!)(!+!*$!'$*)**++!
@output.fastq.1510 LQGQLWH01A7LJI length=57
CTAGACTACTCGAGCACTAGGCTCGCGTNTACCANGGGGNCTGCGNGTTGGCNCGGT
+
)+(*(+$*)+!*)!'!!(!(!!(*'$!+!(()$'!!+*+!!))!*!')***+!$+''
@output.fastq.2153 LQGQLWH01CHBQJ length=33
ACTTTTTGCTCAAGCAGGGTTGCCTAGCAANAC
+
*)++!+$''')*)**!+)$(*((*)$!'!+!!*
@output.fastq.3251 LQGQLWH01C8OY4 length=75
TCTTTCCTTCNCGNCCNAATTCCCCATAANAACTTAAAATCNCNNGCTGCGCGTGATCAACAATATTAATACTCC
+
!*''+*'!''!+!!!*!'!+(++)*(*($!!*((')$*!$(!'!!'+)$+*!$*!**!'()$!*'+'*'+!!+'(
@output.fastq.3934 LQGQLWH01AQDXM length=36
GGTAACNNGGAATTCTTCCAATTANCCNTGTCCGGC
+
$+)'!'!!)+)+!''**$$*!!')!+)!)*()!))$
\end{lstlisting}

% File: gto/manual/sections/General_purpose_tools/BruteForceString.tex
\section{Program gto\char`_brute\char`_force\char`_string}
The \texttt{gto\char`_brute\char`_force\char`_string} generates all combinations, line by line, for an inputted alphabet and specific size.\\
For help type:
\begin{lstlisting}
./gto_brute_force_string -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_brute\char`_force\char`_string} program needs some paramenters for the computation, namely the alphabet and the key size.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_brute_force_string [options] [[--] args]
   or: ./gto_brute_force_string [options]

It generates all combinations, line by line, for an inputted alphabet and specific size.

    -h, --help            show this help message and exit

Basic options
    -a, --alphabet=<str>  The input alphabet
    -s, --size=<int>      The combinations size
    > output              Output all the combinations (stdout)

Example: ./gto_brute_force_string -a <alphabet> -s <size> > output
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_brute\char`_force\char`_string} program is a set of all possible word combinations with a defined size, using the input alphabet.\\
Using the input above with the alphabet ''abAB'' with the word size of 3, an output example for this is the following:
\begin{lstlisting}
aaa
aab
aaA
aaB
aba
...
BBb
BBA
BBB
\end{lstlisting}

% File: gto/manual/sections/General_purpose_tools/CharToLine.tex
\section{Program gto\char`_char\char`_to\char`_line}
The \texttt{gto\char`_char\char`_to\char`_line} splits a sequence into lines, creating an output sequence which has a char for each line.\\
For help type:
\begin{lstlisting}
./gto_char_to_line -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_char\char`_to\char`_line} program needs two streams for the computation, namely the input and output standard. The input stream is a sequence file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_char_to_line [options] [[--] args]
   or: ./gto_char_to_line [options]

It splits a sequence into lines, creating an output sequence which has a char for each line.

    -h, --help        show this help message and exit

Basic options
    < input.seq       Input sequence file (stdin)
    > output.seq      Output sequence file (stdout)

Example: ./gto_char_to_line < input.seq > output.seq
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAAACAAGATGCCATTGTCCCCCGGCCTCCTGCTG
CTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGGTGGCCCCACCGGCCGAGACAGCGAGCATATGCA
GGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGTGGTTTGAGTGGACCTCCCAGGCCAGTGCCG
GGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGGCGCACCCCCCCAGCAATCCGCGCGCCGGGAC
AGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAATAAAACCTCACCCATGAATGCTCACGCAAGTT
TAATTACAGACCTGAA
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_char\char`_to\char`_line} program is a group sequence splited by \textbackslash n foreach character.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
A
C
A
A
G
A
C
G
G
C
C
T
C
C
T
G
C
T
G
C
T
...
\end{lstlisting}

% File: gto/manual/sections/General_purpose_tools/ComparativeMap.tex
\section{Program gto\char`_comparative\char`_map}
The \texttt{gto\char`_comparative\char`_map} creates a visualization for comparative maps.\\
For help type:
\begin{lstlisting}
./gto_comparative_map -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_comparative\char`_map} program needs an input file with the plot positions, respecting a defined structure.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_comparative_map [options] [[--] args]                        
   or: ./gto_comparative_map [options]                                    
                                                                          
It creates a visualization for comparative maps.                          
                                                                          
    -h, --help            Show this help message and exit                 
                                                                          
Basic options                                                             
    <FILE>                Contigs filename with positions (.pos),         
                                                                          
Optional                                                                  
                                                                          
    -h                    Give this help,                                 
    -V                    Display version number,                         
    -v                    Verbose mode (more information),                
    -l <link>             Link type between maps [0;4],                   
    -w <width>            Chromosome width,                               
    -s <space>            Space between chromosomes,                      
    -m <mult>             Color id multiplication factor,                 
    -b <begin>            Color id beggining,                             
    -c <minimum>          Minimum block size to consider,                 
    -i                    Do NOT show inversion maps,                     
    -r                    Do NOT show regular maps,                       
    -o <FILE>             Output image filename with map,                 
                                                                          
Example: ./gto_comparative_map -o map.svg map.config 
\end{lstlisting}
%The input file needs to have the following structure:
%\begin{lstlisting}
%todo
%\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
#SCF    5000000 5000000
aaa     1       1000000 1       1000000 bbbb    3000000 4000000 3000000 4000000
bbb     1500000 2000000 1500000 2000000 cccc    1500000 2000000 1500000 2000000
aaa     2000000 3000000 2000000 3000000 bbbb    3000000 2000000 3000000 2000000
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_comparative\char`_map} program is a executing report, and a svg plot with the maps.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
==[ PROCESSING ]====================
Printing plot ...
Found 2 regular regions. 
Found 1 inverted regions.
Done!                       

==[ STATISTICS ]====================
Total cpu time: 0 second(s).
\end{lstlisting}

In the Figure~\ref{fig:gtoComparativeMap} is represented the plot for the execution above.

 \begin{figure}[!h]
  \centering
  \includegraphics[scale=0.6]{./images/gto_comparative_map.png}
  \caption{\texttt{gto\char`_comparative\char`_map} execution plot.}
  \label{fig:gtoComparativeMap}
 \end{figure}

% File: gto/manual/sections/General_purpose_tools/Filter.tex
\section{Program gto\char`_filter}
The \texttt{gto\char`_filter} filters numerical sequences using a low-pass filter.\\
For help type:
\begin{lstlisting}
./gto_filter -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_filter} program needs two streams for the computation, namely the input and output standard. The input stream is a numeric file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_filter [options] [[--] args]
   or: ./gto_filter [options]

It filters numerical sequences using a low-pass filter.

    -h, --help                show this help message and exit

Basic options
    < input.num               Input numeric file (stdin)
    > output.num              Output numeric file (stdout)

Optional
    -w, --windowsize=<int>    Window size (defaut 0)
    -d, --drop=<int>          Discard elements (default 0.0)
    -t, --windowtype=<int>    Window type (0=Hamm, 1=Hann, 2=Black, 3=rec) (default 0 (Hamm))
    -c, --onecolumn           Read from one column
    -p, --printone            Print one column
    -r, --reverse             Reverse mode

Example: ./gto_filter -w <windowsize> -d <drop> -t <windowtype> -c -p -r < input.num > output.num
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
1   1.77
5   2.18
10  2.32
15  3.15
20  2.52
25  4.43
30  1.23
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_filter} program is a numeric file, identical of the input.\\
Using the input above with the window size of 3, an output example for this is the following:
\begin{lstlisting}
Got 7 entries from file
1   2.085
5   2.256
10  2.507
15  2.757
20  2.905
25  2.860
30  2.674
\end{lstlisting}

% File: gto/manual/sections/General_purpose_tools/General_purpose_tools.tex
\chapter{General purpose tools}
\label{seq}
The toolkit also has a set of tools with a more general-purpose, which were not designed to work with a specific data format. Instead, it was developed as an auxiliary component to help the construction of pipelines combining all the described subsets. This contains tools for char manipulations, such as reversing, segmentation and permutation, for manipulating numerical scores, such sum, filter, calculate the min and the max of a numeric matrix mainly originated from the tools' outputs. The current available tools for general purposes are:
\begin{enumerate}

\item \texttt{gto\char`_char\char`_to\char`_line}: it splits a sequence into lines, creating an output sequence which has a char for each line.

\item \texttt{gto\char`_new\char`_line\char`_on\char`_new\char`_x}: it splits different rows with a new empty row.

\item \texttt{gto\char`_upper\char`_bound}: it sets an upper bound in a file with a value per line.

\item \texttt{gto\char`_lower\char`_bound}: it sets an lower bound in a file with a value per line.

\item \texttt{gto\char`_brute\char`_force\char`_string}: it generates all combinations, line by line, for an inputted alphabet and specific size.

\item \texttt{gto\char`_real\char`_to\char`_binary\char`_with\char`_threshold}: it converts a sequence of real numbers into a binary sequence, given a threshold.

\item \texttt{gto\char`_sum}: it adds decimal values in file, line by line, splitted by spaces or tabs.

\item \texttt{gto\char`_filter}: it filters numerical sequences.

\item \texttt{gto\char`_word\char`_search}: it search for a word in a file.

\item \texttt{gto\char`_permute\char`_by\char`_blocks}: it permutates by block sequence, FASTA and Multi-FASTA files. 

\item \texttt{gto\char`_info}: it gives the basic properties of the file, namely size, cardinality, distribution percentage of the symbols, among others.

\item \texttt{gto\char`_segment}: it segments a filtered sequence based on a threshold.

\item \texttt{gto\char`_comparative\char`_map}: it creates a visualization for comparative maps.

\item \texttt{gto\char`_max}: it computes the maximum value in each row between two files.

\item \texttt{gto\char`_min}: it computes the minimum value in each row between two files.

\end{enumerate}

\input{\GeneralPurposeToolsPath/CharToLine.tex}
\input{\GeneralPurposeToolsPath/NewLineForNewValue.tex}
\input{\GeneralPurposeToolsPath/UpperBound.tex}
\input{\GeneralPurposeToolsPath/LowerBound.tex}
\input{\GeneralPurposeToolsPath/BruteForceString.tex}
\input{\GeneralPurposeToolsPath/RealToBinaryWithThreshold.tex}
\input{\GeneralPurposeToolsPath/Sum.tex}
\input{\GeneralPurposeToolsPath/Filter.tex}
\input{\GeneralPurposeToolsPath/WordSearch.tex}
\input{\GeneralPurposeToolsPath/PermuteByBlocks.tex}
\input{\GeneralPurposeToolsPath/Info.tex}
\input{\GeneralPurposeToolsPath/Segment.tex}
\input{\GeneralPurposeToolsPath/ComparativeMap.tex}
\input{\GeneralPurposeToolsPath/Max.tex}
\input{\GeneralPurposeToolsPath/Min.tex}


% File: gto/manual/sections/General_purpose_tools/Info.tex
\section{Program gto\char`_info}
The \texttt{gto\char`_info} gives the basic properties of the file, namely size, cardinality, distribution percentage of the symbols, among others.\\
For help type:
\begin{lstlisting}
./gto_info -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_info} program needs two streams for the computation, namely the input and output standard. The input stream is a file withou any specific format.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_info [options] [[--] args]
   or: ./gto_info [options]

It gives the basic properties of the file, namely size, cardinality, distribution 
percentage of the symbols, among others.

    -h, --help    show this help message and exit

Basic options
    < input       Input file (stdin)
    > output      Output read information (stdout)

Optional
    -a, --ascii   When active, the application shows the ASCII codes

Example: ./gto_info < input > output

Output example :
Number of symbols  : value
Alphabet size      : value
Alphabet           : value
Symbol distribution:
<Symbol/Code ASCII>  <Symbol count>  <Distribution percentage>
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCGCAACACGCAAGTTTAATTCGCAAGTTAGACCTGAACGGGAGGTGGCCACGCAAGTT
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_info} program is a set of information related to the file read. \\
Using the input above, an output example for this is the following:
\begin{lstlisting}
Number of symbols  : 453
Alphabet size      : 28
Alphabet           :|srponmiedcaTRNHGCBA>=6420 \n
Symbol distribution:
|  : 	2		0.4415011
s  : 	3		0.66225166
r  : 	1		0.22075055
p  : 	1		0.22075055
o  : 	2		0.4415011
n  : 	1		0.22075055
m  : 	2		0.4415011
i  : 	1		0.22075055
e  : 	2		0.4415011
d  : 	1		0.22075055
c  : 	3		0.66225166
a  : 	2		0.4415011
T  : 	66		14.569536
R  : 	1		0.22075055
N  : 	1		0.22075055
H  : 	1		0.22075055
G  : 	117		25.827815
C  : 	131		28.918322
B  : 	2		0.4415011
A  : 	89		19.646799
>  : 	1		0.22075055
=  : 	2		0.4415011
6  : 	2		0.4415011
4  : 	2		0.4415011
2  : 	2		0.4415011
0  : 	6		1.3245033
   : 	4		0.88300221
\n : 	5		1.1037528
\end{lstlisting}


% File: gto/manual/sections/General_purpose_tools/LowerBound.tex
\section{Program gto\char`_lower\char`_bound}
The \texttt{gto\char`_lower\char`_bound} sets an lower bound in a file with a value per line.\\
For help type:
\begin{lstlisting}
./gto_lower_bound -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_lower\char`_bound} program needs two streams for the computation, namely the input and output standard. The input stream is a numeric file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_lower_bound [options] [[--] args]
   or: ./gto_lower_bound [options]

It sets an lower bound in a file with a value per line.

    -h, --help                show this help message and exit

Basic options
    -l, --lowerbound=<int>    The lower bound value
    < input.num               Input numeric file (stdin)
    > output.num              Output numeric file (stdout)

Example: ./gto_lower_bound -l <lowerbound> < input.num > output.num
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
0.123
3.432
2.341
1.323
7.538
4.122
0.242
0.654
5.633
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_lower\char`_bound} program is a set of numbers truncated at the a defined lower bound.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
Using lower bound: 2
2.000000
3.432000
2.341000
2.000000
7.538000
4.122000
2.000000
2.000000
5.633000
\end{lstlisting}

% File: gto/manual/sections/General_purpose_tools/Max.tex
\section{Program gto\char`_max}
The \texttt{gto\char`_max} computes the maximum value in each row between two files.\\
For help type:
\begin{lstlisting}
./gto_max -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_max} program needs two streams for the computation, namely the input, which are two decimal files.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_max [options] [[--] args]
   or: ./gto_max [options]

It computes the maximum value in each row between two files.

    -h, --help                Show this help message and exit

Basic options
    -f, --first_file=<str>    File to compute the max
    -s, --second_file=<str>   The second file to do the max computation
    > output.num              Output numeric file (stdout)

Example: ./gto_max -f input1.num -s input2.num > output.num
\end{lstlisting}
An example of such an input files are:\\
File 1:
\begin{lstlisting}
0.123
3.432
2.341
1.323
7.538
4.122
0.242
0.654
5.633
\end{lstlisting}
File 2:
\begin{lstlisting}
2.123
5.312
2.355
0.124
1.785
3.521
0.532
7.324
2.312
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_max} program is the numeric file with the maximum value for each row between both input files.\\
Executing the application with the provided input, the output of this execution is:
\begin{lstlisting}
2.123000
5.312000
2.355000
1.323000
7.538000
4.122000
0.532000
7.324000
5.633000
\end{lstlisting}

% File: gto/manual/sections/General_purpose_tools/Min.tex
\section{Program gto\char`_min}
The \texttt{gto\char`_min} computes the minium value in each row between two files.\\
For help type:
\begin{lstlisting}
./gto_min -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_min} program needs two streams for the computation, namely the input, which are two decimal files.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_min [options] [[--] args]
   or: ./gto_min [options]

It computes the minimum value in each row between two files.

    -h, --help                Show this help message and exit

Basic options
    -f, --first_file=<str>    File to compute the max
    -s, --second_file=<str>   The second file to do the max computation
    > output.num              Output numeric file (stdout)

Example: ./gto_min -f input1.num -s input2.num > output.num
\end{lstlisting}
An example of such an input files are:\\
File 1:
\begin{lstlisting}
0.123
3.432
2.341
1.323
7.538
4.122
0.242
0.654
5.633
\end{lstlisting}
File 2:
\begin{lstlisting}
2.123
5.312
2.355
0.124
1.785
3.521
0.532
7.324
2.312
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_min} program is the numeric file with the minimum value for each row between both input files.\\
Executing the application with the provided input, the output of this execution is:
\begin{lstlisting}
0.123000
3.432000
2.341000
0.124000
1.785000
3.521000
0.242000
0.654000
2.312000
\end{lstlisting}

% File: gto/manual/sections/General_purpose_tools/NewLineForNewValue.tex
\section{Program gto\char`_new\char`_line\char`_on\char`_new\char`_x}
The \texttt{gto\char`_new\char`_line\char`_on\char`_new\char`_x} splits different rows with a new empty row.\\
For help type:
\begin{lstlisting}
./gto_new_line_on_new_x -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_new\char`_line\char`_on\char`_new\char`_x} program needs two streams for the computation, namely the input and output standard. The input stream is a matrix file format with 3 columns.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_new_line_on_new_x [options] [[--] args]
   or: ./gto_new_line_on_new_x [options]

It splits different rows with a new empty row.

    -h, --help    show this help message and exit

Basic options
    < input       Input file with 3 column matrix format (stdin)
    > output      Output file with 3 column matrix format (stdout)

Example: ./gto_new_line_on_new_x < input > output
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
1	2	2
1	2	2
4	4	1
10	12	2
15	15	1
45	47	3
45	47	3
45	47	3
45	47	3
55	55	1
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_new\char`_line\char`_on\char`_new\char`_x} program is a 3 column matrix, with an empty line between different rows.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
1.000000	2.000000	2.000000
1.000000	2.000000	2.000000

4.000000	4.000000	1.000000

10.000000	12.000000	2.000000

15.000000	15.000000	1.000000

45.000000	47.000000	3.000000
45.000000	47.000000	3.000000
45.000000	47.000000	3.000000
45.000000	47.000000	3.000000

55.000000	55.000000	1.000000
\end{lstlisting}


% File: gto/manual/sections/General_purpose_tools/PermuteByBlocks.tex
\section{Program gto\char`_permute\char`_by\char`_blocks}
The \texttt{gto\char`_permute\char`_by\char`_blocks} permutates by block sequence, FASTA and Multi-FASTA files.\\
For help type:
\begin{lstlisting}
./gto_ -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_permute\char`_by\char`_blocks} program needs two streams for the computation, namely the input and output standard. The input stream is a sequence, FASTA or Multi-FASTA file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_permute_by_blocks [options] [[--] args]
   or: ./gto_permute_by_blocks [options]

It permutates by block sequence, FASTA and Multi-FASTA files.

    -h, --help            show this help message and exit

Basic options
    -b, --numbases=<int>  The number of bases in each block
    -s, --seed=<int>      Starting point to the random generator
    < input               Input sequence, FASTA or Multi-FASTA file format (stdin)
    > output              Output sequence, FASTA or Multi-FASTA file format (stdout)

Example: ./gto_permute_by_blocks -b <numbases> -s <seed> < input.fasta > output.fasta
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
>AB000264 |acc=AB000264|descr=Homo sapiens mRNA 
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCGCAACACGCAAGTTTAATTCGCAAGTTAGACCTGAACGGGAGGTGGCCACGCAAGTT
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_permute\char`_by\char`_blocks} program is a sequence, FASTA or Multi-FASTA file permuted following some parameters.\\
Using the input above with the base number as 80, an output example for this is the following:
\begin{lstlisting}
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
TAAAACCTCACCCATGAATGCTCGCAACACGCAAGTTTAATTCGCAAGTTAGACCTGAACGGGAGGTGGCCACGCAAGTT
\end{lstlisting}

% File: gto/manual/sections/General_purpose_tools/RealToBinaryWithThreshold.tex
\section{Program gto\char`_real\char`_to\char`_binary\char`_with\char`_threshold}
The \texttt{gto\char`_real\char`_to\char`_binary\char`_with\char`_threshold} converts a sequence of real numbers into a binary sequence, given a threshold. The numbers below to the threshold will be 0.\\
For help type:
\begin{lstlisting}
./gto_real_to_binary_with_threshold -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_real\char`_to\char`_binary\char`_with\char`_threshold} program needs two streams for the computation, namely the real sequence as input. These numbers should be splitted by lines.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_real_to_binary_with_threshold [options] [[--] args]
   or: ./gto_real_to_binary_with_threshold [options]

It converts a sequence of real numbers into a binary sequence given a threshold.

    -h, --help                show this help message and exit

Basic options
    -t, --threshold=<dbl>     The threshold in real format
    < input.num               Input numeric file (stdin)
    > output.bin              Output binary file (stdout)

Example: ./gto_real_to_binary_with_threshold -t <threshold> < input.num > output.bin
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
12.25
1.2
5.44
5.51
7.97
2.34
8.123
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_real\char`_to\char`_binary\char`_with\char`_threshold} program is a binary sequence.\\
Using the input above with the threshold of 5.5, an output example for this is the following:
\begin{lstlisting}
1
0
0
1
1
0
1
\end{lstlisting}

% File: gto/manual/sections/General_purpose_tools/Segment.tex
\section{Program gto\char`_segment}
The \texttt{gto\char`_segment} segments a filtered sequence based on a threshold.\\
For help type:
\begin{lstlisting}
./gto_segment -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_segment} program needs two streams for the computation, namely the input and output standard. The input stream is a numeric file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_segment [options] [[--] args]
   or: ./gto_segment [options]

It segments a filtered sequence.

    -h, --help                show this help message and exit

Basic options
    -t, --threshold=<dbl>     The segment threshold
    < input.num               Input numeric file (stdin)
    > output                  Output the segment file (stdout)

Example: ./gto_segment -t <threshold> < input.num > output
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
1   1.77
5   2.18
10  2.32
15  3.15
20  2.52
25  4.43
30  1.23
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_segment} program is the interval of values below the threshold.\\
Using the input above with a threshold of 3, an output example for this is the following:
\begin{lstlisting}
0:10
\end{lstlisting}

% File: gto/manual/sections/General_purpose_tools/Sum.tex
\section{Program gto\char`_sum}
The \texttt{gto\char`_sum} adds decimal values in file, line by line, splitted by spaces or tabs.\\
For help type:
\begin{lstlisting}
./gto_sum -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_sum} program needs two streams for the computation, namely the input, which is a decimal file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_sum [options] [[--] args]
   or: ./gto_sum [options]

It adds decimal values in file, line by line, splitted by spaces or tabs.

    -h, --help        show this help message and exit

Basic options
    < input.num       Input numeric file (stdin)
    > output.num      Output numeric file (stdout)

Optional
    -r, --sumrows     When active, the application adds all the values line by line
    -a, --sumall      When active, the application adds all values

Example: ./gto_sum -a < input.num > output.num
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
0.123	5	5
3.432
2.341   3   2
1.323
7.538	5
4.122
0.242 
0.654
5.633	10
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_sum} program is a sum of the elements in the input file.\\
Executing the application with the provided input and with the flag to add only the elements in each row, the output of this execution is:
\begin{lstlisting}
10.123000
3.432000
7.341000
1.323000
12.538000
4.122000
0.242000
0.654000
15.633000
\end{lstlisting}

% File: gto/manual/sections/General_purpose_tools/UpperBound.tex
\section{Program gto\char`_upper\char`_bound}
The \texttt{gto\char`_upper\char`_bound} sets an upper bound in a file with a value per line.\\
For help type:
\begin{lstlisting}
./gto_upper_bound -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_upper\char`_bound} program needs two streams for the computation, namely the input and output standard. The input stream is a numeric file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_upper_bound [options] [[--] args]
   or: ./gto_upper_bound [options]

It sets an upper bound in a file with a value per line.

    -h, --help                show this help message and exit

Basic options
    -u, --upperbound=<int>    The upper bound value
    < input.num               Input numeric file (stdin)
    > output.num              Output numeric file (stdout)

Example: ./gto_upper_bound -u <upperbound> < input.num > output.num
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
0.123
3.432
2.341
1.323
7.538
4.122
0.242
0.654
5.633
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_upper\char`_bound} program is a set of numbers truncated at the a defined upper bound.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
Using upper bound: 4
0.123000
3.432000
2.341000
1.323000
4.000000
4.000000
0.242000
0.654000
4.000000
\end{lstlisting}

% File: gto/manual/sections/General_purpose_tools/WordSearch.tex
\section{Program gto\char`_word\char`_search}
The \texttt{gto\char`_word\char`_search} search for a word in a file. It is case sensitive.\\
For help type:
\begin{lstlisting}
./gto_word_search -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_word\char`_search} program needs two streams for the computation, namely the input and output standard. The input stream is a text file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_word_search [options] [[--] args]
   or: ./gto_word_search [options]

Searching for a word in a text file. It is case sensitive.

    -h, --help        show this help message and exit

Basic options
    -w, --word=<str>  Word to search in the file
    < input.txt       Input text file (stdin)
    > output.txt      Output text file (stdout)

Example: ./gto_word_search -w <word> < input.txt > output.txt
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
No guts, no story. Chris Brady
My life is my message. Mahatma Gandhi
Screw it, let’s do it. Richard Branson
Boldness be my friend. William Shakespeare
Keep going. Be all in. Bryan Hutchinson
My life is my argument. Albert Schweitzer
Fight till the last gasp. William Shakespeare
Leave no stone unturned. Euripides
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_word\char`_search} program is a text file with the matching paragraphs and the location of the word found.\\
Using the input above with the word ''Shakespeare'', an output example for this is the following:
\begin{lstlisting}
Found match in range [ 1536 : 2048 ]
Boldness be my friend. William Shakespeare

Found match in range [ 3072 : 3584 ]
Fight till the last gasp. William Shakespeare
\end{lstlisting}

% File: gto/manual/sections/Genomic_sequence_tools/Geco.tex
\section{Program gto\char`_genomic\char`_compressor}
The \texttt{gto\char`_genomic\char`_compressor} is able to provide additional compression gains over several top specific tools, while as an analysis tool, it is able to determine absolute measures, namely for many distance computations, and local measures, such as the information content contained in each element, providing a way to quantify and locate specific genomic events.\\
For help type:
\begin{lstlisting}
./gto_genomic_compressor -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_genomic\char`_compressor} program needs a sequence to compress.\\
The attribution is given according to:
\begin{lstlisting}
SYNOPSIS                                                                
      ./gto_genomic_compressor [OPTION]... -r [FILE] [FILE]:[FILE]:[FILE]:[...]          
                                                                        
SAMPLE                                                                  
      Run Compression         :  ./gto_genomic_compressor -v -l 3 sequence.txt           
      Run Decompression       :  ./gto_genomic_decompressor -v sequence.txt.co             
      Run Information Profile :  ./gto_genomic_compressor -v -l 3 -e sequence.txt        
                                                                        
DESCRIPTION                                                             
      Compress and decompress genomic sequences for storage purposes.   
      Measure an upper bound of the sequences entropy.                  
      Compute information profiles of genomic sequences.                
                                                                        
      -h,  --help                                                       
           usage guide (help menu).                                     
                                                                        
      -V,  --version                                                    
           Display program and version information.                     
                                                                        
      -F,  --force                                                      
           force mode. Overwrites old files.                            
                                                                        
      -v,  --verbose                                                    
           verbose mode (more information).                             
                                                                        
      -x,  --examples                                                   
           show several running examples (parameter examples).          
                                                                        
      -s,  --show-levels                                                
           show pre-computed compression levels (configured parameters).
                                                                        
      -e,  --estimate                                                   
           it creates a file with the extension ".iae" with the       
           respective information content. If the file is FASTA or      
           FASTQ it will only use the "ACGT" (genomic) sequence.      
                                                                        
      -l [NUMBER],  --level [NUMBER]                                    
           Compression level (integer).                                 
           Default level: 5.                                           
           It defines compressibility in balance with computational     
           resources (RAM & time). Use -s for levels perception.        
                                                                        
      -tm [NB_C]:[NB_D]:[NB_I]:[NB_H]:[NB_G]/[NB_S]:[NB_E]:[NB_A]       
           Template of a target context model.                          
           Parameters:                                                  
           [NB_C]: (integer [1;20]) order size of the regular context   
                   model. Higher values use more RAM but, usually, are  
                   related to a better compression score.               
           [NB_D]: (integer [1;5000]) denominator to build alpha, which 
                   is a parameter estimator. Alpha is given by 1/[NB_D].
                   Higher values are usually used with higher [NB_C],   
                   and related to confiant bets. When [NB_D] is one,    
                   the probabilities assume a Laplacian distribution.   
           [NB_I]: (integer {0,1,2}) number to define if a sub-program  
                   which addresses the specific properties of DNA       
                   sequences (Inverted repeats) is used or not. The     
                   number 2 turns ON this sub-program without the       
                   regular context model (only inverted repeats). The   
                   number 1 turns ON the sub-program using at the same  
                   time the regular context model. The number 0 does    
                   not contemple its use (Inverted repeats OFF). The    
                   use of this sub-program increases the necessary time 
                   to compress but it does not affect the RAM.          
           [NB_H]: (integer [1;254]) size of the cache-hash for deeper  
                   context models, namely for [NB_C] > 14. When the     
                   [NB_C] <= 14 use, for example, 1 as a default. The   
                   RAM is highly dependent of this value (higher value  
                   stand for higher RAM).                               
           [NB_G]: (real [0;1)) real number to define gamma. This value 
                   represents the decayment forgetting factor of the    
                   regular context model in definition.                 
           [NB_S]: (integer [0;20]) maximum number of editions allowed  
                   to use a substitutional tolerant model with the same 
                   memory model of the regular context model with       
                   order size equal to [NB_C]. The value 0 stands for   
                   turning the tolerant context model off. When the     
                   model is on, it pauses when the number of editions   
                   is higher that [NB_C], while it is turned on when    
                   a complete match of size [NB_C] is seen again. This  
                   is probabilistic-algorithmic model very usefull to   
                   handle the high substitutional nature of genomic     
                   sequences. When [NB_S] > 0, the compressor used more 
                   processing time, but uses the same RAM and, usually, 
                   achieves a substantial higher compression ratio. The 
                   impact of this model is usually only noticed for     
                   [NB_C] >= 14.                                        
           [NB_E]: (integer [1;5000]) denominator to build alpha for    
                   substitutional tolerant context model. It is         
                   analogous to [NB_D], however to be only used in the  
                   probabilistic model for computing the statistics of  
                   the substitutional tolerant context model.           
           [NB_A]: (real [0;1)) real number to define gamma. This value 
                   represents the decayment forgetting factor of the    
                   substitutional tolerant context model in definition. 
                   Its definition and use is analogus to [NB_G].        
                                                                        
      ... (you may use several target models with custom parameters)    
                                                                        
      -rm [NB_C]:[NB_D]:[NB_I]:[NB_H]:[NB_G]/[NB_S]:[NB_E]:[NB_A]       
           Template of a reference context model.                       
           Use only when -r [FILE] is set (referential compression).    
           Parameters: the same as in -tm.                              
                                                                        
      ... (you may use several reference models with custom parameters) 
                                                                        
      -r [FILE], --reference [FILE]                                     
           Reference sequence filename ("-rm" are trainned here).     
           Example: -r file1.txt.                                       
                                                                        
      [FILE]                                                            
           Input sequence filename (to compress) -- MANDATORY.          
           File(s) to compress (last argument).                         
           For more files use splitting ":" characters.               
           Example: file1.txt:file2.txt:file3.txt.
\end{lstlisting}
In the following example, it will be downloaded seventeen DNA sequences, and compress and decompress one of the smallest (BuEb). Finally, it compares if the uncompressed sequence is equal to the original.
\begin{lstlisting}
wget http://sweet.ua.pt/pratas/datasets/DNACorpus.zip
unzip DNACorpus.zip
cp DNACorpus/BuEb .
../../bin/gto_genomic_compressor -v -l 2 BuEb
../../bin/gto_genomic_decompressor -v BuEb.co 
cmp BuEb BuEb.de -l
\end{lstlisting}

% File: gto/manual/sections/Genomic_sequence_tools/GenomicComplement.tex
\section{Program gto\char`_genomic\char`_complement}
The \texttt{gto\char`_genomic\char`_complement} replaces the ACGT bases with their complements in a DNA sequence. It works in sequence file formats.\\
For help type:
\begin{lstlisting}
./gto_genomic_complement -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_genomic\char`_complement}  program needs two paramenters, namely the input and output standard. The input stream is a sequence file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_genomic_complement [options] [[--] args]
   or: ./gto_genomic_complement [options]

It replaces the ACGT bases with their complements in a DNA sequence.
It works in sequence file formats


    -h, --help        Show this help message and exit

Basic options
    < input.seq       Input sequence file (stdin)
    > output.seq      Output sequence file (stdout)

Example: ./gto_genomic_complement < input.seq > output.seq
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
TCTTTACTCGCGCGTTGGAGAAATACAATAGTGCGGCTCTGTCTCCTTATGAAGTCAACAATTTCGCTGGGACTTGCGG
CTCTTTACTCGCGCGTTGGAGAAATACAATAGTGCGGCTCTGTCTCCTTATGAAGTCAACAATTTCGCTGGGACTTGCG
GCGACTTCATCGTGGTCTCTGTCATTATGCGCTCCAACGCATAACTTTGCGCCAGAAGATAGATAGAATGGTGTAAGAA
ACTGTAATATATATAATGAACTTCGGCGAGTCTGTGGAGTTTTTGTTGCATTAGAGAGCCAAGAGGTCGGACGTCCTCA
CGTAGCCCGAGACGGGCAGGGCGATGGCGACTGAACGGGCTCCATATCACTTTGAGCTTTTATGCTTTCGACTCCTCCA
GGAGCTGAACAACCTTGTTCCCGGCAAAGCCCACTGCGTCATGGAGCTCACGGTCTACATTCATGACTGACTAACCGTA
AACTGC
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_genomic\char`_complement} program is a group sequence with the ACGT base complements.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
AGAAATGAGCGCGCAACCTCTTTATGTTATCACGCCGAGACAGAGGAATACTTCAGTTGTTAAAGCGACCCTGAACGCC
GAGAAATGAGCGCGCAACCTCTTTATGTTATCACGCCGAGACAGAGGAATACTTCAGTTGTTAAAGCGACCCTGAACGC
CGCTGAAGTAGCACCAGAGACAGTAATACGCGAGGTTGCGTATTGAAACGCGGTCTTCTATCTATCTTACCACATTCTT
TGACATTATATATATTACTTGAAGCCGCTCAGACACCTCAAAAACAACGTAATCTCTCGGTTCTCCAGCCTGCAGGAGT
GCATCGGGCTCTGCCCGTCCCGCTACCGCTGACTTGCCCGAGGTATAGTGAAACTCGAAAATACGAAAGCTGAGGAGGT
CCTCGACTTGTTGGAACAAGGGCCGTTTCGGGTGACGCAGTACCTCGAGTGCCAGATGTAAGTACTGACTGATTGGCAT
TTGACG
\end{lstlisting}

% File: gto/manual/sections/Genomic_sequence_tools/GenomicCountBases.tex
\section{Program gto\char`_genomic\char`_count\char`_bases}
The \texttt{gto\char`_genomic\char`_count\char`_bases} counts the number of bases in sequence, FASTA or FASTQ files.\\
For help type:
\begin{lstlisting}
./gto_genomic_count_bases -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_genomic\char`_count\char`_bases} program needs two streams for the computation, namely the input and output standard. The input stream is a sequence, FASTA or FASTQ file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_genomic_count_bases [options] [[--] args]
   or: ./gto_genomic_count_bases [options]

It counts the number of bases in sequence, FASTA or FASTQ files.

    -h, --help    Show this help message and exit

Basic options
    < input       Input sequence, FASTA or FASTQ file format (stdin)
    > output      Output read information (stdout)

Example: ./gto_genomic_count_bases < input.seq > output

Output example :
File type        : value
Number of bases  : value
Number of a/A    : value
Number of c/C    : value
Number of g/G    : value
Number of t/T    : value
Number of n/N    : value
Number of others : value
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
TCTTTACTCGCGCGTTGGAGAAATACAATAGTGCGGCTCTGTCTCCTTATGAAGTCAACAATTTCGCTGGGACTTGCGGC
TCTTTACTCGCGCGTTGGAGAAATACAATAGTGCGGCTCTGTCTCCTTATGAAGTCAACAATTTCGCTGGGACTTGCGGC
GACTTCATCGTGGTCTCTGTCATTATGCGCTCCAACGCATAACTTTGCGCCAGAAGATAGATAGAATGGTGTAAGAAACT
GTAATATATATAATGAACTTCGGCGAGTCTGTGGAGTTTTTGTTGCATTAGAGAGCCAAGAGGTCGGACGTCCTCACGTA
GCCCGAGACGGGCAGGGCGATGGCGACTGAACGGGCTCCATATCACTTTGAGCTTTTATGCTTTCGACTCCTCCAGGAGC
TGAACAACCTTGTTCCCGGCAAAGCCCACTGCGTCATGGAGCTCACGGTCTACATTCATGACTGACTAACCGTAAACTGC
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_genomic\char`_count\char`_bases} program is report which describes the number of each base in the file, and the file type.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
File type        : DNA
Number of bases  : 480
Number of a/A    : 114
Number of c/C    : 116
Number of g/G    : 120
Number of t/T    : 130
Number of n/N    : 0
Number of others : 0
\end{lstlisting}

% File: gto/manual/sections/Genomic_sequence_tools/GenomicDNAMutate.tex
\section{Program gto\char`_genomic\char`_dna\char`_mutate}
The \texttt{gto\char`_genomic\char`_dna\char`_mutate} creates a synthetic mutation of a sequence file given specific rates of mutations, deletions and additions. All these paramenters are defined by the user, and their are optional.\\
For help type:
\begin{lstlisting}
./gto_genomic_dna_mutate -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_genomic\char`_dna\char`_mutate} program needs two streams for the computation, namely the input and output standard. However, optional settings can be supplied too, such as the starting point to the random generator, and the edition, deletion and insertion rates. Also, the user can choose to use the ACGTN alphabet in the synthetic mutation. The input stream is a sequence File.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_genomic_dna_mutate [options] [[--] args]
   or: ./gto_genomic_dna_mutate [options]

Creates a synthetic mutation of a sequence file given specific rates of mutations, 
deletions and additions

    -h, --help                    show this help message and exit

Basic options
    < input.seq                   Input sequence file (stdin)
    > output.seq                  Output sequence file (stdout)

Optional
    -s, --seed=<int>              Starting point to the random generator
    -m, --mutation-rate=<dbl>     Defines the mutation rate (default 0.0)
    -d, --deletion-rate=<dbl>     Defines the deletion rate (default 0.0)
    -i, --insertion-rate=<dbl>    Defines the insertion rate (default 0.0)
    -a, --ACGTN-alphabet          When active, the application uses the ACGTN alphabet

Example: ./gto_genomic_dna_mutate -s <seed> -m <mutation rate> -d <deletion rate> -i 
<insertion rate> -a < input.seq > output.seq
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
TCTTTACTCGCGCGTTGGAGAAATACAATAGTGCGGCTCTGTCTCCTTATGAAGTCAACAATTTCGCTGGGACTTGCGGC
TCTTTACTCGCGCGTTGGAGAAATACAATAGTGCGGCTCTGTCTCCTTATGAAGTCAACAATTTCGCTGGGACTTGCGGC
GACTTCATCGTGGTCTCTGTCATTATGCGCTCCAACGCATAACTTTGCGCCAGAAGATAGATAGAATGGTGTAAGAAACT
GTAATATATATAATGAACTTCGGCGAGTCTGTGGAGTTTTTGTTGCATTAGAGAGCCAAGAGGTCGGACGTCCTCACGTA
GCCCGAGACGGGCAGGGCGATGGCGACTGAACGGGCTCCATATCACTTTGAGCTTTTATGCTTTCGACTCCTCCAGGAGC
TGAACAACCTTGTTCCCGGCAAAGCCCACTGCGTCATGGAGCTCACGGTCTACATTCATGACTGACTAACCGTAAACTGC
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_genomic\char`_dna\char`_mutate} program is a sequence file whith the synthetic mutation of input file.\\
Using the input above with the seed value as 1 and the mutation rate as 0.5, an output example for this is the following:
\begin{lstlisting}
TCACGACTGTCGCGTTGGCACACCAGATAGGTGCTTCTACGTTTTGTATCTAATTTACAATTCTCGCTGGGAGTTCATTC
GCTATTGATGGGACTAGAAACCCATCCGTAGCTTGCCGCCGTTTAAGAATAAACACTCCACTTGCACCGAGACGTAGCGC
AACCAAGGCTATGTTCTTTGACCTTATGCGGTCCAACGCAGGAGTAGACCCCCGTAGTTAGGTACTATCGCAGAATAGGC
TTAAGCAGCCGTGCTGAACGCTGGAGGGTCTGTTTAATTACTGAGTGAATGGAGAGCTAAGAGTTCGGAGCACCGCACGA
GGCTCAAGAGCGGAAGGGCGTCAGCCTGGCGACCACCTGCCTACCGCTCGAGTCTGTCTTCACTACAGTCCGTGGAGGAC
CCCCAACGACCTAGTATCCTACAAAGCCGCATACGACTTACAGAACAGGCTGTATCGTCAGGAGTGTGTACACGAAGAGT
A
\end{lstlisting}


% File: gto/manual/sections/Genomic_sequence_tools/GenomicExtract.tex
\section{Program gto\char`_genomic\char`_extract}
The \texttt{gto\char`_genomic\char`_extract} extracts sequences from a sequence file, which the range is defined by the user in the parameters.\\
For help type:
\begin{lstlisting}
./gto_genomic_extract -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_genomic\char`_extract} program needs two paramenters, which defines the begin and the end of the extraction, and two streams for the computation, namely the input and output standard. The input stream is a sequence file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_genomic_extract [options] [[--] args]
   or: ./gto_genomic_extract [options]

It extracts sequences from a sequence file.

    -h, --help        show this help message and exit

Basic options
    -i, --init=<int>  The first position to start the extraction (default 0)
    -e, --end=<int>   The last extract position (default 100)
    < input.seq       Input sequence file (stdin)
    > output.seq      Output sequence file (stdout)

Example: ./gto_genomic_extract -i <init> -e <end> < input.seq > output.seq
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
TCTTTACTCGCGCGTTGGAGAAATACAATAGTGCGGCTCTGTCTCCTTATGAAGTCAACAATTTCGCTGGGACTTGCGGC
TCTTTACTCGCGCGTTGGAGAAATACAATAGTGCGGCTCTGTCTCCTTATGAAGTCAACAATTTCGCTGGGACTTGCGGC
GACTTCATCGTGGTCTCTGTCATTATGCGCTCCAACGCATAACTTTGCGCCAGAAGATAGATAGAATGGTGTAAGAAACT
GTAATATATATAATGAACTTCGGCGAGTCTGTGGAGTTTTTGTTGCATTAGAGAGCCAAGAGGTCGGACGTCCTCACGTA
GCCCGAGACGGGCAGGGCGATGGCGACTGAACGGGCTCCATATCACTTTGAGCTTTTATGCTTTCGACTCCTCCAGGAGC
TGAACAACCTTGTTCCCGGCAAAGCCCACTGCGTCATGGAGCTCACGGTCTACATTCATGACTGACTAACCGTAAACTGC
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_genomic\char`_extract} program is a group sequence.\\
Using the input above with the value 0 as the extraction starting point and the 50 as the ending, an output example for this is the following:
\begin{lstlisting}
TCTTTACTCGCGCGTTGGAGAAATACAATAGTGCGGCTCTGTCTCCTTAT
\end{lstlisting}

% File: gto/manual/sections/Genomic_sequence_tools/GenomicGenRandomDNA.tex
\section{Program gto\char`_genomic\char`_gen\char`_random\char`_dna}
The \texttt{gto\char`_genomic\char`_gen\char`_random\char`_dna} generates a synthetic DNA.\\
For help type:
\begin{lstlisting}
./gto_genomic_gen_random_dna -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_genomic\char`_gen\char`_random\char`_dna} program needs one stream for the computation, namely the output standard.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_genomic_gen_random_dna [options] [[--] args]
   or: ./gto_genomic_gen_random_dna [options]

It generates a synthetic DNA.

    -h, --help                show this help message and exit

Basic options
    > output.seq              Output synthetic DNA sequence (stdout)

Optional
    -s, --seed=<int>          Starting point to the random generator (Default 0)
    -n, --nSymbols=<int>      Number of symbols generated (Default 100)
    -f, --frequency=<str>     The frequency of each base. It should be represented 
    						  in the following format: <fa,fc,fg,ft>.

Example: ./gto_genomic_gen_random_dna -s <seed> -n <nsybomls> -f <fa,fc,fg,ft> > output.seq
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_genomic\char`_gen\char`_random\char`_dna} program is a sequence group file whith the synthetic DNA.\\
Using the input above with the seed value as 1 and the number of symbols as 400, an output example for this is the following:
\begin{lstlisting}
TCTTTACTCGCGCGTTGGAGAAATACAATAGTGCGGCTCTGTCTCCTTATGAAGTCAACAATTTCGCTGGGACTTGCGGC
TCTTTACTCGCGCGTTGGAGAAATACAATAGTGCGGCTCTGTCTCCTTATGAAGTCAACAATTTCGCTGGGACTTGCGGC
GACTTCATCGTGGTCTCTGTCATTATGCGCTCCAACGCATAACTTTGCGCCAGAAGATAGATAGAATGGTGTAAGAAACT
GTAATATATATAATGAACTTCGGCGAGTCTGTGGAGTTTTTGTTGCATTAGAGAGCCAAGAGGTCGGACGTCCTCACGTA
GCCCGAGACGGGCAGGGCGATGGCGACTGAACGGGCTCCATATCACTTTGAGCTTTTATGCTTTCGACTCCTCCAGGAGC
TGAACAACCTTGTTCCCGGCAAAGCCCACTGCGTCATGGAGCTCACGGTCTACATTCATGACTGACTAACCGTAAACTGC
\end{lstlisting}


% File: gto/manual/sections/Genomic_sequence_tools/GenomicPeriod.tex
\section{Program gto\char`_genomic\char`_period}
The \texttt{gto\char`_genomic\char`_period} calculates the best order depth of a sequence, using FCMs. It only works "ACGT", while the rest will be discarded.\\
This application has a dependency to represent the results. It requires the Gnuplot to show the execution result.\\
For help type:
\begin{lstlisting}
./gto_genomic_period -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_genomic\char`_period} program needs two streams for the computation, namely the input and output standard. The input stream is a sequence file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_genomic_period [options] [[--] args]
   or: ./gto_genomic_period [options]

It calculates the best order depth of a sequence, using FCMs.It only works "ACGT", 
while the rest will be discarded.

    -h, --help        show this help message and exit

Basic options
    < input.seq       Input sequence file format (stdin)
    > output          Output is given by log_2(4)*K(x)/|x|) (stdout)

Example: ./gto_genomic_period < input.seq > output
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
TCTTTACTCGCGCGTTGGAGAAATACAATAGTGCGGCTCTGTCTCCTTATGAAGTCAACAATTTCGCTGGGACTTGCGGC
TCTTTACTCGCGCGTTGGAGAAATACAATAGTGCGGCTCTGTCTCCTTATGAAGTCAACAATTTCGCTGGGACTTGCGGC
GACTTCATCGTGGTCTCTGTCATTATGCGCTCCAACGCATAACTTTGCGCCAGAAGATAGATAGAATGGTGTAAGAAACT
GTAATATATATAATGAACTTCGGCGAGTCTGTGGAGTTTTTGTTGCATTAGAGAGCCAAGAGGTCGGACGTCCTCACGTA
GCCCGAGACGGGCAGGGCGATGGCGACTGAACGGGCTCCATATCACTTTGAGCTTTTATGCTTTCGACTCCTCCAGGAGC
TGAACAACCTTGTTCCCGGCAAAGCCCACTGCGTCATGGAGCTCACGGTCTACATTCATGACTGACTAACCGTAAACTGC
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_genomic\char`_period} program is a execution report, followed by the plot with this information.\\
Using the input above, an report example for this is the following:
\begin{lstlisting}
Running order: 1 ... Done!
Running order: 2 ... Done!
Running order: 3 ... Done!
Running order: 4 ... Done!
Running order: 5 ... Done!
Running order: 6 ... Done!
Running order: 7 ... Done!
Running order: 8 ... Done!
Running order: 9 ... Done!
Running order: 10 ... Done!
Running order: 11 ... Done!
Running order: 12 ... Done!
Running order: 13 ... Done!
Running order: 14 ... Done!
Running order: 15 ... Done!
Running order: 16 ... Done!
Running order: 17 ... Done!
Running order: 18 ... Done!
Running order: 19 ... Done!
Running order: 20 ... Done!
 1	2.246
 2	2.225
 3	2.237
 4	2.079
 5	1.821
 6	1.733
 7	1.717
 8	1.708
 9	1.717
10	1.712
11	1.717
12	1.721
13	1.725
14	1.729
15	1.733
16	1.738
17	1.742
18	1.746
19	1.75
20	1.754
\end{lstlisting}

In the Figure~\ref{fig:gtoGenomicPeriod} is represented the plot for the execution above.

 \begin{figure}[!h]
  \centering
  \includegraphics[scale=0.7]{./images/gto_genomic_period.png}
  \caption{\texttt{gto\char`_genomic\char`_period} execution plot.}
  \label{fig:gtoGenomicPeriod}
 \end{figure}

% File: gto/manual/sections/Genomic_sequence_tools/GenomicRandSeqExtraChars.tex
\section{Program gto\char`_genomic\char`_rand\char`_seq\char`_extra\char`_chars}
The \texttt{gto\char`_genomic\char`_rand\char`_seq\char`_extra\char`_chars} substitues in the DNA sequence the outside ACGT chars by random ACGT symbols. It works in sequence file formats.\\
For help type:
\begin{lstlisting}
./gto_genomic_rand_seq_extra_chars -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_genomic\char`_rand\char`_seq\char`_extra\char`_chars} program needs two streams for the computation, namely the input and output standard. The input stream is a sequence file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_genomic_rand_seq_extra_chars [options] [[--] args]
   or: ./gto_genomic_rand_seq_extra_chars [options]

It substitues in the DNA sequence the outside ACGT chars by random ACGT symbols.
It works in sequence file formats


    -h, --help        show this help message and exit

Basic options
    < input.seq       Input sequence file (stdin)
    > output.seq      Output sequence file (stdout)

Example: ./gto_genomic_rand_seq_extra_chars < input.seq > output.seq
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
ANAAGACGNNNTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
NNCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCNNNNNGGAGAGGAAGCTCGGGAGNGTNNNGGCCAGGCGGCAGNNNNCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TANNNNCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAAACAAGATGCCATTGTCCCCCGGCCTCCTGCTG
CTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGGTGGCCCCACCGGCCGAGACAGCGAGCATATGCA
GGAAGCGGCAGGAATAAGNNNAAGCAGCCTCCTGACTTTCCTCGCTTGNNNNTTTGAGTGGACCTCCCAGGCCAGTGCCG
GGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGGCGCACCCCCCCAGCAATCCGCGCGCCGGGAC
AGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAATAAAACCTCACCCATGAATGCTCACGCAAGTT
NNATTACNNNCCTGNN
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_genomic\char`_rand\char`_seq\char`_extra\char`_chars} program is a sequence file.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
ATAAGACGGCTTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
CTCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCGACCGGGAGAGGAAGCTCGGGAGTGTGTTGGCCAGGCGGCAGGAGACCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAATATCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAAACAAGATGCCATTGTCCCCCGGCCTCCTGCTG
CTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGGTGGCCCCACCGGCCGAGACAGCGAGCATATGCA
GGAAGCGGCAGGAATAAGCGGAAGCAGCCTCCTGACTTTCCTCGCTTGGTTTTTTGAGTGGACCTCCCAGGCCAGTGCCG
GGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGGCGCACCCCCCCAGCAATCCGCGCGCCGGGAC
AGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAATAAAACCTCACCCATGAATGCTCACGCAAGTT
CGATTACGGCCCTGTC
\end{lstlisting}

% File: gto/manual/sections/Genomic_sequence_tools/GenomicReverse.tex
\section{Program gto\char`_genomic\char`_reverse}
The \texttt{gto\char`_genomic\char`_reverse} reverses the ACGT bases order for each read in a sequence file.\\
For help type:
\begin{lstlisting}
./gto_genomic_reverse -h
\end{lstlisting}
In the following subsections, we explain the input and output paramters.

\subsection*{Input parameters}

The \texttt{gto\char`_genomic\char`_reverse} program needs two streams for the computation, namely the input and output standard. The input stream is a sequence file.\\
The attribution is given according to:
\begin{lstlisting}
Usage: ./gto_genomic_reverse [options] [[--] args]
   or: ./gto_genomic_reverse [options]

It reverses the ACGT bases order for each read in a sequence file.

    -h, --help        show this help message and exit

Basic options
    < input.seq       Input sequence file (stdin)
    > output.seq      Output sequence file (stdout)

Example: ./gto_genomic_reverse < input.seq > output.seq
\end{lstlisting}
An example of such an input file is:
\begin{lstlisting}
ACAAGACGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCCTGGAGGGTCCACCGCTGCCCTGCTGCCATTGTCCCC
GGCCCCACCTAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAA
GTGGTTTGAGTGGACCTCCGGGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGCAGGCCAGTGCC
GCGAATCCGCGCGCCGGGACAGAATCTCCTGCAAAGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCACCCCCCCAGC
TAAAACCTCACCCATGAATGCTCACGCAAGTTTAATTACAGACCTGAAACAAGATGCCATTGTCCCCCGGCCTCCTGCTG
CTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCCCCTGGAGGGTGGCCCCACCGGCCGAGACAGCGAGCATATGCA
GGAAGCGGCAGGAATAAGGAAAAGCAGCCTCCTGACTTTCCTCGCTTGGTGGTTTGAGTGGACCTCCCAGGCCAGTGCCG
GGCCCCTCATAGGAGAGGAAGCTCGGGAGGTGGCCAGGCGGCAGGAAGGCGCACCCCCCCAGCAATCCGCGCGCCGGGAC
AGAATGCCCTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAATAAAACCTCACCCATGAATGCTCACGCAAGTT
TAATTACAGACCTGAA
\end{lstlisting}

\subsection*{Output}
The output of the \texttt{gto\char`_genomic\char`_reverse} program is a group sequence.\\
Using the input above, an output example for this is the following:
\begin{lstlisting}
AAGTCCAGACATTAATTTGAACGCACTCGTAAGTACCCACTCCAAAATAAACGTCCTCCTCTTCCAGAAGGTCTTCTTCA
AGGACGTCCCGTAAGACAGGGCCGCGCGCCTAACGACCCCCCCACGCGGAAGGACGGCGGACCGGTGGAGGGCTCGAAGG
AGAGGATACTCCCCGGGCCGTGACCGGACCCTCCAGGTGAGTTTGGTGGTTCGCTCCTTTCAGTCCTCCGACGAAAAGGA
ATAAGGACGGCGAAGGACGTATACGAGCGACAGAGCCGGCCACCCCGGTGGGAGGTCCCCGTCCCGTCGCCACCGGCACC
GGGGCCTCTCGTCGTCGTCGTCCTCCGGCCCCCTGTTACCGTAGAACAAAGTCCAGACATTAATTTGAACGCACTCGTAA
GTACCCACTCCAAAATCGACCCCCCCACCTCTTCCAGAAGGTCTTCTTCAAGGACGTCCCGAAACGTCCTCTAAGACAGG
GCCGCGCGCCTAAGCGCCGTGACCGGACGAAGGACGGCGGACCGGTGGAGGGCTCGAAGGAGAGGATACTCCCCGGGCCT
CCAGGTGAGTTTGGTGAAGGACGGCGAAGGACGTATACGAGCGACAGAGCCGGGTTCGCTCCTTTCAGTCCTCCGACGAA
AAGGAATCCACCCCGGCCCCTGTTACCGTCGTCCCGTCGCCACCTGGGAGGTCCCGGCACCGGGGCCTCTCGTCGTCGTC
GTCCTCCGGCAGAACA
\end{lstlisting}

% File: gto/manual/sections/Genomic_sequence_tools/Genomic_sequence_tools.tex
\chapter{Genomic sequence tools}
\label{gst}
The Genomic Sequence subset works directly with the DNA sequences, without any standard format. These tools allow the data extraction, summarising and some mathematical operations over those files. Usually, these are used in the pipeline as a complementary tool. The current available genomic sequence tools, for analysis and manipulation, are:
\begin{enumerate}

\item \texttt{gto\char`_genomic\char`_gen\char`_random\char`_dna}: it generates a synthetic DNA.

\item \texttt{gto\char`_genomic\char`_rand\char`_seq\char`_extra\char`_chars}: it substitues in the DNA sequence the outside ACGT chars by random ACGT symbols.

\item \texttt{gto\char`_genomic\char`_dna\char`_mutate}: it creates a synthetic mutation of a sequence file given specific rates of mutations, deletions and additions.

\item \texttt{gto\char`_genomic\char`_extract}: it extracts sequences from a sequence file, which the range is defined by the user in the parameters.

\item \texttt{gto\char`_genomic\char`_period}: it calculates the best order depth of a sequence, using FCMs.

\item \texttt{gto\char`_genomic\char`_count\char`_bases}: it counts the number of bases in sequence, FASTA or FASTQ files.

\item \texttt{gto\char`_genomic\char`_compressor}: it compress and decompress genomic sequences for storage purposes (also under the alias gto\char`_geco).

\item \texttt{gto\char`_genomic\char`_complement}: it replaces the ACGT bases with their complements in a DNA sequence.

\item \texttt{gto\char`_genomic\char`_reverse}: it reverses the ACGT bases order for each read in a sequence file (also under the alias gto\char`_reverse).

\item \texttt{gto\char`_genomic\char`_variation\char`_map}: this tool is an alias to gto\char`_fastq\char`_variation\char`_map tool. Please check the documentation of this tool in the in the section of FASTQ tools. 

\item \texttt{gto\char`_genomic\char`_variation\char`_filter}: this tool is an alias to gto\char`_fastq\char`_variation\char`_filter tool. Please check the documentation of this tool in the in the section of FASTQ tools. 

\item \texttt{gto\char`_genomic\char`_variation\char`_visual}: this tool is an alias to gto\char`_fastq\char`_variation\char`_visual tool. Please check the documentation of this tool in the in the section of FASTQ tools. 

\end{enumerate}

\input{\GenomicSequenceToolsPath/GenomicGenRandomDNA.tex}
\input{\GenomicSequenceToolsPath/GenomicRandSeqExtraChars.tex}
\input{\GenomicSequenceToolsPath/GenomicDNAMutate.tex}
\input{\GenomicSequenceToolsPath/GenomicExtract.tex}
\input{\GenomicSequenceToolsPath/GenomicPeriod.tex}
\input{\GenomicSequenceToolsPath/GenomicCountBases.tex}
\input{\GenomicSequenceToolsPath/Geco.tex}
\input{\GenomicSequenceToolsPath/GenomicComplement.tex}
\input{\GenomicSequenceToolsPath/GenomicReverse.tex}


% File: gto/manual/sections/introduction.tex
\chapter{Introduction}
\label{intro}

Recent advances in {DNA} sequencing, specifically in next-generation sequencing~(NGS), revolutionised the field of genomics, making possible the generation of large amounts of sequencing data very rapidly and at substantially low cost~\cite{mardis2017dna}. This new technology also brought with it several challenges, namely in what concerns the analysis, storage, and transmission of the generated sequences~\cite{brouwer2016current,liu2012comparison}. As a consequence, several specialised tools were developed throughout the years in order to deal with these challenges.

Firstly, the storage of the raw data generated by NGS experiments is possible by using several file formats, the FASTQ and FASTA are the most commonly used~\cite{zhang2016overview}. %Therefore, its analysis and manipulation are crucial~\cite{buermans2014next}.
FASTQ is an extension of the FASTA format, that besides the nucleotide sequence, also stores associated per base quality score and it is considered the standard format for sequencing data storage and exchange~\cite{cock2009sanger}.

Regarding the analysis and manipulation of these sequencing data files many software applications emerged, including \texttt{fqtools}~\cite{droop2016fqtools},
\texttt{FASTX-Toolkit}~\cite{gordon2010fastx},
\texttt{GALAXY}~\cite{afgan2018galaxy}, \texttt{GATK}~\cite{depristo2011framework},
\texttt{MEGA}~\cite{kumar2016mega7}, \texttt{SeqKit}~\cite{shen2016seqkit}, among others. \texttt{Fqtools} is a suite of tools to view, manipulate and summarise FASTQ data. This software also identifies invalid FASTQ files~\cite{droop2016fqtools}. \texttt{GALAXY}, in its turn, is an open, web-based scientific platform for analysing genomic data~\cite{goecks2010galaxy}. This platform integrates several specialised sets of tools, e.g. for manipulating FASTQ files~\cite{blankenberg2010manipulation}.
\texttt{FASTX-Toolkit} is a collection of command-line tools to process FASTA and FASTQ files. This toolkit is available in two forms: as a command-line, or integrated into the web-based platform GALAXY~\cite{gordon2010fastx}. \texttt{SeqKit} is another toolkit used to process FASTA and FASTQ files and is available for all major operating systems~\cite{shen2016seqkit}. The Genome Analysis Toolkit~(\texttt{GATK}) was designed as a structured programming framework to simplify the development of analysis tools. However, nowadays, it is a suite of tools focused on variant discovering and genotyping~\cite{van2013fastq}. More towards the evolutionary perspectives, Molecular Evolutionary Genetics Analysis~(\texttt{MEGA}) software provides tools to analyse DNA and protein sequences statistically~\cite{tamura2011mega5}. Several of these frameworks lack on variety, namely the ability to perform multiple tasks using only one toolkit.

Compression is another important aspect when dealing with high-throughput sequencing data, as it reduces storage space and accelerates data transmission. A survey on DNA compressors and amino acid sequence compression can be found in~\cite{hosseini2016survey}. Currently, the DNA sequence compressors HiRGC~\cite{liu2017high}, iDoComp~\cite{ochoa2014idocomp}, GeCo~\cite{pratas2016efficient}, and GDC~\cite{deorowicz2015gdc} are considered to have the best performance~\cite{hernaez2019genomic}. Of these four approaches, GeCo is the only one that can be used for reference-free and reference-based compression. Furthermore, GeCo can be used as an analysis tool to determine absolute measures for many distance computations and local measures~\cite{pratas2016efficient}.

Amino acid sequences are known to be very hard to compress~\cite{nalbantoglu2010data}, however, Hosseini et al.~\cite{hosseini2019ac} recently developed AC, a state-of-the-art for lossless amino acid sequence compression. In~\cite{pratas2018compression} the authors compared the performance of AC, in terms of bit-rate, to several general-purpose lossless compressors and several protein compressors, using different proteomes. They concluded that in average AC provides the best bit-rates.

Another relevant subject is genomic data simulation. Read simulations tools are fundamental for the development, testing and evaluation of methods and computational tools~\cite{huang2011art,price2017simulome}. Despite the availability of a large number of real sequence reads, read simulation data is necessary due to the inability to know the ground truth of real data~\cite{baruzzo2017simulation}. Escalona \textit{et al.}~\cite{escalona2016comparison}, recently, reviewed 23 NGS simulation tools. XS~\cite{pratas2014xs}, a FASTQ read simulation tool, stands out in relation to the other 22 simulation tools because it is the only one that does not need a reference sequence. Furthermore, XS is the only open-source tool for simulation of FASTQ reads produced by the four most used sequencing machines, Roche-454, Illumina, ABI SOLiD and Ion Torrent. 

Although a large number of tools are available for analysing, compressing, and simulation, these tools are specialised in only a specific task. Besides, in many cases the output of one tool cannot be used directly as input for another tool, e.g. the output of a simulation tool cannot always be used directly as input for an analysis tool. Thus, unique software that includes several specialised tools is necessary.

In this document, we describe \texttt{GTO}, a complete toolkit for genomics and proteomics, namely for FASTQ, FASTA and SEQ formats, with many complementary tools. The toolkit is for Unix-based systems, built for ultra-fast computations. \texttt{GTO} supports pipes for easy integration with the sub-programs belonging to \texttt{GTO} as well as external tools. \texttt{GTO} works as \textit{LEGOs}, since it allows the construction of multiple pipelines with many combinations.

\texttt{GTO} includes tools for information display, randomisation, edition, conversion, extraction, search, calculation, compression, simulation and visualisation. \texttt{GTO} is prepared to deal with very large datasets, typically in the scale of Gigabytes or Terabytes (but not limited).
The complete toolkit is an optimised command-line version, using the prefix ``\texttt{gto}\_'' followed by the suffix with the respective name of the program. \texttt{GTO} is implemented in \texttt{C} language and it is available, under the MIT license, at:
\begin{lstlisting}
http://bioinformatics.ua.pt/gto
\end{lstlisting}

\section{Installation}
To install \texttt{GTO} through the GitHub repository:
\begin{lstlisting}
git clone https://github.com/cobilab/gto.git
cd gto/src/
make
\end{lstlisting}
Or by installing them directly using the Cobilab channel from Conda:
\begin{lstlisting}
conda install -c cobilab gto --yes
\end{lstlisting}


\section{Testing}
The examples provided in this document are available in the repository. Therefore, each example can be easily reproduced, which it will also test and validate each tool. To replicate those tests, it can be done in two different ways: 
\begin{itemize}
	\item Running one test for a specific tool:
\begin{lstlisting}
cd gto/tester/gto_{tool}
sh runExample.sh
\end{lstlisting}
\item Running the batch of tests for all the tools:
\begin{lstlisting}
cd gto/tester/
sh runAllTests.sh
\end{lstlisting}
\end{itemize}
Some of these tests require internet connection to download external files and it will create new files.

\section{Execution control}
The quality control in Unix/Linux pipelines using GTO's tools is made in three ways:  
\begin{enumerate}
\item Input verification: where the tools verify the format of the input file; 

\item  Stderr logs: Some execution errors are directly sent for the stderr channel. 

\item Scripting validation: In complex pipelines, the verification of all the tools in the pipeline were executed properly, it is used the PIPESTATUS variable, e.g.:  
\begin{lstlisting}
gto_fasta_rand_extra_chars < input.fa | gto_fasta_to_seq > output.seq 
echo "${PIPESTATUS[0]} ${PIPESTATUS[1]}" 
0 0 
\end{lstlisting}

\end{enumerate}


\section{License}

The license is \textbf{MIT}. In resume, it is a short and simple permissive license with conditions only requiring preservation of copyright and license notices. Licensed works, modifications, and larger works may be distributed under different terms and without source code.\\
\textbf{Permissions}:
\begin{itemize}
	\item commercial use;
	\item modification;
	\item distribution;
	\item private use.
\end{itemize}
\textbf{Limitations}:
\begin{itemize}
	\item liability;
	\item warranty.
\end{itemize}
\textbf{Conditions}:
\begin{itemize}
        \item License and copyright notice.
\end{itemize}
For details on the license, consult: \url{https://opensource.org/licenses/MIT}.


